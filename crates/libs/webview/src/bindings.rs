// Bindings generated by `windows-bindgen` 0.62.1

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]

pub mod WebView2 {
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_BOUNDS_MODE(pub u32);
    pub const COREWEBVIEW2_BOUNDS_MODE_USE_RASTERIZATION_SCALE: COREWEBVIEW2_BOUNDS_MODE =
        COREWEBVIEW2_BOUNDS_MODE(1u32);
    pub const COREWEBVIEW2_BOUNDS_MODE_USE_RAW_PIXELS: COREWEBVIEW2_BOUNDS_MODE =
        COREWEBVIEW2_BOUNDS_MODE(0u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_BROWSER_PROCESS_EXIT_KIND(pub u32);
    pub const COREWEBVIEW2_BROWSER_PROCESS_EXIT_KIND_FAILED:
        COREWEBVIEW2_BROWSER_PROCESS_EXIT_KIND = COREWEBVIEW2_BROWSER_PROCESS_EXIT_KIND(1u32);
    pub const COREWEBVIEW2_BROWSER_PROCESS_EXIT_KIND_NORMAL:
        COREWEBVIEW2_BROWSER_PROCESS_EXIT_KIND = COREWEBVIEW2_BROWSER_PROCESS_EXIT_KIND(0u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_BROWSING_DATA_KINDS(pub u32);
    pub const COREWEBVIEW2_BROWSING_DATA_KINDS_ALL_DOM_STORAGE: COREWEBVIEW2_BROWSING_DATA_KINDS =
        COREWEBVIEW2_BROWSING_DATA_KINDS(32u32);
    pub const COREWEBVIEW2_BROWSING_DATA_KINDS_ALL_PROFILE: COREWEBVIEW2_BROWSING_DATA_KINDS =
        COREWEBVIEW2_BROWSING_DATA_KINDS(16384u32);
    pub const COREWEBVIEW2_BROWSING_DATA_KINDS_ALL_SITE: COREWEBVIEW2_BROWSING_DATA_KINDS =
        COREWEBVIEW2_BROWSING_DATA_KINDS(128u32);
    pub const COREWEBVIEW2_BROWSING_DATA_KINDS_BROWSING_HISTORY: COREWEBVIEW2_BROWSING_DATA_KINDS =
        COREWEBVIEW2_BROWSING_DATA_KINDS(4096u32);
    pub const COREWEBVIEW2_BROWSING_DATA_KINDS_CACHE_STORAGE: COREWEBVIEW2_BROWSING_DATA_KINDS =
        COREWEBVIEW2_BROWSING_DATA_KINDS(16u32);
    pub const COREWEBVIEW2_BROWSING_DATA_KINDS_COOKIES: COREWEBVIEW2_BROWSING_DATA_KINDS =
        COREWEBVIEW2_BROWSING_DATA_KINDS(64u32);
    pub const COREWEBVIEW2_BROWSING_DATA_KINDS_DISK_CACHE: COREWEBVIEW2_BROWSING_DATA_KINDS =
        COREWEBVIEW2_BROWSING_DATA_KINDS(256u32);
    pub const COREWEBVIEW2_BROWSING_DATA_KINDS_DOWNLOAD_HISTORY: COREWEBVIEW2_BROWSING_DATA_KINDS =
        COREWEBVIEW2_BROWSING_DATA_KINDS(512u32);
    pub const COREWEBVIEW2_BROWSING_DATA_KINDS_FILE_SYSTEMS: COREWEBVIEW2_BROWSING_DATA_KINDS =
        COREWEBVIEW2_BROWSING_DATA_KINDS(1u32);
    pub const COREWEBVIEW2_BROWSING_DATA_KINDS_GENERAL_AUTOFILL: COREWEBVIEW2_BROWSING_DATA_KINDS =
        COREWEBVIEW2_BROWSING_DATA_KINDS(1024u32);
    pub const COREWEBVIEW2_BROWSING_DATA_KINDS_INDEXED_DB: COREWEBVIEW2_BROWSING_DATA_KINDS =
        COREWEBVIEW2_BROWSING_DATA_KINDS(2u32);
    pub const COREWEBVIEW2_BROWSING_DATA_KINDS_LOCAL_STORAGE: COREWEBVIEW2_BROWSING_DATA_KINDS =
        COREWEBVIEW2_BROWSING_DATA_KINDS(4u32);
    pub const COREWEBVIEW2_BROWSING_DATA_KINDS_PASSWORD_AUTOSAVE: COREWEBVIEW2_BROWSING_DATA_KINDS =
        COREWEBVIEW2_BROWSING_DATA_KINDS(2048u32);
    pub const COREWEBVIEW2_BROWSING_DATA_KINDS_SERVICE_WORKERS: COREWEBVIEW2_BROWSING_DATA_KINDS =
        COREWEBVIEW2_BROWSING_DATA_KINDS(32768u32);
    pub const COREWEBVIEW2_BROWSING_DATA_KINDS_SETTINGS: COREWEBVIEW2_BROWSING_DATA_KINDS =
        COREWEBVIEW2_BROWSING_DATA_KINDS(8192u32);
    pub const COREWEBVIEW2_BROWSING_DATA_KINDS_WEB_SQL: COREWEBVIEW2_BROWSING_DATA_KINDS =
        COREWEBVIEW2_BROWSING_DATA_KINDS(8u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT(pub u32);
    pub const COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT_JPEG:
        COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT = COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT(1u32);
    pub const COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT_PNG:
        COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT = COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT(0u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_CHANNEL_SEARCH_KIND(pub u32);
    pub const COREWEBVIEW2_CHANNEL_SEARCH_KIND_LEAST_STABLE: COREWEBVIEW2_CHANNEL_SEARCH_KIND =
        COREWEBVIEW2_CHANNEL_SEARCH_KIND(1u32);
    pub const COREWEBVIEW2_CHANNEL_SEARCH_KIND_MOST_STABLE: COREWEBVIEW2_CHANNEL_SEARCH_KIND =
        COREWEBVIEW2_CHANNEL_SEARCH_KIND(0u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_CLIENT_CERTIFICATE_KIND(pub u32);
    pub const COREWEBVIEW2_CLIENT_CERTIFICATE_KIND_OTHER: COREWEBVIEW2_CLIENT_CERTIFICATE_KIND =
        COREWEBVIEW2_CLIENT_CERTIFICATE_KIND(2u32);
    pub const COREWEBVIEW2_CLIENT_CERTIFICATE_KIND_PIN: COREWEBVIEW2_CLIENT_CERTIFICATE_KIND =
        COREWEBVIEW2_CLIENT_CERTIFICATE_KIND(1u32);
    pub const COREWEBVIEW2_CLIENT_CERTIFICATE_KIND_SMART_CARD:
        COREWEBVIEW2_CLIENT_CERTIFICATE_KIND = COREWEBVIEW2_CLIENT_CERTIFICATE_KIND(0u32);
    #[repr(C)]
    #[derive(Clone, Copy, Debug, Default, PartialEq)]
    pub struct COREWEBVIEW2_COLOR(pub u8);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_CONTEXT_MENU_ITEM_KIND(pub u32);
    pub const COREWEBVIEW2_CONTEXT_MENU_ITEM_KIND_CHECK_BOX: COREWEBVIEW2_CONTEXT_MENU_ITEM_KIND =
        COREWEBVIEW2_CONTEXT_MENU_ITEM_KIND(1u32);
    pub const COREWEBVIEW2_CONTEXT_MENU_ITEM_KIND_COMMAND: COREWEBVIEW2_CONTEXT_MENU_ITEM_KIND =
        COREWEBVIEW2_CONTEXT_MENU_ITEM_KIND(0u32);
    pub const COREWEBVIEW2_CONTEXT_MENU_ITEM_KIND_RADIO: COREWEBVIEW2_CONTEXT_MENU_ITEM_KIND =
        COREWEBVIEW2_CONTEXT_MENU_ITEM_KIND(2u32);
    pub const COREWEBVIEW2_CONTEXT_MENU_ITEM_KIND_SEPARATOR: COREWEBVIEW2_CONTEXT_MENU_ITEM_KIND =
        COREWEBVIEW2_CONTEXT_MENU_ITEM_KIND(3u32);
    pub const COREWEBVIEW2_CONTEXT_MENU_ITEM_KIND_SUBMENU: COREWEBVIEW2_CONTEXT_MENU_ITEM_KIND =
        COREWEBVIEW2_CONTEXT_MENU_ITEM_KIND(4u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_CONTEXT_MENU_TARGET_KIND(pub u32);
    pub const COREWEBVIEW2_CONTEXT_MENU_TARGET_KIND_AUDIO: COREWEBVIEW2_CONTEXT_MENU_TARGET_KIND =
        COREWEBVIEW2_CONTEXT_MENU_TARGET_KIND(3u32);
    pub const COREWEBVIEW2_CONTEXT_MENU_TARGET_KIND_IMAGE: COREWEBVIEW2_CONTEXT_MENU_TARGET_KIND =
        COREWEBVIEW2_CONTEXT_MENU_TARGET_KIND(1u32);
    pub const COREWEBVIEW2_CONTEXT_MENU_TARGET_KIND_PAGE: COREWEBVIEW2_CONTEXT_MENU_TARGET_KIND =
        COREWEBVIEW2_CONTEXT_MENU_TARGET_KIND(0u32);
    pub const COREWEBVIEW2_CONTEXT_MENU_TARGET_KIND_SELECTED_TEXT:
        COREWEBVIEW2_CONTEXT_MENU_TARGET_KIND = COREWEBVIEW2_CONTEXT_MENU_TARGET_KIND(2u32);
    pub const COREWEBVIEW2_CONTEXT_MENU_TARGET_KIND_VIDEO: COREWEBVIEW2_CONTEXT_MENU_TARGET_KIND =
        COREWEBVIEW2_CONTEXT_MENU_TARGET_KIND(4u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_COOKIE_SAME_SITE_KIND(pub u32);
    pub const COREWEBVIEW2_COOKIE_SAME_SITE_KIND_LAX: COREWEBVIEW2_COOKIE_SAME_SITE_KIND =
        COREWEBVIEW2_COOKIE_SAME_SITE_KIND(1u32);
    pub const COREWEBVIEW2_COOKIE_SAME_SITE_KIND_NONE: COREWEBVIEW2_COOKIE_SAME_SITE_KIND =
        COREWEBVIEW2_COOKIE_SAME_SITE_KIND(0u32);
    pub const COREWEBVIEW2_COOKIE_SAME_SITE_KIND_STRICT: COREWEBVIEW2_COOKIE_SAME_SITE_KIND =
        COREWEBVIEW2_COOKIE_SAME_SITE_KIND(2u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT(pub u32);
    pub const COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT_BOTTOM_LEFT:
        COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT =
        COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT(2u32);
    pub const COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT_BOTTOM_RIGHT:
        COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT =
        COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT(3u32);
    pub const COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT_TOP_LEFT:
        COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT =
        COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT(0u32);
    pub const COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT_TOP_RIGHT:
        COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT =
        COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT(1u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(pub u32);
    pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_DOWNLOAD_PROCESS_CRASHED:
        COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(29u32);
    pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_FILE_ACCESS_DENIED:
        COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(2u32);
    pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_FILE_BLOCKED_BY_POLICY:
        COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(8u32);
    pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_FILE_FAILED:
        COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(1u32);
    pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_FILE_HASH_MISMATCH:
        COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(11u32);
    pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_FILE_MALICIOUS:
        COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(6u32);
    pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_FILE_NAME_TOO_LONG:
        COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(4u32);
    pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_FILE_NO_SPACE:
        COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(3u32);
    pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_FILE_SECURITY_CHECK_FAILED:
        COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(9u32);
    pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_FILE_TOO_LARGE:
        COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(5u32);
    pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_FILE_TOO_SHORT:
        COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(10u32);
    pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_FILE_TRANSIENT_ERROR:
        COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(7u32);
    pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_NETWORK_DISCONNECTED:
        COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(14u32);
    pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_NETWORK_FAILED:
        COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(12u32);
    pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_NETWORK_INVALID_REQUEST:
        COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(16u32);
    pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_NETWORK_SERVER_DOWN:
        COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(15u32);
    pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_NETWORK_TIMEOUT:
        COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(13u32);
    pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_NONE: COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON =
        COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(0u32);
    pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_SERVER_BAD_CONTENT:
        COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(19u32);
    pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_SERVER_CERTIFICATE_PROBLEM:
        COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(21u32);
    pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_SERVER_CONTENT_LENGTH_MISMATCH:
        COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(24u32);
    pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_SERVER_CROSS_ORIGIN_REDIRECT:
        COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(25u32);
    pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_SERVER_FAILED:
        COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(17u32);
    pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_SERVER_FORBIDDEN:
        COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(22u32);
    pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_SERVER_NO_RANGE:
        COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(18u32);
    pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_SERVER_UNAUTHORIZED:
        COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(20u32);
    pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_SERVER_UNEXPECTED_RESPONSE:
        COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(23u32);
    pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_USER_CANCELED:
        COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(26u32);
    pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_USER_PAUSED:
        COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(28u32);
    pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_USER_SHUTDOWN:
        COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(27u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_DOWNLOAD_STATE(pub u32);
    pub const COREWEBVIEW2_DOWNLOAD_STATE_COMPLETED: COREWEBVIEW2_DOWNLOAD_STATE =
        COREWEBVIEW2_DOWNLOAD_STATE(2u32);
    pub const COREWEBVIEW2_DOWNLOAD_STATE_INTERRUPTED: COREWEBVIEW2_DOWNLOAD_STATE =
        COREWEBVIEW2_DOWNLOAD_STATE(1u32);
    pub const COREWEBVIEW2_DOWNLOAD_STATE_IN_PROGRESS: COREWEBVIEW2_DOWNLOAD_STATE =
        COREWEBVIEW2_DOWNLOAD_STATE(0u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_FAVICON_IMAGE_FORMAT(pub u32);
    pub const COREWEBVIEW2_FAVICON_IMAGE_FORMAT_JPEG: COREWEBVIEW2_FAVICON_IMAGE_FORMAT =
        COREWEBVIEW2_FAVICON_IMAGE_FORMAT(1u32);
    pub const COREWEBVIEW2_FAVICON_IMAGE_FORMAT_PNG: COREWEBVIEW2_FAVICON_IMAGE_FORMAT =
        COREWEBVIEW2_FAVICON_IMAGE_FORMAT(0u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_FILE_SYSTEM_HANDLE_KIND(pub u32);
    pub const COREWEBVIEW2_FILE_SYSTEM_HANDLE_KIND_DIRECTORY: COREWEBVIEW2_FILE_SYSTEM_HANDLE_KIND =
        COREWEBVIEW2_FILE_SYSTEM_HANDLE_KIND(1u32);
    pub const COREWEBVIEW2_FILE_SYSTEM_HANDLE_KIND_FILE: COREWEBVIEW2_FILE_SYSTEM_HANDLE_KIND =
        COREWEBVIEW2_FILE_SYSTEM_HANDLE_KIND(0u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_FILE_SYSTEM_HANDLE_PERMISSION(pub u32);
    pub const COREWEBVIEW2_FILE_SYSTEM_HANDLE_PERMISSION_READ_ONLY:
        COREWEBVIEW2_FILE_SYSTEM_HANDLE_PERMISSION =
        COREWEBVIEW2_FILE_SYSTEM_HANDLE_PERMISSION(0u32);
    pub const COREWEBVIEW2_FILE_SYSTEM_HANDLE_PERMISSION_READ_WRITE:
        COREWEBVIEW2_FILE_SYSTEM_HANDLE_PERMISSION =
        COREWEBVIEW2_FILE_SYSTEM_HANDLE_PERMISSION(1u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_FRAME_KIND(pub u32);
    pub const COREWEBVIEW2_FRAME_KIND_EMBED: COREWEBVIEW2_FRAME_KIND =
        COREWEBVIEW2_FRAME_KIND(3u32);
    pub const COREWEBVIEW2_FRAME_KIND_IFRAME: COREWEBVIEW2_FRAME_KIND =
        COREWEBVIEW2_FRAME_KIND(2u32);
    pub const COREWEBVIEW2_FRAME_KIND_MAIN_FRAME: COREWEBVIEW2_FRAME_KIND =
        COREWEBVIEW2_FRAME_KIND(1u32);
    pub const COREWEBVIEW2_FRAME_KIND_OBJECT: COREWEBVIEW2_FRAME_KIND =
        COREWEBVIEW2_FRAME_KIND(4u32);
    pub const COREWEBVIEW2_FRAME_KIND_UNKNOWN: COREWEBVIEW2_FRAME_KIND =
        COREWEBVIEW2_FRAME_KIND(0u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND(pub u32);
    pub const COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND_ALLOW: COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND =
        COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND(1u32);
    pub const COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND_DENY: COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND =
        COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND(0u32);
    pub const COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND_DENY_CORS:
        COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND = COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND(2u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_KEY_EVENT_KIND(pub u32);
    pub const COREWEBVIEW2_KEY_EVENT_KIND_KEY_DOWN: COREWEBVIEW2_KEY_EVENT_KIND =
        COREWEBVIEW2_KEY_EVENT_KIND(0u32);
    pub const COREWEBVIEW2_KEY_EVENT_KIND_KEY_UP: COREWEBVIEW2_KEY_EVENT_KIND =
        COREWEBVIEW2_KEY_EVENT_KIND(1u32);
    pub const COREWEBVIEW2_KEY_EVENT_KIND_SYSTEM_KEY_DOWN: COREWEBVIEW2_KEY_EVENT_KIND =
        COREWEBVIEW2_KEY_EVENT_KIND(2u32);
    pub const COREWEBVIEW2_KEY_EVENT_KIND_SYSTEM_KEY_UP: COREWEBVIEW2_KEY_EVENT_KIND =
        COREWEBVIEW2_KEY_EVENT_KIND(3u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL(pub u32);
    pub const COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL_LOW: COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL =
        COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL(1u32);
    pub const COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL_NORMAL:
        COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL = COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL(0u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_MOUSE_EVENT_KIND(pub u32);
    pub const COREWEBVIEW2_MOUSE_EVENT_KIND_HORIZONTAL_WHEEL: COREWEBVIEW2_MOUSE_EVENT_KIND =
        COREWEBVIEW2_MOUSE_EVENT_KIND(526u32);
    pub const COREWEBVIEW2_MOUSE_EVENT_KIND_LEAVE: COREWEBVIEW2_MOUSE_EVENT_KIND =
        COREWEBVIEW2_MOUSE_EVENT_KIND(675u32);
    pub const COREWEBVIEW2_MOUSE_EVENT_KIND_LEFT_BUTTON_DOUBLE_CLICK:
        COREWEBVIEW2_MOUSE_EVENT_KIND = COREWEBVIEW2_MOUSE_EVENT_KIND(515u32);
    pub const COREWEBVIEW2_MOUSE_EVENT_KIND_LEFT_BUTTON_DOWN: COREWEBVIEW2_MOUSE_EVENT_KIND =
        COREWEBVIEW2_MOUSE_EVENT_KIND(513u32);
    pub const COREWEBVIEW2_MOUSE_EVENT_KIND_LEFT_BUTTON_UP: COREWEBVIEW2_MOUSE_EVENT_KIND =
        COREWEBVIEW2_MOUSE_EVENT_KIND(514u32);
    pub const COREWEBVIEW2_MOUSE_EVENT_KIND_MIDDLE_BUTTON_DOUBLE_CLICK:
        COREWEBVIEW2_MOUSE_EVENT_KIND = COREWEBVIEW2_MOUSE_EVENT_KIND(521u32);
    pub const COREWEBVIEW2_MOUSE_EVENT_KIND_MIDDLE_BUTTON_DOWN: COREWEBVIEW2_MOUSE_EVENT_KIND =
        COREWEBVIEW2_MOUSE_EVENT_KIND(519u32);
    pub const COREWEBVIEW2_MOUSE_EVENT_KIND_MIDDLE_BUTTON_UP: COREWEBVIEW2_MOUSE_EVENT_KIND =
        COREWEBVIEW2_MOUSE_EVENT_KIND(520u32);
    pub const COREWEBVIEW2_MOUSE_EVENT_KIND_MOVE: COREWEBVIEW2_MOUSE_EVENT_KIND =
        COREWEBVIEW2_MOUSE_EVENT_KIND(512u32);
    pub const COREWEBVIEW2_MOUSE_EVENT_KIND_NON_CLIENT_RIGHT_BUTTON_DOWN:
        COREWEBVIEW2_MOUSE_EVENT_KIND = COREWEBVIEW2_MOUSE_EVENT_KIND(164u32);
    pub const COREWEBVIEW2_MOUSE_EVENT_KIND_NON_CLIENT_RIGHT_BUTTON_UP:
        COREWEBVIEW2_MOUSE_EVENT_KIND = COREWEBVIEW2_MOUSE_EVENT_KIND(165u32);
    pub const COREWEBVIEW2_MOUSE_EVENT_KIND_RIGHT_BUTTON_DOUBLE_CLICK:
        COREWEBVIEW2_MOUSE_EVENT_KIND = COREWEBVIEW2_MOUSE_EVENT_KIND(518u32);
    pub const COREWEBVIEW2_MOUSE_EVENT_KIND_RIGHT_BUTTON_DOWN: COREWEBVIEW2_MOUSE_EVENT_KIND =
        COREWEBVIEW2_MOUSE_EVENT_KIND(516u32);
    pub const COREWEBVIEW2_MOUSE_EVENT_KIND_RIGHT_BUTTON_UP: COREWEBVIEW2_MOUSE_EVENT_KIND =
        COREWEBVIEW2_MOUSE_EVENT_KIND(517u32);
    pub const COREWEBVIEW2_MOUSE_EVENT_KIND_WHEEL: COREWEBVIEW2_MOUSE_EVENT_KIND =
        COREWEBVIEW2_MOUSE_EVENT_KIND(522u32);
    pub const COREWEBVIEW2_MOUSE_EVENT_KIND_X_BUTTON_DOUBLE_CLICK: COREWEBVIEW2_MOUSE_EVENT_KIND =
        COREWEBVIEW2_MOUSE_EVENT_KIND(525u32);
    pub const COREWEBVIEW2_MOUSE_EVENT_KIND_X_BUTTON_DOWN: COREWEBVIEW2_MOUSE_EVENT_KIND =
        COREWEBVIEW2_MOUSE_EVENT_KIND(523u32);
    pub const COREWEBVIEW2_MOUSE_EVENT_KIND_X_BUTTON_UP: COREWEBVIEW2_MOUSE_EVENT_KIND =
        COREWEBVIEW2_MOUSE_EVENT_KIND(524u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS(pub u32);
    pub const COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS_CONTROL: COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS =
        COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS(8u32);
    pub const COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS_LEFT_BUTTON:
        COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS = COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS(1u32);
    pub const COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS_MIDDLE_BUTTON:
        COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS = COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS(16u32);
    pub const COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS_NONE: COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS =
        COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS(0u32);
    pub const COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS_RIGHT_BUTTON:
        COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS = COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS(2u32);
    pub const COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS_SHIFT: COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS =
        COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS(4u32);
    pub const COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS_X_BUTTON1:
        COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS = COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS(32u32);
    pub const COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS_X_BUTTON2:
        COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS = COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS(64u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_MOVE_FOCUS_REASON(pub u32);
    pub const COREWEBVIEW2_MOVE_FOCUS_REASON_NEXT: COREWEBVIEW2_MOVE_FOCUS_REASON =
        COREWEBVIEW2_MOVE_FOCUS_REASON(1u32);
    pub const COREWEBVIEW2_MOVE_FOCUS_REASON_PREVIOUS: COREWEBVIEW2_MOVE_FOCUS_REASON =
        COREWEBVIEW2_MOVE_FOCUS_REASON(2u32);
    pub const COREWEBVIEW2_MOVE_FOCUS_REASON_PROGRAMMATIC: COREWEBVIEW2_MOVE_FOCUS_REASON =
        COREWEBVIEW2_MOVE_FOCUS_REASON(0u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_NAVIGATION_KIND(pub u32);
    pub const COREWEBVIEW2_NAVIGATION_KIND_BACK_OR_FORWARD: COREWEBVIEW2_NAVIGATION_KIND =
        COREWEBVIEW2_NAVIGATION_KIND(1u32);
    pub const COREWEBVIEW2_NAVIGATION_KIND_NEW_DOCUMENT: COREWEBVIEW2_NAVIGATION_KIND =
        COREWEBVIEW2_NAVIGATION_KIND(2u32);
    pub const COREWEBVIEW2_NAVIGATION_KIND_RELOAD: COREWEBVIEW2_NAVIGATION_KIND =
        COREWEBVIEW2_NAVIGATION_KIND(0u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_NON_CLIENT_REGION_KIND(pub u32);
    pub const COREWEBVIEW2_NON_CLIENT_REGION_KIND_CAPTION: COREWEBVIEW2_NON_CLIENT_REGION_KIND =
        COREWEBVIEW2_NON_CLIENT_REGION_KIND(2u32);
    pub const COREWEBVIEW2_NON_CLIENT_REGION_KIND_CLIENT: COREWEBVIEW2_NON_CLIENT_REGION_KIND =
        COREWEBVIEW2_NON_CLIENT_REGION_KIND(1u32);
    pub const COREWEBVIEW2_NON_CLIENT_REGION_KIND_CLOSE: COREWEBVIEW2_NON_CLIENT_REGION_KIND =
        COREWEBVIEW2_NON_CLIENT_REGION_KIND(20u32);
    pub const COREWEBVIEW2_NON_CLIENT_REGION_KIND_MAXIMIZE: COREWEBVIEW2_NON_CLIENT_REGION_KIND =
        COREWEBVIEW2_NON_CLIENT_REGION_KIND(9u32);
    pub const COREWEBVIEW2_NON_CLIENT_REGION_KIND_MINIMIZE: COREWEBVIEW2_NON_CLIENT_REGION_KIND =
        COREWEBVIEW2_NON_CLIENT_REGION_KIND(8u32);
    pub const COREWEBVIEW2_NON_CLIENT_REGION_KIND_NOWHERE: COREWEBVIEW2_NON_CLIENT_REGION_KIND =
        COREWEBVIEW2_NON_CLIENT_REGION_KIND(0u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_PDF_TOOLBAR_ITEMS(pub u32);
    pub const COREWEBVIEW2_PDF_TOOLBAR_ITEMS_BOOKMARKS: COREWEBVIEW2_PDF_TOOLBAR_ITEMS =
        COREWEBVIEW2_PDF_TOOLBAR_ITEMS(256u32);
    pub const COREWEBVIEW2_PDF_TOOLBAR_ITEMS_FIT_PAGE: COREWEBVIEW2_PDF_TOOLBAR_ITEMS =
        COREWEBVIEW2_PDF_TOOLBAR_ITEMS(64u32);
    pub const COREWEBVIEW2_PDF_TOOLBAR_ITEMS_FULL_SCREEN: COREWEBVIEW2_PDF_TOOLBAR_ITEMS =
        COREWEBVIEW2_PDF_TOOLBAR_ITEMS(2048u32);
    pub const COREWEBVIEW2_PDF_TOOLBAR_ITEMS_MORE_SETTINGS: COREWEBVIEW2_PDF_TOOLBAR_ITEMS =
        COREWEBVIEW2_PDF_TOOLBAR_ITEMS(4096u32);
    pub const COREWEBVIEW2_PDF_TOOLBAR_ITEMS_NONE: COREWEBVIEW2_PDF_TOOLBAR_ITEMS =
        COREWEBVIEW2_PDF_TOOLBAR_ITEMS(0u32);
    pub const COREWEBVIEW2_PDF_TOOLBAR_ITEMS_PAGE_LAYOUT: COREWEBVIEW2_PDF_TOOLBAR_ITEMS =
        COREWEBVIEW2_PDF_TOOLBAR_ITEMS(128u32);
    pub const COREWEBVIEW2_PDF_TOOLBAR_ITEMS_PAGE_SELECTOR: COREWEBVIEW2_PDF_TOOLBAR_ITEMS =
        COREWEBVIEW2_PDF_TOOLBAR_ITEMS(512u32);
    pub const COREWEBVIEW2_PDF_TOOLBAR_ITEMS_PRINT: COREWEBVIEW2_PDF_TOOLBAR_ITEMS =
        COREWEBVIEW2_PDF_TOOLBAR_ITEMS(2u32);
    pub const COREWEBVIEW2_PDF_TOOLBAR_ITEMS_ROTATE: COREWEBVIEW2_PDF_TOOLBAR_ITEMS =
        COREWEBVIEW2_PDF_TOOLBAR_ITEMS(32u32);
    pub const COREWEBVIEW2_PDF_TOOLBAR_ITEMS_SAVE: COREWEBVIEW2_PDF_TOOLBAR_ITEMS =
        COREWEBVIEW2_PDF_TOOLBAR_ITEMS(1u32);
    pub const COREWEBVIEW2_PDF_TOOLBAR_ITEMS_SAVE_AS: COREWEBVIEW2_PDF_TOOLBAR_ITEMS =
        COREWEBVIEW2_PDF_TOOLBAR_ITEMS(4u32);
    pub const COREWEBVIEW2_PDF_TOOLBAR_ITEMS_SEARCH: COREWEBVIEW2_PDF_TOOLBAR_ITEMS =
        COREWEBVIEW2_PDF_TOOLBAR_ITEMS(1024u32);
    pub const COREWEBVIEW2_PDF_TOOLBAR_ITEMS_ZOOM_IN: COREWEBVIEW2_PDF_TOOLBAR_ITEMS =
        COREWEBVIEW2_PDF_TOOLBAR_ITEMS(8u32);
    pub const COREWEBVIEW2_PDF_TOOLBAR_ITEMS_ZOOM_OUT: COREWEBVIEW2_PDF_TOOLBAR_ITEMS =
        COREWEBVIEW2_PDF_TOOLBAR_ITEMS(16u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_PERMISSION_KIND(pub u32);
    pub const COREWEBVIEW2_PERMISSION_KIND_AUTOPLAY: COREWEBVIEW2_PERMISSION_KIND =
        COREWEBVIEW2_PERMISSION_KIND(9u32);
    pub const COREWEBVIEW2_PERMISSION_KIND_CAMERA: COREWEBVIEW2_PERMISSION_KIND =
        COREWEBVIEW2_PERMISSION_KIND(2u32);
    pub const COREWEBVIEW2_PERMISSION_KIND_CLIPBOARD_READ: COREWEBVIEW2_PERMISSION_KIND =
        COREWEBVIEW2_PERMISSION_KIND(6u32);
    pub const COREWEBVIEW2_PERMISSION_KIND_FILE_READ_WRITE: COREWEBVIEW2_PERMISSION_KIND =
        COREWEBVIEW2_PERMISSION_KIND(8u32);
    pub const COREWEBVIEW2_PERMISSION_KIND_GEOLOCATION: COREWEBVIEW2_PERMISSION_KIND =
        COREWEBVIEW2_PERMISSION_KIND(3u32);
    pub const COREWEBVIEW2_PERMISSION_KIND_LOCAL_FONTS: COREWEBVIEW2_PERMISSION_KIND =
        COREWEBVIEW2_PERMISSION_KIND(10u32);
    pub const COREWEBVIEW2_PERMISSION_KIND_MICROPHONE: COREWEBVIEW2_PERMISSION_KIND =
        COREWEBVIEW2_PERMISSION_KIND(1u32);
    pub const COREWEBVIEW2_PERMISSION_KIND_MIDI_SYSTEM_EXCLUSIVE_MESSAGES:
        COREWEBVIEW2_PERMISSION_KIND = COREWEBVIEW2_PERMISSION_KIND(11u32);
    pub const COREWEBVIEW2_PERMISSION_KIND_MULTIPLE_AUTOMATIC_DOWNLOADS:
        COREWEBVIEW2_PERMISSION_KIND = COREWEBVIEW2_PERMISSION_KIND(7u32);
    pub const COREWEBVIEW2_PERMISSION_KIND_NOTIFICATIONS: COREWEBVIEW2_PERMISSION_KIND =
        COREWEBVIEW2_PERMISSION_KIND(4u32);
    pub const COREWEBVIEW2_PERMISSION_KIND_OTHER_SENSORS: COREWEBVIEW2_PERMISSION_KIND =
        COREWEBVIEW2_PERMISSION_KIND(5u32);
    pub const COREWEBVIEW2_PERMISSION_KIND_UNKNOWN_PERMISSION: COREWEBVIEW2_PERMISSION_KIND =
        COREWEBVIEW2_PERMISSION_KIND(0u32);
    pub const COREWEBVIEW2_PERMISSION_KIND_WINDOW_MANAGEMENT: COREWEBVIEW2_PERMISSION_KIND =
        COREWEBVIEW2_PERMISSION_KIND(12u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_PERMISSION_STATE(pub u32);
    pub const COREWEBVIEW2_PERMISSION_STATE_ALLOW: COREWEBVIEW2_PERMISSION_STATE =
        COREWEBVIEW2_PERMISSION_STATE(1u32);
    pub const COREWEBVIEW2_PERMISSION_STATE_DEFAULT: COREWEBVIEW2_PERMISSION_STATE =
        COREWEBVIEW2_PERMISSION_STATE(0u32);
    pub const COREWEBVIEW2_PERMISSION_STATE_DENY: COREWEBVIEW2_PERMISSION_STATE =
        COREWEBVIEW2_PERMISSION_STATE(2u32);
    #[repr(C)]
    #[derive(Clone, Copy, Debug, Default, PartialEq)]
    pub struct COREWEBVIEW2_PHYSICAL_KEY_STATUS(pub u8);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_POINTER_EVENT_KIND(pub u32);
    pub const COREWEBVIEW2_POINTER_EVENT_KIND_ACTIVATE: COREWEBVIEW2_POINTER_EVENT_KIND =
        COREWEBVIEW2_POINTER_EVENT_KIND(587u32);
    pub const COREWEBVIEW2_POINTER_EVENT_KIND_DOWN: COREWEBVIEW2_POINTER_EVENT_KIND =
        COREWEBVIEW2_POINTER_EVENT_KIND(582u32);
    pub const COREWEBVIEW2_POINTER_EVENT_KIND_ENTER: COREWEBVIEW2_POINTER_EVENT_KIND =
        COREWEBVIEW2_POINTER_EVENT_KIND(585u32);
    pub const COREWEBVIEW2_POINTER_EVENT_KIND_LEAVE: COREWEBVIEW2_POINTER_EVENT_KIND =
        COREWEBVIEW2_POINTER_EVENT_KIND(586u32);
    pub const COREWEBVIEW2_POINTER_EVENT_KIND_UP: COREWEBVIEW2_POINTER_EVENT_KIND =
        COREWEBVIEW2_POINTER_EVENT_KIND(583u32);
    pub const COREWEBVIEW2_POINTER_EVENT_KIND_UPDATE: COREWEBVIEW2_POINTER_EVENT_KIND =
        COREWEBVIEW2_POINTER_EVENT_KIND(581u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_PREFERRED_COLOR_SCHEME(pub u32);
    pub const COREWEBVIEW2_PREFERRED_COLOR_SCHEME_AUTO: COREWEBVIEW2_PREFERRED_COLOR_SCHEME =
        COREWEBVIEW2_PREFERRED_COLOR_SCHEME(0u32);
    pub const COREWEBVIEW2_PREFERRED_COLOR_SCHEME_DARK: COREWEBVIEW2_PREFERRED_COLOR_SCHEME =
        COREWEBVIEW2_PREFERRED_COLOR_SCHEME(2u32);
    pub const COREWEBVIEW2_PREFERRED_COLOR_SCHEME_LIGHT: COREWEBVIEW2_PREFERRED_COLOR_SCHEME =
        COREWEBVIEW2_PREFERRED_COLOR_SCHEME(1u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_PRINT_COLLATION(pub u32);
    pub const COREWEBVIEW2_PRINT_COLLATION_COLLATED: COREWEBVIEW2_PRINT_COLLATION =
        COREWEBVIEW2_PRINT_COLLATION(1u32);
    pub const COREWEBVIEW2_PRINT_COLLATION_DEFAULT: COREWEBVIEW2_PRINT_COLLATION =
        COREWEBVIEW2_PRINT_COLLATION(0u32);
    pub const COREWEBVIEW2_PRINT_COLLATION_UNCOLLATED: COREWEBVIEW2_PRINT_COLLATION =
        COREWEBVIEW2_PRINT_COLLATION(2u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_PRINT_COLOR_MODE(pub u32);
    pub const COREWEBVIEW2_PRINT_COLOR_MODE_COLOR: COREWEBVIEW2_PRINT_COLOR_MODE =
        COREWEBVIEW2_PRINT_COLOR_MODE(1u32);
    pub const COREWEBVIEW2_PRINT_COLOR_MODE_DEFAULT: COREWEBVIEW2_PRINT_COLOR_MODE =
        COREWEBVIEW2_PRINT_COLOR_MODE(0u32);
    pub const COREWEBVIEW2_PRINT_COLOR_MODE_GRAYSCALE: COREWEBVIEW2_PRINT_COLOR_MODE =
        COREWEBVIEW2_PRINT_COLOR_MODE(2u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_PRINT_DIALOG_KIND(pub u32);
    pub const COREWEBVIEW2_PRINT_DIALOG_KIND_BROWSER: COREWEBVIEW2_PRINT_DIALOG_KIND =
        COREWEBVIEW2_PRINT_DIALOG_KIND(0u32);
    pub const COREWEBVIEW2_PRINT_DIALOG_KIND_SYSTEM: COREWEBVIEW2_PRINT_DIALOG_KIND =
        COREWEBVIEW2_PRINT_DIALOG_KIND(1u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_PRINT_DUPLEX(pub u32);
    pub const COREWEBVIEW2_PRINT_DUPLEX_DEFAULT: COREWEBVIEW2_PRINT_DUPLEX =
        COREWEBVIEW2_PRINT_DUPLEX(0u32);
    pub const COREWEBVIEW2_PRINT_DUPLEX_ONE_SIDED: COREWEBVIEW2_PRINT_DUPLEX =
        COREWEBVIEW2_PRINT_DUPLEX(1u32);
    pub const COREWEBVIEW2_PRINT_DUPLEX_TWO_SIDED_LONG_EDGE: COREWEBVIEW2_PRINT_DUPLEX =
        COREWEBVIEW2_PRINT_DUPLEX(2u32);
    pub const COREWEBVIEW2_PRINT_DUPLEX_TWO_SIDED_SHORT_EDGE: COREWEBVIEW2_PRINT_DUPLEX =
        COREWEBVIEW2_PRINT_DUPLEX(3u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_PRINT_MEDIA_SIZE(pub u32);
    pub const COREWEBVIEW2_PRINT_MEDIA_SIZE_CUSTOM: COREWEBVIEW2_PRINT_MEDIA_SIZE =
        COREWEBVIEW2_PRINT_MEDIA_SIZE(1u32);
    pub const COREWEBVIEW2_PRINT_MEDIA_SIZE_DEFAULT: COREWEBVIEW2_PRINT_MEDIA_SIZE =
        COREWEBVIEW2_PRINT_MEDIA_SIZE(0u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_PRINT_ORIENTATION(pub u32);
    pub const COREWEBVIEW2_PRINT_ORIENTATION_LANDSCAPE: COREWEBVIEW2_PRINT_ORIENTATION =
        COREWEBVIEW2_PRINT_ORIENTATION(1u32);
    pub const COREWEBVIEW2_PRINT_ORIENTATION_PORTRAIT: COREWEBVIEW2_PRINT_ORIENTATION =
        COREWEBVIEW2_PRINT_ORIENTATION(0u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_PRINT_STATUS(pub u32);
    pub const COREWEBVIEW2_PRINT_STATUS_OTHER_ERROR: COREWEBVIEW2_PRINT_STATUS =
        COREWEBVIEW2_PRINT_STATUS(2u32);
    pub const COREWEBVIEW2_PRINT_STATUS_PRINTER_UNAVAILABLE: COREWEBVIEW2_PRINT_STATUS =
        COREWEBVIEW2_PRINT_STATUS(1u32);
    pub const COREWEBVIEW2_PRINT_STATUS_SUCCEEDED: COREWEBVIEW2_PRINT_STATUS =
        COREWEBVIEW2_PRINT_STATUS(0u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_PROCESS_FAILED_KIND(pub u32);
    pub const COREWEBVIEW2_PROCESS_FAILED_KIND_BROWSER_PROCESS_EXITED:
        COREWEBVIEW2_PROCESS_FAILED_KIND = COREWEBVIEW2_PROCESS_FAILED_KIND(0u32);
    pub const COREWEBVIEW2_PROCESS_FAILED_KIND_FRAME_RENDER_PROCESS_EXITED:
        COREWEBVIEW2_PROCESS_FAILED_KIND = COREWEBVIEW2_PROCESS_FAILED_KIND(3u32);
    pub const COREWEBVIEW2_PROCESS_FAILED_KIND_GPU_PROCESS_EXITED:
        COREWEBVIEW2_PROCESS_FAILED_KIND = COREWEBVIEW2_PROCESS_FAILED_KIND(6u32);
    pub const COREWEBVIEW2_PROCESS_FAILED_KIND_PPAPI_BROKER_PROCESS_EXITED:
        COREWEBVIEW2_PROCESS_FAILED_KIND = COREWEBVIEW2_PROCESS_FAILED_KIND(8u32);
    pub const COREWEBVIEW2_PROCESS_FAILED_KIND_PPAPI_PLUGIN_PROCESS_EXITED:
        COREWEBVIEW2_PROCESS_FAILED_KIND = COREWEBVIEW2_PROCESS_FAILED_KIND(7u32);
    pub const COREWEBVIEW2_PROCESS_FAILED_KIND_RENDER_PROCESS_EXITED:
        COREWEBVIEW2_PROCESS_FAILED_KIND = COREWEBVIEW2_PROCESS_FAILED_KIND(1u32);
    pub const COREWEBVIEW2_PROCESS_FAILED_KIND_RENDER_PROCESS_UNRESPONSIVE:
        COREWEBVIEW2_PROCESS_FAILED_KIND = COREWEBVIEW2_PROCESS_FAILED_KIND(2u32);
    pub const COREWEBVIEW2_PROCESS_FAILED_KIND_SANDBOX_HELPER_PROCESS_EXITED:
        COREWEBVIEW2_PROCESS_FAILED_KIND = COREWEBVIEW2_PROCESS_FAILED_KIND(5u32);
    pub const COREWEBVIEW2_PROCESS_FAILED_KIND_UNKNOWN_PROCESS_EXITED:
        COREWEBVIEW2_PROCESS_FAILED_KIND = COREWEBVIEW2_PROCESS_FAILED_KIND(9u32);
    pub const COREWEBVIEW2_PROCESS_FAILED_KIND_UTILITY_PROCESS_EXITED:
        COREWEBVIEW2_PROCESS_FAILED_KIND = COREWEBVIEW2_PROCESS_FAILED_KIND(4u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_PROCESS_FAILED_REASON(pub u32);
    pub const COREWEBVIEW2_PROCESS_FAILED_REASON_CRASHED: COREWEBVIEW2_PROCESS_FAILED_REASON =
        COREWEBVIEW2_PROCESS_FAILED_REASON(3u32);
    pub const COREWEBVIEW2_PROCESS_FAILED_REASON_LAUNCH_FAILED: COREWEBVIEW2_PROCESS_FAILED_REASON =
        COREWEBVIEW2_PROCESS_FAILED_REASON(4u32);
    pub const COREWEBVIEW2_PROCESS_FAILED_REASON_OUT_OF_MEMORY: COREWEBVIEW2_PROCESS_FAILED_REASON =
        COREWEBVIEW2_PROCESS_FAILED_REASON(5u32);
    pub const COREWEBVIEW2_PROCESS_FAILED_REASON_PROFILE_DELETED:
        COREWEBVIEW2_PROCESS_FAILED_REASON = COREWEBVIEW2_PROCESS_FAILED_REASON(6u32);
    pub const COREWEBVIEW2_PROCESS_FAILED_REASON_TERMINATED: COREWEBVIEW2_PROCESS_FAILED_REASON =
        COREWEBVIEW2_PROCESS_FAILED_REASON(2u32);
    pub const COREWEBVIEW2_PROCESS_FAILED_REASON_UNEXPECTED: COREWEBVIEW2_PROCESS_FAILED_REASON =
        COREWEBVIEW2_PROCESS_FAILED_REASON(0u32);
    pub const COREWEBVIEW2_PROCESS_FAILED_REASON_UNRESPONSIVE: COREWEBVIEW2_PROCESS_FAILED_REASON =
        COREWEBVIEW2_PROCESS_FAILED_REASON(1u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_PROCESS_KIND(pub u32);
    pub const COREWEBVIEW2_PROCESS_KIND_BROWSER: COREWEBVIEW2_PROCESS_KIND =
        COREWEBVIEW2_PROCESS_KIND(0u32);
    pub const COREWEBVIEW2_PROCESS_KIND_GPU: COREWEBVIEW2_PROCESS_KIND =
        COREWEBVIEW2_PROCESS_KIND(4u32);
    pub const COREWEBVIEW2_PROCESS_KIND_PPAPI_BROKER: COREWEBVIEW2_PROCESS_KIND =
        COREWEBVIEW2_PROCESS_KIND(6u32);
    pub const COREWEBVIEW2_PROCESS_KIND_PPAPI_PLUGIN: COREWEBVIEW2_PROCESS_KIND =
        COREWEBVIEW2_PROCESS_KIND(5u32);
    pub const COREWEBVIEW2_PROCESS_KIND_RENDERER: COREWEBVIEW2_PROCESS_KIND =
        COREWEBVIEW2_PROCESS_KIND(1u32);
    pub const COREWEBVIEW2_PROCESS_KIND_SANDBOX_HELPER: COREWEBVIEW2_PROCESS_KIND =
        COREWEBVIEW2_PROCESS_KIND(3u32);
    pub const COREWEBVIEW2_PROCESS_KIND_UTILITY: COREWEBVIEW2_PROCESS_KIND =
        COREWEBVIEW2_PROCESS_KIND(2u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_RELEASE_CHANNELS(pub u32);
    pub const COREWEBVIEW2_RELEASE_CHANNELS_BETA: COREWEBVIEW2_RELEASE_CHANNELS =
        COREWEBVIEW2_RELEASE_CHANNELS(2u32);
    pub const COREWEBVIEW2_RELEASE_CHANNELS_CANARY: COREWEBVIEW2_RELEASE_CHANNELS =
        COREWEBVIEW2_RELEASE_CHANNELS(8u32);
    pub const COREWEBVIEW2_RELEASE_CHANNELS_DEV: COREWEBVIEW2_RELEASE_CHANNELS =
        COREWEBVIEW2_RELEASE_CHANNELS(4u32);
    pub const COREWEBVIEW2_RELEASE_CHANNELS_NONE: COREWEBVIEW2_RELEASE_CHANNELS =
        COREWEBVIEW2_RELEASE_CHANNELS(0u32);
    pub const COREWEBVIEW2_RELEASE_CHANNELS_STABLE: COREWEBVIEW2_RELEASE_CHANNELS =
        COREWEBVIEW2_RELEASE_CHANNELS(1u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_SAVE_AS_KIND(pub u32);
    pub const COREWEBVIEW2_SAVE_AS_KIND_COMPLETE: COREWEBVIEW2_SAVE_AS_KIND =
        COREWEBVIEW2_SAVE_AS_KIND(3u32);
    pub const COREWEBVIEW2_SAVE_AS_KIND_DEFAULT: COREWEBVIEW2_SAVE_AS_KIND =
        COREWEBVIEW2_SAVE_AS_KIND(0u32);
    pub const COREWEBVIEW2_SAVE_AS_KIND_HTML_ONLY: COREWEBVIEW2_SAVE_AS_KIND =
        COREWEBVIEW2_SAVE_AS_KIND(1u32);
    pub const COREWEBVIEW2_SAVE_AS_KIND_SINGLE_FILE: COREWEBVIEW2_SAVE_AS_KIND =
        COREWEBVIEW2_SAVE_AS_KIND(2u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_SAVE_AS_UI_RESULT(pub u32);
    pub const COREWEBVIEW2_SAVE_AS_UI_RESULT_CANCELLED: COREWEBVIEW2_SAVE_AS_UI_RESULT =
        COREWEBVIEW2_SAVE_AS_UI_RESULT(4u32);
    pub const COREWEBVIEW2_SAVE_AS_UI_RESULT_FILE_ALREADY_EXISTS: COREWEBVIEW2_SAVE_AS_UI_RESULT =
        COREWEBVIEW2_SAVE_AS_UI_RESULT(2u32);
    pub const COREWEBVIEW2_SAVE_AS_UI_RESULT_INVALID_PATH: COREWEBVIEW2_SAVE_AS_UI_RESULT =
        COREWEBVIEW2_SAVE_AS_UI_RESULT(1u32);
    pub const COREWEBVIEW2_SAVE_AS_UI_RESULT_KIND_NOT_SUPPORTED: COREWEBVIEW2_SAVE_AS_UI_RESULT =
        COREWEBVIEW2_SAVE_AS_UI_RESULT(3u32);
    pub const COREWEBVIEW2_SAVE_AS_UI_RESULT_SUCCESS: COREWEBVIEW2_SAVE_AS_UI_RESULT =
        COREWEBVIEW2_SAVE_AS_UI_RESULT(0u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_SCRIPT_DIALOG_KIND(pub u32);
    pub const COREWEBVIEW2_SCRIPT_DIALOG_KIND_ALERT: COREWEBVIEW2_SCRIPT_DIALOG_KIND =
        COREWEBVIEW2_SCRIPT_DIALOG_KIND(0u32);
    pub const COREWEBVIEW2_SCRIPT_DIALOG_KIND_BEFOREUNLOAD: COREWEBVIEW2_SCRIPT_DIALOG_KIND =
        COREWEBVIEW2_SCRIPT_DIALOG_KIND(3u32);
    pub const COREWEBVIEW2_SCRIPT_DIALOG_KIND_CONFIRM: COREWEBVIEW2_SCRIPT_DIALOG_KIND =
        COREWEBVIEW2_SCRIPT_DIALOG_KIND(1u32);
    pub const COREWEBVIEW2_SCRIPT_DIALOG_KIND_PROMPT: COREWEBVIEW2_SCRIPT_DIALOG_KIND =
        COREWEBVIEW2_SCRIPT_DIALOG_KIND(2u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_SCROLLBAR_STYLE(pub u32);
    pub const COREWEBVIEW2_SCROLLBAR_STYLE_DEFAULT: COREWEBVIEW2_SCROLLBAR_STYLE =
        COREWEBVIEW2_SCROLLBAR_STYLE(0u32);
    pub const COREWEBVIEW2_SCROLLBAR_STYLE_FLUENT_OVERLAY: COREWEBVIEW2_SCROLLBAR_STYLE =
        COREWEBVIEW2_SCROLLBAR_STYLE(1u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_SERVER_CERTIFICATE_ERROR_ACTION(pub u32);
    pub const COREWEBVIEW2_SERVER_CERTIFICATE_ERROR_ACTION_ALWAYS_ALLOW:
        COREWEBVIEW2_SERVER_CERTIFICATE_ERROR_ACTION =
        COREWEBVIEW2_SERVER_CERTIFICATE_ERROR_ACTION(0u32);
    pub const COREWEBVIEW2_SERVER_CERTIFICATE_ERROR_ACTION_CANCEL:
        COREWEBVIEW2_SERVER_CERTIFICATE_ERROR_ACTION =
        COREWEBVIEW2_SERVER_CERTIFICATE_ERROR_ACTION(1u32);
    pub const COREWEBVIEW2_SERVER_CERTIFICATE_ERROR_ACTION_DEFAULT:
        COREWEBVIEW2_SERVER_CERTIFICATE_ERROR_ACTION =
        COREWEBVIEW2_SERVER_CERTIFICATE_ERROR_ACTION(2u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_SHARED_BUFFER_ACCESS(pub u32);
    pub const COREWEBVIEW2_SHARED_BUFFER_ACCESS_READ_ONLY: COREWEBVIEW2_SHARED_BUFFER_ACCESS =
        COREWEBVIEW2_SHARED_BUFFER_ACCESS(0u32);
    pub const COREWEBVIEW2_SHARED_BUFFER_ACCESS_READ_WRITE: COREWEBVIEW2_SHARED_BUFFER_ACCESS =
        COREWEBVIEW2_SHARED_BUFFER_ACCESS(1u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_TEXT_DIRECTION_KIND(pub u32);
    pub const COREWEBVIEW2_TEXT_DIRECTION_KIND_DEFAULT: COREWEBVIEW2_TEXT_DIRECTION_KIND =
        COREWEBVIEW2_TEXT_DIRECTION_KIND(0u32);
    pub const COREWEBVIEW2_TEXT_DIRECTION_KIND_LEFT_TO_RIGHT: COREWEBVIEW2_TEXT_DIRECTION_KIND =
        COREWEBVIEW2_TEXT_DIRECTION_KIND(1u32);
    pub const COREWEBVIEW2_TEXT_DIRECTION_KIND_RIGHT_TO_LEFT: COREWEBVIEW2_TEXT_DIRECTION_KIND =
        COREWEBVIEW2_TEXT_DIRECTION_KIND(2u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_TRACKING_PREVENTION_LEVEL(pub u32);
    pub const COREWEBVIEW2_TRACKING_PREVENTION_LEVEL_BALANCED:
        COREWEBVIEW2_TRACKING_PREVENTION_LEVEL = COREWEBVIEW2_TRACKING_PREVENTION_LEVEL(2u32);
    pub const COREWEBVIEW2_TRACKING_PREVENTION_LEVEL_BASIC: COREWEBVIEW2_TRACKING_PREVENTION_LEVEL =
        COREWEBVIEW2_TRACKING_PREVENTION_LEVEL(1u32);
    pub const COREWEBVIEW2_TRACKING_PREVENTION_LEVEL_NONE: COREWEBVIEW2_TRACKING_PREVENTION_LEVEL =
        COREWEBVIEW2_TRACKING_PREVENTION_LEVEL(0u32);
    pub const COREWEBVIEW2_TRACKING_PREVENTION_LEVEL_STRICT:
        COREWEBVIEW2_TRACKING_PREVENTION_LEVEL = COREWEBVIEW2_TRACKING_PREVENTION_LEVEL(3u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_WEB_ERROR_STATUS(pub u32);
    pub const COREWEBVIEW2_WEB_ERROR_STATUS_CANNOT_CONNECT: COREWEBVIEW2_WEB_ERROR_STATUS =
        COREWEBVIEW2_WEB_ERROR_STATUS(12u32);
    pub const COREWEBVIEW2_WEB_ERROR_STATUS_CERTIFICATE_COMMON_NAME_IS_INCORRECT:
        COREWEBVIEW2_WEB_ERROR_STATUS = COREWEBVIEW2_WEB_ERROR_STATUS(1u32);
    pub const COREWEBVIEW2_WEB_ERROR_STATUS_CERTIFICATE_EXPIRED: COREWEBVIEW2_WEB_ERROR_STATUS =
        COREWEBVIEW2_WEB_ERROR_STATUS(2u32);
    pub const COREWEBVIEW2_WEB_ERROR_STATUS_CERTIFICATE_IS_INVALID: COREWEBVIEW2_WEB_ERROR_STATUS =
        COREWEBVIEW2_WEB_ERROR_STATUS(5u32);
    pub const COREWEBVIEW2_WEB_ERROR_STATUS_CERTIFICATE_REVOKED: COREWEBVIEW2_WEB_ERROR_STATUS =
        COREWEBVIEW2_WEB_ERROR_STATUS(4u32);
    pub const COREWEBVIEW2_WEB_ERROR_STATUS_CLIENT_CERTIFICATE_CONTAINS_ERRORS:
        COREWEBVIEW2_WEB_ERROR_STATUS = COREWEBVIEW2_WEB_ERROR_STATUS(3u32);
    pub const COREWEBVIEW2_WEB_ERROR_STATUS_CONNECTION_ABORTED: COREWEBVIEW2_WEB_ERROR_STATUS =
        COREWEBVIEW2_WEB_ERROR_STATUS(9u32);
    pub const COREWEBVIEW2_WEB_ERROR_STATUS_CONNECTION_RESET: COREWEBVIEW2_WEB_ERROR_STATUS =
        COREWEBVIEW2_WEB_ERROR_STATUS(10u32);
    pub const COREWEBVIEW2_WEB_ERROR_STATUS_DISCONNECTED: COREWEBVIEW2_WEB_ERROR_STATUS =
        COREWEBVIEW2_WEB_ERROR_STATUS(11u32);
    pub const COREWEBVIEW2_WEB_ERROR_STATUS_ERROR_HTTP_INVALID_SERVER_RESPONSE:
        COREWEBVIEW2_WEB_ERROR_STATUS = COREWEBVIEW2_WEB_ERROR_STATUS(8u32);
    pub const COREWEBVIEW2_WEB_ERROR_STATUS_HOST_NAME_NOT_RESOLVED: COREWEBVIEW2_WEB_ERROR_STATUS =
        COREWEBVIEW2_WEB_ERROR_STATUS(13u32);
    pub const COREWEBVIEW2_WEB_ERROR_STATUS_OPERATION_CANCELED: COREWEBVIEW2_WEB_ERROR_STATUS =
        COREWEBVIEW2_WEB_ERROR_STATUS(14u32);
    pub const COREWEBVIEW2_WEB_ERROR_STATUS_REDIRECT_FAILED: COREWEBVIEW2_WEB_ERROR_STATUS =
        COREWEBVIEW2_WEB_ERROR_STATUS(15u32);
    pub const COREWEBVIEW2_WEB_ERROR_STATUS_SERVER_UNREACHABLE: COREWEBVIEW2_WEB_ERROR_STATUS =
        COREWEBVIEW2_WEB_ERROR_STATUS(6u32);
    pub const COREWEBVIEW2_WEB_ERROR_STATUS_TIMEOUT: COREWEBVIEW2_WEB_ERROR_STATUS =
        COREWEBVIEW2_WEB_ERROR_STATUS(7u32);
    pub const COREWEBVIEW2_WEB_ERROR_STATUS_UNEXPECTED_ERROR: COREWEBVIEW2_WEB_ERROR_STATUS =
        COREWEBVIEW2_WEB_ERROR_STATUS(16u32);
    pub const COREWEBVIEW2_WEB_ERROR_STATUS_UNKNOWN: COREWEBVIEW2_WEB_ERROR_STATUS =
        COREWEBVIEW2_WEB_ERROR_STATUS(0u32);
    pub const COREWEBVIEW2_WEB_ERROR_STATUS_VALID_AUTHENTICATION_CREDENTIALS_REQUIRED:
        COREWEBVIEW2_WEB_ERROR_STATUS = COREWEBVIEW2_WEB_ERROR_STATUS(17u32);
    pub const COREWEBVIEW2_WEB_ERROR_STATUS_VALID_PROXY_AUTHENTICATION_REQUIRED:
        COREWEBVIEW2_WEB_ERROR_STATUS = COREWEBVIEW2_WEB_ERROR_STATUS(18u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_WEB_RESOURCE_CONTEXT(pub u32);
    pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_ALL: COREWEBVIEW2_WEB_RESOURCE_CONTEXT =
        COREWEBVIEW2_WEB_RESOURCE_CONTEXT(0u32);
    pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_CSP_VIOLATION_REPORT:
        COREWEBVIEW2_WEB_RESOURCE_CONTEXT = COREWEBVIEW2_WEB_RESOURCE_CONTEXT(15u32);
    pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_DOCUMENT: COREWEBVIEW2_WEB_RESOURCE_CONTEXT =
        COREWEBVIEW2_WEB_RESOURCE_CONTEXT(1u32);
    pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_EVENT_SOURCE: COREWEBVIEW2_WEB_RESOURCE_CONTEXT =
        COREWEBVIEW2_WEB_RESOURCE_CONTEXT(10u32);
    pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_FETCH: COREWEBVIEW2_WEB_RESOURCE_CONTEXT =
        COREWEBVIEW2_WEB_RESOURCE_CONTEXT(8u32);
    pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_FONT: COREWEBVIEW2_WEB_RESOURCE_CONTEXT =
        COREWEBVIEW2_WEB_RESOURCE_CONTEXT(5u32);
    pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_IMAGE: COREWEBVIEW2_WEB_RESOURCE_CONTEXT =
        COREWEBVIEW2_WEB_RESOURCE_CONTEXT(3u32);
    pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_MANIFEST: COREWEBVIEW2_WEB_RESOURCE_CONTEXT =
        COREWEBVIEW2_WEB_RESOURCE_CONTEXT(12u32);
    pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_MEDIA: COREWEBVIEW2_WEB_RESOURCE_CONTEXT =
        COREWEBVIEW2_WEB_RESOURCE_CONTEXT(4u32);
    pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_OTHER: COREWEBVIEW2_WEB_RESOURCE_CONTEXT =
        COREWEBVIEW2_WEB_RESOURCE_CONTEXT(16u32);
    pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_PING: COREWEBVIEW2_WEB_RESOURCE_CONTEXT =
        COREWEBVIEW2_WEB_RESOURCE_CONTEXT(14u32);
    pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_SCRIPT: COREWEBVIEW2_WEB_RESOURCE_CONTEXT =
        COREWEBVIEW2_WEB_RESOURCE_CONTEXT(6u32);
    pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_SIGNED_EXCHANGE: COREWEBVIEW2_WEB_RESOURCE_CONTEXT =
        COREWEBVIEW2_WEB_RESOURCE_CONTEXT(13u32);
    pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_STYLESHEET: COREWEBVIEW2_WEB_RESOURCE_CONTEXT =
        COREWEBVIEW2_WEB_RESOURCE_CONTEXT(2u32);
    pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_TEXT_TRACK: COREWEBVIEW2_WEB_RESOURCE_CONTEXT =
        COREWEBVIEW2_WEB_RESOURCE_CONTEXT(9u32);
    pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_WEBSOCKET: COREWEBVIEW2_WEB_RESOURCE_CONTEXT =
        COREWEBVIEW2_WEB_RESOURCE_CONTEXT(11u32);
    pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_XML_HTTP_REQUEST:
        COREWEBVIEW2_WEB_RESOURCE_CONTEXT = COREWEBVIEW2_WEB_RESOURCE_CONTEXT(7u32);
    #[repr(transparent)]
    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
    pub struct COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS(pub u32);
    pub const COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS_ALL:
        COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS =
        COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS(4294967295u32);
    pub const COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS_DOCUMENT:
        COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS =
        COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS(1u32);
    pub const COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS_NONE:
        COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS =
        COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS(0u32);
    pub const COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS_SERVICE_WORKER:
        COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS =
        COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS(4u32);
    pub const COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS_SHARED_WORKER:
        COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS =
        COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS(2u32);
    windows_core::imp::define_interface!(ICoreWebView2, ICoreWebView2_Vtbl);
    impl ICoreWebView2 {
        pub unsafe fn Settings<P0>(&self, settings: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Settings>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Settings)(
                    windows_core::Interface::as_raw(self),
                    settings.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Source<P0>(&self, uri: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Source)(
                    windows_core::Interface::as_raw(self),
                    uri.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Navigate<P0>(&self, uri: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Navigate)(
                    windows_core::Interface::as_raw(self),
                    uri.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn NavigateToString<P0>(&self, htmlcontent: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).NavigateToString)(
                    windows_core::Interface::as_raw(self),
                    htmlcontent.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn add_NavigationStarting<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2NavigationStartingEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_NavigationStarting)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_NavigationStarting(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_NavigationStarting)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn add_ContentLoading<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2ContentLoadingEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_ContentLoading)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_ContentLoading(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_ContentLoading)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn add_SourceChanged<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2SourceChangedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_SourceChanged)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_SourceChanged(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_SourceChanged)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn add_HistoryChanged<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2HistoryChangedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_HistoryChanged)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_HistoryChanged(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_HistoryChanged)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn add_NavigationCompleted<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2NavigationCompletedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_NavigationCompleted)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_NavigationCompleted(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_NavigationCompleted)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn add_FrameNavigationStarting<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2NavigationStartingEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_FrameNavigationStarting)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_FrameNavigationStarting(
            &self,
            token: i64,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_FrameNavigationStarting)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn add_FrameNavigationCompleted<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2NavigationCompletedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_FrameNavigationCompleted)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_FrameNavigationCompleted(
            &self,
            token: i64,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_FrameNavigationCompleted)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn add_ScriptDialogOpening<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2ScriptDialogOpeningEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_ScriptDialogOpening)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_ScriptDialogOpening(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_ScriptDialogOpening)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn add_PermissionRequested<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2PermissionRequestedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_PermissionRequested)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_PermissionRequested(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_PermissionRequested)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn add_ProcessFailed<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2ProcessFailedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_ProcessFailed)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_ProcessFailed(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_ProcessFailed)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn AddScriptToExecuteOnDocumentCreated<P0, P1>(
            &self,
            javascript: P0,
            handler: P1,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
            P1: windows_core::Param<
                ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler,
            >,
        {
            unsafe {
                (windows_core::Interface::vtable(self).AddScriptToExecuteOnDocumentCreated)(
                    windows_core::Interface::as_raw(self),
                    javascript.param().abi(),
                    handler.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn RemoveScriptToExecuteOnDocumentCreated<P0>(
            &self,
            id: P0,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).RemoveScriptToExecuteOnDocumentCreated)(
                    windows_core::Interface::as_raw(self),
                    id.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn ExecuteScript<P0, P1>(
            &self,
            javascript: P0,
            handler: P1,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
            P1: windows_core::Param<ICoreWebView2ExecuteScriptCompletedHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ExecuteScript)(
                    windows_core::Interface::as_raw(self),
                    javascript.param().abi(),
                    handler.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Reload(&self) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Reload)(windows_core::Interface::as_raw(
                    self,
                ))
                .ok()
            }
        }
        pub unsafe fn PostWebMessageAsJson<P0>(
            &self,
            webmessageasjson: P0,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).PostWebMessageAsJson)(
                    windows_core::Interface::as_raw(self),
                    webmessageasjson.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn PostWebMessageAsString<P0>(
            &self,
            webmessageasstring: P0,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).PostWebMessageAsString)(
                    windows_core::Interface::as_raw(self),
                    webmessageasstring.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn add_WebMessageReceived<P0>(
            &self,
            handler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2WebMessageReceivedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_WebMessageReceived)(
                    windows_core::Interface::as_raw(self),
                    handler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_WebMessageReceived(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_WebMessageReceived)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn CallDevToolsProtocolMethod<P0, P1, P2>(
            &self,
            methodname: P0,
            parametersasjson: P1,
            handler: P2,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
            P1: windows_core::Param<windows_core::PCWSTR>,
            P2: windows_core::Param<ICoreWebView2CallDevToolsProtocolMethodCompletedHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).CallDevToolsProtocolMethod)(
                    windows_core::Interface::as_raw(self),
                    methodname.param().abi(),
                    parametersasjson.param().abi(),
                    handler.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn BrowserProcessId(&self, value: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).BrowserProcessId)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn CanGoBack(&self, cangoback: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).CanGoBack)(
                    windows_core::Interface::as_raw(self),
                    cangoback.into(),
                )
                .ok()
            }
        }
        pub unsafe fn CanGoForward(&self, cangoforward: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).CanGoForward)(
                    windows_core::Interface::as_raw(self),
                    cangoforward.into(),
                )
                .ok()
            }
        }
        pub unsafe fn GoBack(&self) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).GoBack)(windows_core::Interface::as_raw(
                    self,
                ))
                .ok()
            }
        }
        pub unsafe fn GoForward(&self) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).GoForward)(windows_core::Interface::as_raw(
                    self,
                ))
                .ok()
            }
        }
        pub unsafe fn GetDevToolsProtocolEventReceiver<P0, P1>(
            &self,
            eventname: P0,
            receiver: P1,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
            P1: windows_core::Param<ICoreWebView2DevToolsProtocolEventReceiver>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetDevToolsProtocolEventReceiver)(
                    windows_core::Interface::as_raw(self),
                    eventname.param().abi(),
                    receiver.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Stop(&self) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Stop)(windows_core::Interface::as_raw(self))
                    .ok()
            }
        }
        pub unsafe fn add_NewWindowRequested<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2NewWindowRequestedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_NewWindowRequested)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_NewWindowRequested(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_NewWindowRequested)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn add_DocumentTitleChanged<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2DocumentTitleChangedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_DocumentTitleChanged)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_DocumentTitleChanged(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_DocumentTitleChanged)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn DocumentTitle<P0>(&self, title: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).DocumentTitle)(
                    windows_core::Interface::as_raw(self),
                    title.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn RemoveHostObjectFromScript<P0>(&self, name: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).RemoveHostObjectFromScript)(
                    windows_core::Interface::as_raw(self),
                    name.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn OpenDevToolsWindow(&self) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).OpenDevToolsWindow)(
                    windows_core::Interface::as_raw(self),
                )
                .ok()
            }
        }
        pub unsafe fn add_ContainsFullScreenElementChanged<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2ContainsFullScreenElementChangedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_ContainsFullScreenElementChanged)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_ContainsFullScreenElementChanged(
            &self,
            token: i64,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_ContainsFullScreenElementChanged)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn ContainsFullScreenElement(
            &self,
            containsfullscreenelement: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ContainsFullScreenElement)(
                    windows_core::Interface::as_raw(self),
                    containsfullscreenelement.into(),
                )
                .ok()
            }
        }
        pub unsafe fn add_WebResourceRequested<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2WebResourceRequestedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_WebResourceRequested)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_WebResourceRequested(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_WebResourceRequested)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn AddWebResourceRequestedFilter<P0>(
            &self,
            uri: P0,
            resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).AddWebResourceRequestedFilter)(
                    windows_core::Interface::as_raw(self),
                    uri.param().abi(),
                    resourcecontext,
                )
                .ok()
            }
        }
        pub unsafe fn RemoveWebResourceRequestedFilter<P0>(
            &self,
            uri: P0,
            resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).RemoveWebResourceRequestedFilter)(
                    windows_core::Interface::as_raw(self),
                    uri.param().abi(),
                    resourcecontext,
                )
                .ok()
            }
        }
        pub unsafe fn add_WindowCloseRequested<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2WindowCloseRequestedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_WindowCloseRequested)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_WindowCloseRequested(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_WindowCloseRequested)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2_Vtbl {
        pub Settings: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Source: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub Navigate: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub NavigateToString: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub add_NavigationStarting: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_NavigationStarting:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub add_ContentLoading: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_ContentLoading:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub add_SourceChanged: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_SourceChanged:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub add_HistoryChanged: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_HistoryChanged:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub add_NavigationCompleted: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_NavigationCompleted:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub add_FrameNavigationStarting: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        )
            -> windows_core::HRESULT,
        pub remove_FrameNavigationStarting:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub add_FrameNavigationCompleted: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        )
            -> windows_core::HRESULT,
        pub remove_FrameNavigationCompleted:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub add_ScriptDialogOpening: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_ScriptDialogOpening:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub add_PermissionRequested: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_PermissionRequested:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub add_ProcessFailed: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_ProcessFailed:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub AddScriptToExecuteOnDocumentCreated: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            *mut core::ffi::c_void,
        )
            -> windows_core::HRESULT,
        pub RemoveScriptToExecuteOnDocumentCreated:
            unsafe extern "system" fn(
                *mut core::ffi::c_void,
                windows_core::PCWSTR,
            ) -> windows_core::HRESULT,
        pub ExecuteScript: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        CapturePreview: usize,
        pub Reload: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub PostWebMessageAsJson: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub PostWebMessageAsString: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub add_WebMessageReceived: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_WebMessageReceived:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub CallDevToolsProtocolMethod: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            windows_core::PCWSTR,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub BrowserProcessId:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub CanGoBack: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub CanGoForward: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub GoBack: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub GoForward: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub GetDevToolsProtocolEventReceiver: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            *mut core::ffi::c_void,
        )
            -> windows_core::HRESULT,
        pub Stop: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub add_NewWindowRequested: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_NewWindowRequested:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub add_DocumentTitleChanged: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_DocumentTitleChanged:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub DocumentTitle: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        AddHostObjectToScript: usize,
        pub RemoveHostObjectFromScript: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub OpenDevToolsWindow:
            unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub add_ContainsFullScreenElementChanged:
            unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::ffi::c_void,
                i64,
            ) -> windows_core::HRESULT,
        pub remove_ContainsFullScreenElementChanged:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub ContainsFullScreenElement: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub add_WebResourceRequested: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_WebResourceRequested:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub AddWebResourceRequestedFilter: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
        )
            -> windows_core::HRESULT,
        pub RemoveWebResourceRequestedFilter: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
        )
            -> windows_core::HRESULT,
        pub add_WindowCloseRequested: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_WindowCloseRequested:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2_Impl {
        fn Settings(
            &self,
            settings: windows_core::Ref<'_, ICoreWebView2Settings>,
        ) -> windows_core::Result<()>;
        fn Source(&self, uri: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn Navigate(&self, uri: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn NavigateToString(&self, htmlcontent: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn add_NavigationStarting(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2NavigationStartingEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_NavigationStarting(&self, token: i64) -> windows_core::Result<()>;
        fn add_ContentLoading(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2ContentLoadingEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_ContentLoading(&self, token: i64) -> windows_core::Result<()>;
        fn add_SourceChanged(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2SourceChangedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_SourceChanged(&self, token: i64) -> windows_core::Result<()>;
        fn add_HistoryChanged(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2HistoryChangedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_HistoryChanged(&self, token: i64) -> windows_core::Result<()>;
        fn add_NavigationCompleted(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2NavigationCompletedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_NavigationCompleted(&self, token: i64) -> windows_core::Result<()>;
        fn add_FrameNavigationStarting(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2NavigationStartingEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_FrameNavigationStarting(&self, token: i64) -> windows_core::Result<()>;
        fn add_FrameNavigationCompleted(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2NavigationCompletedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_FrameNavigationCompleted(&self, token: i64) -> windows_core::Result<()>;
        fn add_ScriptDialogOpening(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2ScriptDialogOpeningEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_ScriptDialogOpening(&self, token: i64) -> windows_core::Result<()>;
        fn add_PermissionRequested(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2PermissionRequestedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_PermissionRequested(&self, token: i64) -> windows_core::Result<()>;
        fn add_ProcessFailed(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2ProcessFailedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_ProcessFailed(&self, token: i64) -> windows_core::Result<()>;
        fn AddScriptToExecuteOnDocumentCreated(
            &self,
            javascript: &windows_core::PCWSTR,
            handler: windows_core::Ref<
                '_,
                ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler,
            >,
        ) -> windows_core::Result<()>;
        fn RemoveScriptToExecuteOnDocumentCreated(
            &self,
            id: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
        fn ExecuteScript(
            &self,
            javascript: &windows_core::PCWSTR,
            handler: windows_core::Ref<'_, ICoreWebView2ExecuteScriptCompletedHandler>,
        ) -> windows_core::Result<()>;
        fn Reload(&self) -> windows_core::Result<()>;
        fn PostWebMessageAsJson(
            &self,
            webmessageasjson: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
        fn PostWebMessageAsString(
            &self,
            webmessageasstring: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
        fn add_WebMessageReceived(
            &self,
            handler: windows_core::Ref<'_, ICoreWebView2WebMessageReceivedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_WebMessageReceived(&self, token: i64) -> windows_core::Result<()>;
        fn CallDevToolsProtocolMethod(
            &self,
            methodname: &windows_core::PCWSTR,
            parametersasjson: &windows_core::PCWSTR,
            handler: windows_core::Ref<'_, ICoreWebView2CallDevToolsProtocolMethodCompletedHandler>,
        ) -> windows_core::Result<()>;
        fn BrowserProcessId(&self, value: u32) -> windows_core::Result<()>;
        fn CanGoBack(&self, cangoback: windows_core::BOOL) -> windows_core::Result<()>;
        fn CanGoForward(&self, cangoforward: windows_core::BOOL) -> windows_core::Result<()>;
        fn GoBack(&self) -> windows_core::Result<()>;
        fn GoForward(&self) -> windows_core::Result<()>;
        fn GetDevToolsProtocolEventReceiver(
            &self,
            eventname: &windows_core::PCWSTR,
            receiver: windows_core::Ref<'_, ICoreWebView2DevToolsProtocolEventReceiver>,
        ) -> windows_core::Result<()>;
        fn Stop(&self) -> windows_core::Result<()>;
        fn add_NewWindowRequested(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2NewWindowRequestedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_NewWindowRequested(&self, token: i64) -> windows_core::Result<()>;
        fn add_DocumentTitleChanged(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2DocumentTitleChangedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_DocumentTitleChanged(&self, token: i64) -> windows_core::Result<()>;
        fn DocumentTitle(&self, title: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn RemoveHostObjectFromScript(
            &self,
            name: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
        fn OpenDevToolsWindow(&self) -> windows_core::Result<()>;
        fn add_ContainsFullScreenElementChanged(
            &self,
            eventhandler: windows_core::Ref<
                '_,
                ICoreWebView2ContainsFullScreenElementChangedEventHandler,
            >,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_ContainsFullScreenElementChanged(&self, token: i64) -> windows_core::Result<()>;
        fn ContainsFullScreenElement(
            &self,
            containsfullscreenelement: windows_core::BOOL,
        ) -> windows_core::Result<()>;
        fn add_WebResourceRequested(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2WebResourceRequestedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_WebResourceRequested(&self, token: i64) -> windows_core::Result<()>;
        fn AddWebResourceRequestedFilter(
            &self,
            uri: &windows_core::PCWSTR,
            resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
        ) -> windows_core::Result<()>;
        fn RemoveWebResourceRequestedFilter(
            &self,
            uri: &windows_core::PCWSTR,
            resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
        ) -> windows_core::Result<()>;
        fn add_WindowCloseRequested(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2WindowCloseRequestedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_WindowCloseRequested(&self, token: i64) -> windows_core::Result<()>;
    }
    impl ICoreWebView2_Vtbl {
        pub const fn new<Identity: ICoreWebView2_Impl>() -> Self {
            unsafe extern "system" fn Settings<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                settings: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::Settings(this, core::mem::transmute_copy(&settings)).into()
                }
            }
            unsafe extern "system" fn Source<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                uri: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::Source(this, core::mem::transmute(&uri)).into()
                }
            }
            unsafe extern "system" fn Navigate<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                uri: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::Navigate(this, core::mem::transmute(&uri)).into()
                }
            }
            unsafe extern "system" fn NavigateToString<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                htmlcontent: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::NavigateToString(this, core::mem::transmute(&htmlcontent))
                        .into()
                }
            }
            unsafe extern "system" fn add_NavigationStarting<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::add_NavigationStarting(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_NavigationStarting<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::remove_NavigationStarting(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn add_ContentLoading<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::add_ContentLoading(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_ContentLoading<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::remove_ContentLoading(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn add_SourceChanged<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::add_SourceChanged(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_SourceChanged<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::remove_SourceChanged(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn add_HistoryChanged<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::add_HistoryChanged(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_HistoryChanged<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::remove_HistoryChanged(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn add_NavigationCompleted<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::add_NavigationCompleted(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_NavigationCompleted<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::remove_NavigationCompleted(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn add_FrameNavigationStarting<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::add_FrameNavigationStarting(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_FrameNavigationStarting<
                Identity: ICoreWebView2_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::remove_FrameNavigationStarting(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn add_FrameNavigationCompleted<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::add_FrameNavigationCompleted(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_FrameNavigationCompleted<
                Identity: ICoreWebView2_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::remove_FrameNavigationCompleted(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn add_ScriptDialogOpening<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::add_ScriptDialogOpening(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_ScriptDialogOpening<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::remove_ScriptDialogOpening(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn add_PermissionRequested<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::add_PermissionRequested(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_PermissionRequested<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::remove_PermissionRequested(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn add_ProcessFailed<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::add_ProcessFailed(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_ProcessFailed<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::remove_ProcessFailed(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn AddScriptToExecuteOnDocumentCreated<
                Identity: ICoreWebView2_Impl,
            >(
                this: *mut core::ffi::c_void,
                javascript: windows_core::PCWSTR,
                handler: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::AddScriptToExecuteOnDocumentCreated(
                        this,
                        core::mem::transmute(&javascript),
                        core::mem::transmute_copy(&handler),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn RemoveScriptToExecuteOnDocumentCreated<
                Identity: ICoreWebView2_Impl,
            >(
                this: *mut core::ffi::c_void,
                id: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::RemoveScriptToExecuteOnDocumentCreated(
                        this,
                        core::mem::transmute(&id),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ExecuteScript<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                javascript: windows_core::PCWSTR,
                handler: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::ExecuteScript(
                        this,
                        core::mem::transmute(&javascript),
                        core::mem::transmute_copy(&handler),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Reload<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::Reload(this).into()
                }
            }
            unsafe extern "system" fn PostWebMessageAsJson<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                webmessageasjson: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::PostWebMessageAsJson(
                        this,
                        core::mem::transmute(&webmessageasjson),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PostWebMessageAsString<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                webmessageasstring: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::PostWebMessageAsString(
                        this,
                        core::mem::transmute(&webmessageasstring),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn add_WebMessageReceived<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                handler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::add_WebMessageReceived(
                        this,
                        core::mem::transmute_copy(&handler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_WebMessageReceived<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::remove_WebMessageReceived(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn CallDevToolsProtocolMethod<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                methodname: windows_core::PCWSTR,
                parametersasjson: windows_core::PCWSTR,
                handler: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::CallDevToolsProtocolMethod(
                        this,
                        core::mem::transmute(&methodname),
                        core::mem::transmute(&parametersasjson),
                        core::mem::transmute_copy(&handler),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn BrowserProcessId<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                value: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::BrowserProcessId(this, core::mem::transmute_copy(&value))
                        .into()
                }
            }
            unsafe extern "system" fn CanGoBack<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                cangoback: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::CanGoBack(this, core::mem::transmute_copy(&cangoback))
                        .into()
                }
            }
            unsafe extern "system" fn CanGoForward<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                cangoforward: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::CanGoForward(this, core::mem::transmute_copy(&cangoforward))
                        .into()
                }
            }
            unsafe extern "system" fn GoBack<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::GoBack(this).into()
                }
            }
            unsafe extern "system" fn GoForward<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::GoForward(this).into()
                }
            }
            unsafe extern "system" fn GetDevToolsProtocolEventReceiver<
                Identity: ICoreWebView2_Impl,
            >(
                this: *mut core::ffi::c_void,
                eventname: windows_core::PCWSTR,
                receiver: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::GetDevToolsProtocolEventReceiver(
                        this,
                        core::mem::transmute(&eventname),
                        core::mem::transmute_copy(&receiver),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Stop<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::Stop(this).into()
                }
            }
            unsafe extern "system" fn add_NewWindowRequested<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::add_NewWindowRequested(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_NewWindowRequested<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::remove_NewWindowRequested(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn add_DocumentTitleChanged<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::add_DocumentTitleChanged(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_DocumentTitleChanged<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::remove_DocumentTitleChanged(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn DocumentTitle<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                title: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::DocumentTitle(this, core::mem::transmute(&title)).into()
                }
            }
            unsafe extern "system" fn RemoveHostObjectFromScript<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                name: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::RemoveHostObjectFromScript(
                        this,
                        core::mem::transmute(&name),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn OpenDevToolsWindow<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::OpenDevToolsWindow(this).into()
                }
            }
            unsafe extern "system" fn add_ContainsFullScreenElementChanged<
                Identity: ICoreWebView2_Impl,
            >(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::add_ContainsFullScreenElementChanged(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_ContainsFullScreenElementChanged<
                Identity: ICoreWebView2_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::remove_ContainsFullScreenElementChanged(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ContainsFullScreenElement<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                containsfullscreenelement: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::ContainsFullScreenElement(
                        this,
                        core::mem::transmute_copy(&containsfullscreenelement),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn add_WebResourceRequested<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::add_WebResourceRequested(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_WebResourceRequested<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::remove_WebResourceRequested(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn AddWebResourceRequestedFilter<
                Identity: ICoreWebView2_Impl,
            >(
                this: *mut core::ffi::c_void,
                uri: windows_core::PCWSTR,
                resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::AddWebResourceRequestedFilter(
                        this,
                        core::mem::transmute(&uri),
                        core::mem::transmute_copy(&resourcecontext),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn RemoveWebResourceRequestedFilter<
                Identity: ICoreWebView2_Impl,
            >(
                this: *mut core::ffi::c_void,
                uri: windows_core::PCWSTR,
                resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::RemoveWebResourceRequestedFilter(
                        this,
                        core::mem::transmute(&uri),
                        core::mem::transmute_copy(&resourcecontext),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn add_WindowCloseRequested<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::add_WindowCloseRequested(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_WindowCloseRequested<Identity: ICoreWebView2_Impl>(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_Impl::remove_WindowCloseRequested(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            Self {
                Settings: Settings::<Identity>,
                Source: Source::<Identity>,
                Navigate: Navigate::<Identity>,
                NavigateToString: NavigateToString::<Identity>,
                add_NavigationStarting: add_NavigationStarting::<Identity>,
                remove_NavigationStarting: remove_NavigationStarting::<Identity>,
                add_ContentLoading: add_ContentLoading::<Identity>,
                remove_ContentLoading: remove_ContentLoading::<Identity>,
                add_SourceChanged: add_SourceChanged::<Identity>,
                remove_SourceChanged: remove_SourceChanged::<Identity>,
                add_HistoryChanged: add_HistoryChanged::<Identity>,
                remove_HistoryChanged: remove_HistoryChanged::<Identity>,
                add_NavigationCompleted: add_NavigationCompleted::<Identity>,
                remove_NavigationCompleted: remove_NavigationCompleted::<Identity>,
                add_FrameNavigationStarting: add_FrameNavigationStarting::<Identity>,
                remove_FrameNavigationStarting: remove_FrameNavigationStarting::<Identity>,
                add_FrameNavigationCompleted: add_FrameNavigationCompleted::<Identity>,
                remove_FrameNavigationCompleted: remove_FrameNavigationCompleted::<Identity>,
                add_ScriptDialogOpening: add_ScriptDialogOpening::<Identity>,
                remove_ScriptDialogOpening: remove_ScriptDialogOpening::<Identity>,
                add_PermissionRequested: add_PermissionRequested::<Identity>,
                remove_PermissionRequested: remove_PermissionRequested::<Identity>,
                add_ProcessFailed: add_ProcessFailed::<Identity>,
                remove_ProcessFailed: remove_ProcessFailed::<Identity>,
                AddScriptToExecuteOnDocumentCreated: AddScriptToExecuteOnDocumentCreated::<Identity>,
                RemoveScriptToExecuteOnDocumentCreated: RemoveScriptToExecuteOnDocumentCreated::<
                    Identity,
                >,
                ExecuteScript: ExecuteScript::<Identity>,
                CapturePreview: 0,
                Reload: Reload::<Identity>,
                PostWebMessageAsJson: PostWebMessageAsJson::<Identity>,
                PostWebMessageAsString: PostWebMessageAsString::<Identity>,
                add_WebMessageReceived: add_WebMessageReceived::<Identity>,
                remove_WebMessageReceived: remove_WebMessageReceived::<Identity>,
                CallDevToolsProtocolMethod: CallDevToolsProtocolMethod::<Identity>,
                BrowserProcessId: BrowserProcessId::<Identity>,
                CanGoBack: CanGoBack::<Identity>,
                CanGoForward: CanGoForward::<Identity>,
                GoBack: GoBack::<Identity>,
                GoForward: GoForward::<Identity>,
                GetDevToolsProtocolEventReceiver: GetDevToolsProtocolEventReceiver::<Identity>,
                Stop: Stop::<Identity>,
                add_NewWindowRequested: add_NewWindowRequested::<Identity>,
                remove_NewWindowRequested: remove_NewWindowRequested::<Identity>,
                add_DocumentTitleChanged: add_DocumentTitleChanged::<Identity>,
                remove_DocumentTitleChanged: remove_DocumentTitleChanged::<Identity>,
                DocumentTitle: DocumentTitle::<Identity>,
                AddHostObjectToScript: 0,
                RemoveHostObjectFromScript: RemoveHostObjectFromScript::<Identity>,
                OpenDevToolsWindow: OpenDevToolsWindow::<Identity>,
                add_ContainsFullScreenElementChanged: add_ContainsFullScreenElementChanged::<
                    Identity,
                >,
                remove_ContainsFullScreenElementChanged: remove_ContainsFullScreenElementChanged::<
                    Identity,
                >,
                ContainsFullScreenElement: ContainsFullScreenElement::<Identity>,
                add_WebResourceRequested: add_WebResourceRequested::<Identity>,
                remove_WebResourceRequested: remove_WebResourceRequested::<Identity>,
                AddWebResourceRequestedFilter: AddWebResourceRequestedFilter::<Identity>,
                RemoveWebResourceRequestedFilter: RemoveWebResourceRequestedFilter::<Identity>,
                add_WindowCloseRequested: add_WindowCloseRequested::<Identity>,
                remove_WindowCloseRequested: remove_WindowCloseRequested::<Identity>,
            }
        }
    }
    struct ICoreWebView2_ImplVtbl<T: ICoreWebView2_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2_Impl> ICoreWebView2_ImplVtbl<T> {
        const VTABLE: ICoreWebView2_Vtbl = ICoreWebView2_Vtbl::new::<T>();
    }
    impl ICoreWebView2 {
        pub fn new<'a, T: ICoreWebView2_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2AcceleratorKeyPressedEventArgs,
        ICoreWebView2AcceleratorKeyPressedEventArgs_Vtbl
    );
    impl ICoreWebView2AcceleratorKeyPressedEventArgs {
        pub unsafe fn KeyEventKind(
            &self,
            keyeventkind: COREWEBVIEW2_KEY_EVENT_KIND,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).KeyEventKind)(
                    windows_core::Interface::as_raw(self),
                    keyeventkind,
                )
                .ok()
            }
        }
        pub unsafe fn VirtualKey(&self, virtualkey: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).VirtualKey)(
                    windows_core::Interface::as_raw(self),
                    virtualkey,
                )
                .ok()
            }
        }
        pub unsafe fn KeyEventLParam(&self, lparam: i32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).KeyEventLParam)(
                    windows_core::Interface::as_raw(self),
                    lparam,
                )
                .ok()
            }
        }
        pub unsafe fn PhysicalKeyStatus(
            &self,
            physicalkeystatus: COREWEBVIEW2_PHYSICAL_KEY_STATUS,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PhysicalKeyStatus)(
                    windows_core::Interface::as_raw(self),
                    core::mem::transmute(physicalkeystatus),
                )
                .ok()
            }
        }
        pub unsafe fn Handled(&self, handled: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Handled)(
                    windows_core::Interface::as_raw(self),
                    handled.into(),
                )
                .ok()
            }
        }
        pub unsafe fn Handled2(&self, handled: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Handled2)(
                    windows_core::Interface::as_raw(self),
                    handled.into(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2AcceleratorKeyPressedEventArgs_Vtbl {
        pub KeyEventKind: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_KEY_EVENT_KIND,
        ) -> windows_core::HRESULT,
        pub VirtualKey:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub KeyEventLParam:
            unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
        pub PhysicalKeyStatus: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_PHYSICAL_KEY_STATUS,
        ) -> windows_core::HRESULT,
        pub Handled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub Handled2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2AcceleratorKeyPressedEventArgs_Impl {
        fn KeyEventKind(
            &self,
            keyeventkind: COREWEBVIEW2_KEY_EVENT_KIND,
        ) -> windows_core::Result<()>;
        fn VirtualKey(&self, virtualkey: u32) -> windows_core::Result<()>;
        fn KeyEventLParam(&self, lparam: i32) -> windows_core::Result<()>;
        fn PhysicalKeyStatus(
            &self,
            physicalkeystatus: &COREWEBVIEW2_PHYSICAL_KEY_STATUS,
        ) -> windows_core::Result<()>;
        fn Handled(&self, handled: windows_core::BOOL) -> windows_core::Result<()>;
        fn Handled2(&self, handled: windows_core::BOOL) -> windows_core::Result<()>;
    }
    impl ICoreWebView2AcceleratorKeyPressedEventArgs_Vtbl {
        pub const fn new<Identity: ICoreWebView2AcceleratorKeyPressedEventArgs_Impl>() -> Self {
            unsafe extern "system" fn KeyEventKind<
                Identity: ICoreWebView2AcceleratorKeyPressedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                keyeventkind: COREWEBVIEW2_KEY_EVENT_KIND,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2AcceleratorKeyPressedEventArgs_Impl::KeyEventKind(
                        this,
                        core::mem::transmute_copy(&keyeventkind),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn VirtualKey<
                Identity: ICoreWebView2AcceleratorKeyPressedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                virtualkey: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2AcceleratorKeyPressedEventArgs_Impl::VirtualKey(
                        this,
                        core::mem::transmute_copy(&virtualkey),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn KeyEventLParam<
                Identity: ICoreWebView2AcceleratorKeyPressedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                lparam: i32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2AcceleratorKeyPressedEventArgs_Impl::KeyEventLParam(
                        this,
                        core::mem::transmute_copy(&lparam),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PhysicalKeyStatus<
                Identity: ICoreWebView2AcceleratorKeyPressedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                physicalkeystatus: COREWEBVIEW2_PHYSICAL_KEY_STATUS,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2AcceleratorKeyPressedEventArgs_Impl::PhysicalKeyStatus(
                        this,
                        core::mem::transmute(&physicalkeystatus),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Handled<
                Identity: ICoreWebView2AcceleratorKeyPressedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                handled: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2AcceleratorKeyPressedEventArgs_Impl::Handled(
                        this,
                        core::mem::transmute_copy(&handled),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Handled2<
                Identity: ICoreWebView2AcceleratorKeyPressedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                handled: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2AcceleratorKeyPressedEventArgs_Impl::Handled2(
                        this,
                        core::mem::transmute_copy(&handled),
                    )
                    .into()
                }
            }
            Self {
                KeyEventKind: KeyEventKind::<Identity>,
                VirtualKey: VirtualKey::<Identity>,
                KeyEventLParam: KeyEventLParam::<Identity>,
                PhysicalKeyStatus: PhysicalKeyStatus::<Identity>,
                Handled: Handled::<Identity>,
                Handled2: Handled2::<Identity>,
            }
        }
    }
    struct ICoreWebView2AcceleratorKeyPressedEventArgs_ImplVtbl<
        T: ICoreWebView2AcceleratorKeyPressedEventArgs_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2AcceleratorKeyPressedEventArgs_Impl>
        ICoreWebView2AcceleratorKeyPressedEventArgs_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2AcceleratorKeyPressedEventArgs_Vtbl =
            ICoreWebView2AcceleratorKeyPressedEventArgs_Vtbl::new::<T>();
    }
    impl ICoreWebView2AcceleratorKeyPressedEventArgs {
        pub fn new<'a, T: ICoreWebView2AcceleratorKeyPressedEventArgs_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2AcceleratorKeyPressedEventArgs_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2AcceleratorKeyPressedEventArgs2,
        ICoreWebView2AcceleratorKeyPressedEventArgs2_Vtbl
    );
    impl ICoreWebView2AcceleratorKeyPressedEventArgs2 {
        pub unsafe fn IsBrowserAcceleratorKeyEnabled(
            &self,
            value: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsBrowserAcceleratorKeyEnabled)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsBrowserAcceleratorKeyEnabled2(
            &self,
            value: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsBrowserAcceleratorKeyEnabled2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2AcceleratorKeyPressedEventArgs2_Vtbl {
        pub IsBrowserAcceleratorKeyEnabled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        )
            -> windows_core::HRESULT,
        pub IsBrowserAcceleratorKeyEnabled2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        )
            -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2AcceleratorKeyPressedEventArgs2_Impl {
        fn IsBrowserAcceleratorKeyEnabled(
            &self,
            value: windows_core::BOOL,
        ) -> windows_core::Result<()>;
        fn IsBrowserAcceleratorKeyEnabled2(
            &self,
            value: windows_core::BOOL,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2AcceleratorKeyPressedEventArgs2_Vtbl {
        pub const fn new<Identity: ICoreWebView2AcceleratorKeyPressedEventArgs2_Impl>() -> Self {
            unsafe extern "system" fn IsBrowserAcceleratorKeyEnabled<
                Identity: ICoreWebView2AcceleratorKeyPressedEventArgs2_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2AcceleratorKeyPressedEventArgs2_Impl:: IsBrowserAcceleratorKeyEnabled ( this , core::mem::transmute_copy ( & value ) , ) . into ( )
                }
            }
            unsafe extern "system" fn IsBrowserAcceleratorKeyEnabled2<
                Identity: ICoreWebView2AcceleratorKeyPressedEventArgs2_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2AcceleratorKeyPressedEventArgs2_Impl:: IsBrowserAcceleratorKeyEnabled2 ( this , core::mem::transmute_copy ( & value ) , ) . into ( )
                }
            }
            Self {
                IsBrowserAcceleratorKeyEnabled: IsBrowserAcceleratorKeyEnabled::<Identity>,
                IsBrowserAcceleratorKeyEnabled2: IsBrowserAcceleratorKeyEnabled2::<Identity>,
            }
        }
    }
    struct ICoreWebView2AcceleratorKeyPressedEventArgs2_ImplVtbl<
        T: ICoreWebView2AcceleratorKeyPressedEventArgs2_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2AcceleratorKeyPressedEventArgs2_Impl>
        ICoreWebView2AcceleratorKeyPressedEventArgs2_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2AcceleratorKeyPressedEventArgs2_Vtbl =
            ICoreWebView2AcceleratorKeyPressedEventArgs2_Vtbl::new::<T>();
    }
    impl ICoreWebView2AcceleratorKeyPressedEventArgs2 {
        pub fn new<'a, T: ICoreWebView2AcceleratorKeyPressedEventArgs2_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2AcceleratorKeyPressedEventArgs2_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2AcceleratorKeyPressedEventHandler,
        ICoreWebView2AcceleratorKeyPressedEventHandler_Vtbl
    );
    impl ICoreWebView2AcceleratorKeyPressedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Controller>,
            P1: windows_core::Param<ICoreWebView2AcceleratorKeyPressedEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2AcceleratorKeyPressedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2AcceleratorKeyPressedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2Controller>,
            args: windows_core::Ref<'_, ICoreWebView2AcceleratorKeyPressedEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2AcceleratorKeyPressedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2AcceleratorKeyPressedEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2AcceleratorKeyPressedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2AcceleratorKeyPressedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2AcceleratorKeyPressedEventHandler_ImplVtbl<
        T: ICoreWebView2AcceleratorKeyPressedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2AcceleratorKeyPressedEventHandler_Impl>
        ICoreWebView2AcceleratorKeyPressedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2AcceleratorKeyPressedEventHandler_Vtbl =
            ICoreWebView2AcceleratorKeyPressedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2AcceleratorKeyPressedEventHandler {
        pub fn new<'a, T: ICoreWebView2AcceleratorKeyPressedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2AcceleratorKeyPressedEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler,
        ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler_Vtbl
    );
    impl ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler {
        pub unsafe fn Invoke<P1>(
            &self,
            errorcode: windows_core::HRESULT,
            result: P1,
        ) -> windows_core::Result<()>
        where
            P1: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    errorcode,
                    result.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::HRESULT,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler_Impl {
        fn Invoke(
            &self,
            errorcode: windows_core::HRESULT,
            result: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler_Vtbl {
        pub const fn new<
            Identity: ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler_Impl,
        >() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                errorcode: windows_core::HRESULT,
                result: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&errorcode),
                        core::mem::transmute(&result),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler_ImplVtbl<
        T: ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler_Impl>
        ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler_Vtbl =
            ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler {
        pub fn new<'a, T: ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler_ImplVtbl::<
                    T,
                >::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2BasicAuthenticationRequestedEventArgs,
        ICoreWebView2BasicAuthenticationRequestedEventArgs_Vtbl
    );
    impl ICoreWebView2BasicAuthenticationRequestedEventArgs {
        pub unsafe fn Uri<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Uri)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Challenge<P0>(&self, challenge: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Challenge)(
                    windows_core::Interface::as_raw(self),
                    challenge.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Response<P0>(&self, response: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2BasicAuthenticationResponse>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Response)(
                    windows_core::Interface::as_raw(self),
                    response.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Cancel(&self, cancel: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Cancel)(
                    windows_core::Interface::as_raw(self),
                    cancel.into(),
                )
                .ok()
            }
        }
        pub unsafe fn Cancel2(&self, cancel: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Cancel2)(
                    windows_core::Interface::as_raw(self),
                    cancel.into(),
                )
                .ok()
            }
        }
        pub unsafe fn GetDeferral<P0>(&self, deferral: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Deferral>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetDeferral)(
                    windows_core::Interface::as_raw(self),
                    deferral.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2BasicAuthenticationRequestedEventArgs_Vtbl {
        pub Uri: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub Challenge: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub Response: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Cancel: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub Cancel2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub GetDeferral: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2BasicAuthenticationRequestedEventArgs_Impl {
        fn Uri(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn Challenge(&self, challenge: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn Response(
            &self,
            response: windows_core::Ref<'_, ICoreWebView2BasicAuthenticationResponse>,
        ) -> windows_core::Result<()>;
        fn Cancel(&self, cancel: windows_core::BOOL) -> windows_core::Result<()>;
        fn Cancel2(&self, cancel: windows_core::BOOL) -> windows_core::Result<()>;
        fn GetDeferral(
            &self,
            deferral: windows_core::Ref<'_, ICoreWebView2Deferral>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2BasicAuthenticationRequestedEventArgs_Vtbl {
        pub const fn new<Identity: ICoreWebView2BasicAuthenticationRequestedEventArgs_Impl>() -> Self
        {
            unsafe extern "system" fn Uri<
                Identity: ICoreWebView2BasicAuthenticationRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2BasicAuthenticationRequestedEventArgs_Impl::Uri(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Challenge<
                Identity: ICoreWebView2BasicAuthenticationRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                challenge: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2BasicAuthenticationRequestedEventArgs_Impl::Challenge(
                        this,
                        core::mem::transmute(&challenge),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Response<
                Identity: ICoreWebView2BasicAuthenticationRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                response: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2BasicAuthenticationRequestedEventArgs_Impl::Response(
                        this,
                        core::mem::transmute_copy(&response),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Cancel<
                Identity: ICoreWebView2BasicAuthenticationRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                cancel: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2BasicAuthenticationRequestedEventArgs_Impl::Cancel(
                        this,
                        core::mem::transmute_copy(&cancel),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Cancel2<
                Identity: ICoreWebView2BasicAuthenticationRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                cancel: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2BasicAuthenticationRequestedEventArgs_Impl::Cancel2(
                        this,
                        core::mem::transmute_copy(&cancel),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn GetDeferral<
                Identity: ICoreWebView2BasicAuthenticationRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                deferral: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2BasicAuthenticationRequestedEventArgs_Impl::GetDeferral(
                        this,
                        core::mem::transmute_copy(&deferral),
                    )
                    .into()
                }
            }
            Self {
                Uri: Uri::<Identity>,
                Challenge: Challenge::<Identity>,
                Response: Response::<Identity>,
                Cancel: Cancel::<Identity>,
                Cancel2: Cancel2::<Identity>,
                GetDeferral: GetDeferral::<Identity>,
            }
        }
    }
    struct ICoreWebView2BasicAuthenticationRequestedEventArgs_ImplVtbl<
        T: ICoreWebView2BasicAuthenticationRequestedEventArgs_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2BasicAuthenticationRequestedEventArgs_Impl>
        ICoreWebView2BasicAuthenticationRequestedEventArgs_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2BasicAuthenticationRequestedEventArgs_Vtbl =
            ICoreWebView2BasicAuthenticationRequestedEventArgs_Vtbl::new::<T>();
    }
    impl ICoreWebView2BasicAuthenticationRequestedEventArgs {
        pub fn new<'a, T: ICoreWebView2BasicAuthenticationRequestedEventArgs_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2BasicAuthenticationRequestedEventArgs_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2BasicAuthenticationRequestedEventHandler,
        ICoreWebView2BasicAuthenticationRequestedEventHandler_Vtbl
    );
    impl ICoreWebView2BasicAuthenticationRequestedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
            P1: windows_core::Param<ICoreWebView2BasicAuthenticationRequestedEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2BasicAuthenticationRequestedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2BasicAuthenticationRequestedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2>,
            args: windows_core::Ref<'_, ICoreWebView2BasicAuthenticationRequestedEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2BasicAuthenticationRequestedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2BasicAuthenticationRequestedEventHandler_Impl>(
        ) -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2BasicAuthenticationRequestedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2BasicAuthenticationRequestedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2BasicAuthenticationRequestedEventHandler_ImplVtbl<
        T: ICoreWebView2BasicAuthenticationRequestedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2BasicAuthenticationRequestedEventHandler_Impl>
        ICoreWebView2BasicAuthenticationRequestedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2BasicAuthenticationRequestedEventHandler_Vtbl =
            ICoreWebView2BasicAuthenticationRequestedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2BasicAuthenticationRequestedEventHandler {
        pub fn new<'a, T: ICoreWebView2BasicAuthenticationRequestedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2BasicAuthenticationRequestedEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2BasicAuthenticationResponse,
        ICoreWebView2BasicAuthenticationResponse_Vtbl
    );
    impl ICoreWebView2BasicAuthenticationResponse {
        pub unsafe fn UserName<P0>(&self, username: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).UserName)(
                    windows_core::Interface::as_raw(self),
                    username.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn UserName2<P0>(&self, username: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).UserName2)(
                    windows_core::Interface::as_raw(self),
                    username.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Password<P0>(&self, password: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Password)(
                    windows_core::Interface::as_raw(self),
                    password.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Password2<P0>(&self, password: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Password2)(
                    windows_core::Interface::as_raw(self),
                    password.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2BasicAuthenticationResponse_Vtbl {
        pub UserName: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub UserName2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub Password: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub Password2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2BasicAuthenticationResponse_Impl {
        fn UserName(&self, username: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn UserName2(&self, username: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn Password(&self, password: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn Password2(&self, password: &windows_core::PCWSTR) -> windows_core::Result<()>;
    }
    impl ICoreWebView2BasicAuthenticationResponse_Vtbl {
        pub const fn new<Identity: ICoreWebView2BasicAuthenticationResponse_Impl>() -> Self {
            unsafe extern "system" fn UserName<
                Identity: ICoreWebView2BasicAuthenticationResponse_Impl,
            >(
                this: *mut core::ffi::c_void,
                username: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2BasicAuthenticationResponse_Impl::UserName(
                        this,
                        core::mem::transmute(&username),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn UserName2<
                Identity: ICoreWebView2BasicAuthenticationResponse_Impl,
            >(
                this: *mut core::ffi::c_void,
                username: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2BasicAuthenticationResponse_Impl::UserName2(
                        this,
                        core::mem::transmute(&username),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Password<
                Identity: ICoreWebView2BasicAuthenticationResponse_Impl,
            >(
                this: *mut core::ffi::c_void,
                password: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2BasicAuthenticationResponse_Impl::Password(
                        this,
                        core::mem::transmute(&password),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Password2<
                Identity: ICoreWebView2BasicAuthenticationResponse_Impl,
            >(
                this: *mut core::ffi::c_void,
                password: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2BasicAuthenticationResponse_Impl::Password2(
                        this,
                        core::mem::transmute(&password),
                    )
                    .into()
                }
            }
            Self {
                UserName: UserName::<Identity>,
                UserName2: UserName2::<Identity>,
                Password: Password::<Identity>,
                Password2: Password2::<Identity>,
            }
        }
    }
    struct ICoreWebView2BasicAuthenticationResponse_ImplVtbl<
        T: ICoreWebView2BasicAuthenticationResponse_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2BasicAuthenticationResponse_Impl>
        ICoreWebView2BasicAuthenticationResponse_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2BasicAuthenticationResponse_Vtbl =
            ICoreWebView2BasicAuthenticationResponse_Vtbl::new::<T>();
    }
    impl ICoreWebView2BasicAuthenticationResponse {
        pub fn new<'a, T: ICoreWebView2BasicAuthenticationResponse_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2BasicAuthenticationResponse_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2BrowserExtension,
        ICoreWebView2BrowserExtension_Vtbl
    );
    impl ICoreWebView2BrowserExtension {
        pub unsafe fn Id<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Id)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Name<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Name)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Remove<P0>(&self, handler: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2BrowserExtensionRemoveCompletedHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Remove)(
                    windows_core::Interface::as_raw(self),
                    handler.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn IsEnabled(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsEnabled)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn Enable<P1>(&self, isenabled: bool, handler: P1) -> windows_core::Result<()>
        where
            P1: windows_core::Param<ICoreWebView2BrowserExtensionEnableCompletedHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Enable)(
                    windows_core::Interface::as_raw(self),
                    isenabled.into(),
                    handler.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2BrowserExtension_Vtbl {
        pub Id: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub Name: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub Remove: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub IsEnabled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub Enable: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2BrowserExtension_Impl {
        fn Id(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn Name(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn Remove(
            &self,
            handler: windows_core::Ref<'_, ICoreWebView2BrowserExtensionRemoveCompletedHandler>,
        ) -> windows_core::Result<()>;
        fn IsEnabled(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn Enable(
            &self,
            isenabled: windows_core::BOOL,
            handler: windows_core::Ref<'_, ICoreWebView2BrowserExtensionEnableCompletedHandler>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2BrowserExtension_Vtbl {
        pub const fn new<Identity: ICoreWebView2BrowserExtension_Impl>() -> Self {
            unsafe extern "system" fn Id<Identity: ICoreWebView2BrowserExtension_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2BrowserExtension_Impl::Id(this, core::mem::transmute(&value))
                        .into()
                }
            }
            unsafe extern "system" fn Name<Identity: ICoreWebView2BrowserExtension_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2BrowserExtension_Impl::Name(this, core::mem::transmute(&value))
                        .into()
                }
            }
            unsafe extern "system" fn Remove<Identity: ICoreWebView2BrowserExtension_Impl>(
                this: *mut core::ffi::c_void,
                handler: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2BrowserExtension_Impl::Remove(
                        this,
                        core::mem::transmute_copy(&handler),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsEnabled<Identity: ICoreWebView2BrowserExtension_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2BrowserExtension_Impl::IsEnabled(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Enable<Identity: ICoreWebView2BrowserExtension_Impl>(
                this: *mut core::ffi::c_void,
                isenabled: windows_core::BOOL,
                handler: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2BrowserExtension_Impl::Enable(
                        this,
                        core::mem::transmute_copy(&isenabled),
                        core::mem::transmute_copy(&handler),
                    )
                    .into()
                }
            }
            Self {
                Id: Id::<Identity>,
                Name: Name::<Identity>,
                Remove: Remove::<Identity>,
                IsEnabled: IsEnabled::<Identity>,
                Enable: Enable::<Identity>,
            }
        }
    }
    struct ICoreWebView2BrowserExtension_ImplVtbl<T: ICoreWebView2BrowserExtension_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2BrowserExtension_Impl> ICoreWebView2BrowserExtension_ImplVtbl<T> {
        const VTABLE: ICoreWebView2BrowserExtension_Vtbl =
            ICoreWebView2BrowserExtension_Vtbl::new::<T>();
    }
    impl ICoreWebView2BrowserExtension {
        pub fn new<'a, T: ICoreWebView2BrowserExtension_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2BrowserExtension_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2BrowserExtensionEnableCompletedHandler,
        ICoreWebView2BrowserExtensionEnableCompletedHandler_Vtbl
    );
    impl ICoreWebView2BrowserExtensionEnableCompletedHandler {
        pub unsafe fn Invoke(&self, errorcode: windows_core::HRESULT) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    errorcode,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2BrowserExtensionEnableCompletedHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::HRESULT,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2BrowserExtensionEnableCompletedHandler_Impl {
        fn Invoke(&self, errorcode: windows_core::HRESULT) -> windows_core::Result<()>;
    }
    impl ICoreWebView2BrowserExtensionEnableCompletedHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2BrowserExtensionEnableCompletedHandler_Impl>(
        ) -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2BrowserExtensionEnableCompletedHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                errorcode: windows_core::HRESULT,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2BrowserExtensionEnableCompletedHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&errorcode),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2BrowserExtensionEnableCompletedHandler_ImplVtbl<
        T: ICoreWebView2BrowserExtensionEnableCompletedHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2BrowserExtensionEnableCompletedHandler_Impl>
        ICoreWebView2BrowserExtensionEnableCompletedHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2BrowserExtensionEnableCompletedHandler_Vtbl =
            ICoreWebView2BrowserExtensionEnableCompletedHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2BrowserExtensionEnableCompletedHandler {
        pub fn new<'a, T: ICoreWebView2BrowserExtensionEnableCompletedHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2BrowserExtensionEnableCompletedHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2BrowserExtensionList,
        ICoreWebView2BrowserExtensionList_Vtbl
    );
    impl ICoreWebView2BrowserExtensionList {
        pub unsafe fn Count(&self, value: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Count)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn GetValueAtIndex<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
        where
            P1: windows_core::Param<ICoreWebView2BrowserExtension>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetValueAtIndex)(
                    windows_core::Interface::as_raw(self),
                    index,
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2BrowserExtensionList_Vtbl {
        pub Count: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub GetValueAtIndex: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2BrowserExtensionList_Impl {
        fn Count(&self, value: u32) -> windows_core::Result<()>;
        fn GetValueAtIndex(
            &self,
            index: u32,
            value: windows_core::Ref<'_, ICoreWebView2BrowserExtension>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2BrowserExtensionList_Vtbl {
        pub const fn new<Identity: ICoreWebView2BrowserExtensionList_Impl>() -> Self {
            unsafe extern "system" fn Count<Identity: ICoreWebView2BrowserExtensionList_Impl>(
                this: *mut core::ffi::c_void,
                value: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2BrowserExtensionList_Impl::Count(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn GetValueAtIndex<
                Identity: ICoreWebView2BrowserExtensionList_Impl,
            >(
                this: *mut core::ffi::c_void,
                index: u32,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2BrowserExtensionList_Impl::GetValueAtIndex(
                        this,
                        core::mem::transmute_copy(&index),
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                Count: Count::<Identity>,
                GetValueAtIndex: GetValueAtIndex::<Identity>,
            }
        }
    }
    struct ICoreWebView2BrowserExtensionList_ImplVtbl<T: ICoreWebView2BrowserExtensionList_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2BrowserExtensionList_Impl> ICoreWebView2BrowserExtensionList_ImplVtbl<T> {
        const VTABLE: ICoreWebView2BrowserExtensionList_Vtbl =
            ICoreWebView2BrowserExtensionList_Vtbl::new::<T>();
    }
    impl ICoreWebView2BrowserExtensionList {
        pub fn new<'a, T: ICoreWebView2BrowserExtensionList_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2BrowserExtensionList_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2BrowserExtensionRemoveCompletedHandler,
        ICoreWebView2BrowserExtensionRemoveCompletedHandler_Vtbl
    );
    impl ICoreWebView2BrowserExtensionRemoveCompletedHandler {
        pub unsafe fn Invoke(&self, errorcode: windows_core::HRESULT) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    errorcode,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2BrowserExtensionRemoveCompletedHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::HRESULT,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2BrowserExtensionRemoveCompletedHandler_Impl {
        fn Invoke(&self, errorcode: windows_core::HRESULT) -> windows_core::Result<()>;
    }
    impl ICoreWebView2BrowserExtensionRemoveCompletedHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2BrowserExtensionRemoveCompletedHandler_Impl>(
        ) -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2BrowserExtensionRemoveCompletedHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                errorcode: windows_core::HRESULT,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2BrowserExtensionRemoveCompletedHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&errorcode),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2BrowserExtensionRemoveCompletedHandler_ImplVtbl<
        T: ICoreWebView2BrowserExtensionRemoveCompletedHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2BrowserExtensionRemoveCompletedHandler_Impl>
        ICoreWebView2BrowserExtensionRemoveCompletedHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2BrowserExtensionRemoveCompletedHandler_Vtbl =
            ICoreWebView2BrowserExtensionRemoveCompletedHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2BrowserExtensionRemoveCompletedHandler {
        pub fn new<'a, T: ICoreWebView2BrowserExtensionRemoveCompletedHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2BrowserExtensionRemoveCompletedHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2BrowserProcessExitedEventArgs,
        ICoreWebView2BrowserProcessExitedEventArgs_Vtbl
    );
    impl ICoreWebView2BrowserProcessExitedEventArgs {
        pub unsafe fn BrowserProcessExitKind(
            &self,
            value: COREWEBVIEW2_BROWSER_PROCESS_EXIT_KIND,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).BrowserProcessExitKind)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn BrowserProcessId(&self, value: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).BrowserProcessId)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2BrowserProcessExitedEventArgs_Vtbl {
        pub BrowserProcessExitKind: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_BROWSER_PROCESS_EXIT_KIND,
        ) -> windows_core::HRESULT,
        pub BrowserProcessId:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2BrowserProcessExitedEventArgs_Impl {
        fn BrowserProcessExitKind(
            &self,
            value: COREWEBVIEW2_BROWSER_PROCESS_EXIT_KIND,
        ) -> windows_core::Result<()>;
        fn BrowserProcessId(&self, value: u32) -> windows_core::Result<()>;
    }
    impl ICoreWebView2BrowserProcessExitedEventArgs_Vtbl {
        pub const fn new<Identity: ICoreWebView2BrowserProcessExitedEventArgs_Impl>() -> Self {
            unsafe extern "system" fn BrowserProcessExitKind<
                Identity: ICoreWebView2BrowserProcessExitedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_BROWSER_PROCESS_EXIT_KIND,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2BrowserProcessExitedEventArgs_Impl::BrowserProcessExitKind(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn BrowserProcessId<
                Identity: ICoreWebView2BrowserProcessExitedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2BrowserProcessExitedEventArgs_Impl::BrowserProcessId(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                BrowserProcessExitKind: BrowserProcessExitKind::<Identity>,
                BrowserProcessId: BrowserProcessId::<Identity>,
            }
        }
    }
    struct ICoreWebView2BrowserProcessExitedEventArgs_ImplVtbl<
        T: ICoreWebView2BrowserProcessExitedEventArgs_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2BrowserProcessExitedEventArgs_Impl>
        ICoreWebView2BrowserProcessExitedEventArgs_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2BrowserProcessExitedEventArgs_Vtbl =
            ICoreWebView2BrowserProcessExitedEventArgs_Vtbl::new::<T>();
    }
    impl ICoreWebView2BrowserProcessExitedEventArgs {
        pub fn new<'a, T: ICoreWebView2BrowserProcessExitedEventArgs_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2BrowserProcessExitedEventArgs_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2BrowserProcessExitedEventHandler,
        ICoreWebView2BrowserProcessExitedEventHandler_Vtbl
    );
    impl ICoreWebView2BrowserProcessExitedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Environment>,
            P1: windows_core::Param<ICoreWebView2BrowserProcessExitedEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2BrowserProcessExitedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2BrowserProcessExitedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2Environment>,
            args: windows_core::Ref<'_, ICoreWebView2BrowserProcessExitedEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2BrowserProcessExitedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2BrowserProcessExitedEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2BrowserProcessExitedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2BrowserProcessExitedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2BrowserProcessExitedEventHandler_ImplVtbl<
        T: ICoreWebView2BrowserProcessExitedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2BrowserProcessExitedEventHandler_Impl>
        ICoreWebView2BrowserProcessExitedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2BrowserProcessExitedEventHandler_Vtbl =
            ICoreWebView2BrowserProcessExitedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2BrowserProcessExitedEventHandler {
        pub fn new<'a, T: ICoreWebView2BrowserProcessExitedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2BrowserProcessExitedEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2BytesReceivedChangedEventHandler,
        ICoreWebView2BytesReceivedChangedEventHandler_Vtbl
    );
    impl ICoreWebView2BytesReceivedChangedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2DownloadOperation>,
            P1: windows_core::Param<windows_core::IUnknown>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2BytesReceivedChangedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2BytesReceivedChangedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2DownloadOperation>,
            args: windows_core::Ref<'_, windows_core::IUnknown>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2BytesReceivedChangedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2BytesReceivedChangedEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2BytesReceivedChangedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2BytesReceivedChangedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2BytesReceivedChangedEventHandler_ImplVtbl<
        T: ICoreWebView2BytesReceivedChangedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2BytesReceivedChangedEventHandler_Impl>
        ICoreWebView2BytesReceivedChangedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2BytesReceivedChangedEventHandler_Vtbl =
            ICoreWebView2BytesReceivedChangedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2BytesReceivedChangedEventHandler {
        pub fn new<'a, T: ICoreWebView2BytesReceivedChangedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2BytesReceivedChangedEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2CallDevToolsProtocolMethodCompletedHandler,
        ICoreWebView2CallDevToolsProtocolMethodCompletedHandler_Vtbl
    );
    impl ICoreWebView2CallDevToolsProtocolMethodCompletedHandler {
        pub unsafe fn Invoke<P1>(
            &self,
            errorcode: windows_core::HRESULT,
            result: P1,
        ) -> windows_core::Result<()>
        where
            P1: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    errorcode,
                    result.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2CallDevToolsProtocolMethodCompletedHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::HRESULT,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2CallDevToolsProtocolMethodCompletedHandler_Impl {
        fn Invoke(
            &self,
            errorcode: windows_core::HRESULT,
            result: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2CallDevToolsProtocolMethodCompletedHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2CallDevToolsProtocolMethodCompletedHandler_Impl>(
        ) -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2CallDevToolsProtocolMethodCompletedHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                errorcode: windows_core::HRESULT,
                result: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CallDevToolsProtocolMethodCompletedHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&errorcode),
                        core::mem::transmute(&result),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2CallDevToolsProtocolMethodCompletedHandler_ImplVtbl<
        T: ICoreWebView2CallDevToolsProtocolMethodCompletedHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2CallDevToolsProtocolMethodCompletedHandler_Impl>
        ICoreWebView2CallDevToolsProtocolMethodCompletedHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2CallDevToolsProtocolMethodCompletedHandler_Vtbl =
            ICoreWebView2CallDevToolsProtocolMethodCompletedHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2CallDevToolsProtocolMethodCompletedHandler {
        pub fn new<'a, T: ICoreWebView2CallDevToolsProtocolMethodCompletedHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable:
                    &ICoreWebView2CallDevToolsProtocolMethodCompletedHandler_ImplVtbl::<T>::VTABLE
                        as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2CapturePreviewCompletedHandler,
        ICoreWebView2CapturePreviewCompletedHandler_Vtbl
    );
    impl ICoreWebView2CapturePreviewCompletedHandler {
        pub unsafe fn Invoke(&self, errorcode: windows_core::HRESULT) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    errorcode,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2CapturePreviewCompletedHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::HRESULT,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2CapturePreviewCompletedHandler_Impl {
        fn Invoke(&self, errorcode: windows_core::HRESULT) -> windows_core::Result<()>;
    }
    impl ICoreWebView2CapturePreviewCompletedHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2CapturePreviewCompletedHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2CapturePreviewCompletedHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                errorcode: windows_core::HRESULT,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CapturePreviewCompletedHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&errorcode),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2CapturePreviewCompletedHandler_ImplVtbl<
        T: ICoreWebView2CapturePreviewCompletedHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2CapturePreviewCompletedHandler_Impl>
        ICoreWebView2CapturePreviewCompletedHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2CapturePreviewCompletedHandler_Vtbl =
            ICoreWebView2CapturePreviewCompletedHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2CapturePreviewCompletedHandler {
        pub fn new<'a, T: ICoreWebView2CapturePreviewCompletedHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2CapturePreviewCompletedHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Certificate, ICoreWebView2Certificate_Vtbl);
    impl ICoreWebView2Certificate {
        pub unsafe fn Subject<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Subject)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Issuer<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Issuer)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn ValidFrom(&self, value: f64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ValidFrom)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn ValidTo(&self, value: f64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ValidTo)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn DerEncodedSerialNumber<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).DerEncodedSerialNumber)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn DisplayName<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).DisplayName)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn ToPemEncoding<P0>(&self, pemencodeddata: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ToPemEncoding)(
                    windows_core::Interface::as_raw(self),
                    pemencodeddata.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn PemEncodedIssuerCertificateChain<P0>(
            &self,
            value: P0,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2StringCollection>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).PemEncodedIssuerCertificateChain)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Certificate_Vtbl {
        pub Subject: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub Issuer: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub ValidFrom:
            unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
        pub ValidTo:
            unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
        pub DerEncodedSerialNumber: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub DisplayName: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub ToPemEncoding: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub PemEncodedIssuerCertificateChain: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        )
            -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Certificate_Impl {
        fn Subject(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn Issuer(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn ValidFrom(&self, value: f64) -> windows_core::Result<()>;
        fn ValidTo(&self, value: f64) -> windows_core::Result<()>;
        fn DerEncodedSerialNumber(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn DisplayName(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn ToPemEncoding(&self, pemencodeddata: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn PemEncodedIssuerCertificateChain(
            &self,
            value: windows_core::Ref<'_, ICoreWebView2StringCollection>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Certificate_Vtbl {
        pub const fn new<Identity: ICoreWebView2Certificate_Impl>() -> Self {
            unsafe extern "system" fn Subject<Identity: ICoreWebView2Certificate_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Certificate_Impl::Subject(this, core::mem::transmute(&value))
                        .into()
                }
            }
            unsafe extern "system" fn Issuer<Identity: ICoreWebView2Certificate_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Certificate_Impl::Issuer(this, core::mem::transmute(&value)).into()
                }
            }
            unsafe extern "system" fn ValidFrom<Identity: ICoreWebView2Certificate_Impl>(
                this: *mut core::ffi::c_void,
                value: f64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Certificate_Impl::ValidFrom(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ValidTo<Identity: ICoreWebView2Certificate_Impl>(
                this: *mut core::ffi::c_void,
                value: f64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Certificate_Impl::ValidTo(this, core::mem::transmute_copy(&value))
                        .into()
                }
            }
            unsafe extern "system" fn DerEncodedSerialNumber<
                Identity: ICoreWebView2Certificate_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Certificate_Impl::DerEncodedSerialNumber(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn DisplayName<Identity: ICoreWebView2Certificate_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Certificate_Impl::DisplayName(this, core::mem::transmute(&value))
                        .into()
                }
            }
            unsafe extern "system" fn ToPemEncoding<Identity: ICoreWebView2Certificate_Impl>(
                this: *mut core::ffi::c_void,
                pemencodeddata: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Certificate_Impl::ToPemEncoding(
                        this,
                        core::mem::transmute(&pemencodeddata),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PemEncodedIssuerCertificateChain<
                Identity: ICoreWebView2Certificate_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Certificate_Impl::PemEncodedIssuerCertificateChain(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                Subject: Subject::<Identity>,
                Issuer: Issuer::<Identity>,
                ValidFrom: ValidFrom::<Identity>,
                ValidTo: ValidTo::<Identity>,
                DerEncodedSerialNumber: DerEncodedSerialNumber::<Identity>,
                DisplayName: DisplayName::<Identity>,
                ToPemEncoding: ToPemEncoding::<Identity>,
                PemEncodedIssuerCertificateChain: PemEncodedIssuerCertificateChain::<Identity>,
            }
        }
    }
    struct ICoreWebView2Certificate_ImplVtbl<T: ICoreWebView2Certificate_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Certificate_Impl> ICoreWebView2Certificate_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Certificate_Vtbl = ICoreWebView2Certificate_Vtbl::new::<T>();
    }
    impl ICoreWebView2Certificate {
        pub fn new<'a, T: ICoreWebView2Certificate_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Certificate_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ClearBrowsingDataCompletedHandler,
        ICoreWebView2ClearBrowsingDataCompletedHandler_Vtbl
    );
    impl ICoreWebView2ClearBrowsingDataCompletedHandler {
        pub unsafe fn Invoke(&self, errorcode: windows_core::HRESULT) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    errorcode,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ClearBrowsingDataCompletedHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::HRESULT,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ClearBrowsingDataCompletedHandler_Impl {
        fn Invoke(&self, errorcode: windows_core::HRESULT) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ClearBrowsingDataCompletedHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2ClearBrowsingDataCompletedHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2ClearBrowsingDataCompletedHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                errorcode: windows_core::HRESULT,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ClearBrowsingDataCompletedHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&errorcode),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2ClearBrowsingDataCompletedHandler_ImplVtbl<
        T: ICoreWebView2ClearBrowsingDataCompletedHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2ClearBrowsingDataCompletedHandler_Impl>
        ICoreWebView2ClearBrowsingDataCompletedHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2ClearBrowsingDataCompletedHandler_Vtbl =
            ICoreWebView2ClearBrowsingDataCompletedHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2ClearBrowsingDataCompletedHandler {
        pub fn new<'a, T: ICoreWebView2ClearBrowsingDataCompletedHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ClearBrowsingDataCompletedHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ClearServerCertificateErrorActionsCompletedHandler,
        ICoreWebView2ClearServerCertificateErrorActionsCompletedHandler_Vtbl
    );
    impl ICoreWebView2ClearServerCertificateErrorActionsCompletedHandler {
        pub unsafe fn Invoke(&self, errorcode: windows_core::HRESULT) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    errorcode,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ClearServerCertificateErrorActionsCompletedHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::HRESULT,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ClearServerCertificateErrorActionsCompletedHandler_Impl {
        fn Invoke(&self, errorcode: windows_core::HRESULT) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ClearServerCertificateErrorActionsCompletedHandler_Vtbl {
        pub const fn new<
            Identity: ICoreWebView2ClearServerCertificateErrorActionsCompletedHandler_Impl,
        >() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2ClearServerCertificateErrorActionsCompletedHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                errorcode: windows_core::HRESULT,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ClearServerCertificateErrorActionsCompletedHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&errorcode),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2ClearServerCertificateErrorActionsCompletedHandler_ImplVtbl<
        T: ICoreWebView2ClearServerCertificateErrorActionsCompletedHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2ClearServerCertificateErrorActionsCompletedHandler_Impl>
        ICoreWebView2ClearServerCertificateErrorActionsCompletedHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2ClearServerCertificateErrorActionsCompletedHandler_Vtbl =
            ICoreWebView2ClearServerCertificateErrorActionsCompletedHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2ClearServerCertificateErrorActionsCompletedHandler {
        pub fn new<'a, T: ICoreWebView2ClearServerCertificateErrorActionsCompletedHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap { vtable : & ICoreWebView2ClearServerCertificateErrorActionsCompletedHandler_ImplVtbl:: < T >::VTABLE as * const _ as * const _ , this :this as * const _ as * const _ } ;
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ClientCertificate,
        ICoreWebView2ClientCertificate_Vtbl
    );
    impl ICoreWebView2ClientCertificate {
        pub unsafe fn Subject<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Subject)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Issuer<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Issuer)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn ValidFrom(&self, value: f64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ValidFrom)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn ValidTo(&self, value: f64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ValidTo)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn DerEncodedSerialNumber<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).DerEncodedSerialNumber)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn DisplayName<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).DisplayName)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn ToPemEncoding<P0>(&self, pemencodeddata: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ToPemEncoding)(
                    windows_core::Interface::as_raw(self),
                    pemencodeddata.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn PemEncodedIssuerCertificateChain<P0>(
            &self,
            value: P0,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2StringCollection>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).PemEncodedIssuerCertificateChain)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Kind(
            &self,
            value: COREWEBVIEW2_CLIENT_CERTIFICATE_KIND,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Kind)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ClientCertificate_Vtbl {
        pub Subject: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub Issuer: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub ValidFrom:
            unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
        pub ValidTo:
            unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
        pub DerEncodedSerialNumber: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub DisplayName: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub ToPemEncoding: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub PemEncodedIssuerCertificateChain: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        )
            -> windows_core::HRESULT,
        pub Kind: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_CLIENT_CERTIFICATE_KIND,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ClientCertificate_Impl {
        fn Subject(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn Issuer(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn ValidFrom(&self, value: f64) -> windows_core::Result<()>;
        fn ValidTo(&self, value: f64) -> windows_core::Result<()>;
        fn DerEncodedSerialNumber(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn DisplayName(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn ToPemEncoding(&self, pemencodeddata: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn PemEncodedIssuerCertificateChain(
            &self,
            value: windows_core::Ref<'_, ICoreWebView2StringCollection>,
        ) -> windows_core::Result<()>;
        fn Kind(&self, value: COREWEBVIEW2_CLIENT_CERTIFICATE_KIND) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ClientCertificate_Vtbl {
        pub const fn new<Identity: ICoreWebView2ClientCertificate_Impl>() -> Self {
            unsafe extern "system" fn Subject<Identity: ICoreWebView2ClientCertificate_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ClientCertificate_Impl::Subject(this, core::mem::transmute(&value))
                        .into()
                }
            }
            unsafe extern "system" fn Issuer<Identity: ICoreWebView2ClientCertificate_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ClientCertificate_Impl::Issuer(this, core::mem::transmute(&value))
                        .into()
                }
            }
            unsafe extern "system" fn ValidFrom<Identity: ICoreWebView2ClientCertificate_Impl>(
                this: *mut core::ffi::c_void,
                value: f64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ClientCertificate_Impl::ValidFrom(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ValidTo<Identity: ICoreWebView2ClientCertificate_Impl>(
                this: *mut core::ffi::c_void,
                value: f64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ClientCertificate_Impl::ValidTo(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn DerEncodedSerialNumber<
                Identity: ICoreWebView2ClientCertificate_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ClientCertificate_Impl::DerEncodedSerialNumber(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn DisplayName<Identity: ICoreWebView2ClientCertificate_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ClientCertificate_Impl::DisplayName(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ToPemEncoding<
                Identity: ICoreWebView2ClientCertificate_Impl,
            >(
                this: *mut core::ffi::c_void,
                pemencodeddata: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ClientCertificate_Impl::ToPemEncoding(
                        this,
                        core::mem::transmute(&pemencodeddata),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PemEncodedIssuerCertificateChain<
                Identity: ICoreWebView2ClientCertificate_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ClientCertificate_Impl::PemEncodedIssuerCertificateChain(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Kind<Identity: ICoreWebView2ClientCertificate_Impl>(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_CLIENT_CERTIFICATE_KIND,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ClientCertificate_Impl::Kind(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                Subject: Subject::<Identity>,
                Issuer: Issuer::<Identity>,
                ValidFrom: ValidFrom::<Identity>,
                ValidTo: ValidTo::<Identity>,
                DerEncodedSerialNumber: DerEncodedSerialNumber::<Identity>,
                DisplayName: DisplayName::<Identity>,
                ToPemEncoding: ToPemEncoding::<Identity>,
                PemEncodedIssuerCertificateChain: PemEncodedIssuerCertificateChain::<Identity>,
                Kind: Kind::<Identity>,
            }
        }
    }
    struct ICoreWebView2ClientCertificate_ImplVtbl<T: ICoreWebView2ClientCertificate_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2ClientCertificate_Impl> ICoreWebView2ClientCertificate_ImplVtbl<T> {
        const VTABLE: ICoreWebView2ClientCertificate_Vtbl =
            ICoreWebView2ClientCertificate_Vtbl::new::<T>();
    }
    impl ICoreWebView2ClientCertificate {
        pub fn new<'a, T: ICoreWebView2ClientCertificate_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ClientCertificate_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ClientCertificateCollection,
        ICoreWebView2ClientCertificateCollection_Vtbl
    );
    impl ICoreWebView2ClientCertificateCollection {
        pub unsafe fn Count(&self, value: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Count)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn GetValueAtIndex<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
        where
            P1: windows_core::Param<ICoreWebView2ClientCertificate>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetValueAtIndex)(
                    windows_core::Interface::as_raw(self),
                    index,
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ClientCertificateCollection_Vtbl {
        pub Count: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub GetValueAtIndex: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ClientCertificateCollection_Impl {
        fn Count(&self, value: u32) -> windows_core::Result<()>;
        fn GetValueAtIndex(
            &self,
            index: u32,
            value: windows_core::Ref<'_, ICoreWebView2ClientCertificate>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ClientCertificateCollection_Vtbl {
        pub const fn new<Identity: ICoreWebView2ClientCertificateCollection_Impl>() -> Self {
            unsafe extern "system" fn Count<
                Identity: ICoreWebView2ClientCertificateCollection_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ClientCertificateCollection_Impl::Count(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn GetValueAtIndex<
                Identity: ICoreWebView2ClientCertificateCollection_Impl,
            >(
                this: *mut core::ffi::c_void,
                index: u32,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ClientCertificateCollection_Impl::GetValueAtIndex(
                        this,
                        core::mem::transmute_copy(&index),
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                Count: Count::<Identity>,
                GetValueAtIndex: GetValueAtIndex::<Identity>,
            }
        }
    }
    struct ICoreWebView2ClientCertificateCollection_ImplVtbl<
        T: ICoreWebView2ClientCertificateCollection_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2ClientCertificateCollection_Impl>
        ICoreWebView2ClientCertificateCollection_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2ClientCertificateCollection_Vtbl =
            ICoreWebView2ClientCertificateCollection_Vtbl::new::<T>();
    }
    impl ICoreWebView2ClientCertificateCollection {
        pub fn new<'a, T: ICoreWebView2ClientCertificateCollection_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ClientCertificateCollection_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ClientCertificateRequestedEventArgs,
        ICoreWebView2ClientCertificateRequestedEventArgs_Vtbl
    );
    impl ICoreWebView2ClientCertificateRequestedEventArgs {
        pub unsafe fn Host<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Host)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Port(&self, value: i32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Port)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn IsProxy(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsProxy)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn AllowedCertificateAuthorities<P0>(
            &self,
            value: P0,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2StringCollection>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).AllowedCertificateAuthorities)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn MutuallyTrustedCertificates<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2ClientCertificateCollection>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).MutuallyTrustedCertificates)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn SelectedCertificate<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2ClientCertificate>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).SelectedCertificate)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn SelectedCertificate2<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2ClientCertificate>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).SelectedCertificate2)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Cancel(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Cancel)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn Cancel2(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Cancel2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn Handled(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Handled)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn Handled2(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Handled2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn GetDeferral<P0>(&self, deferral: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Deferral>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetDeferral)(
                    windows_core::Interface::as_raw(self),
                    deferral.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ClientCertificateRequestedEventArgs_Vtbl {
        pub Host: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub Port: unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
        pub IsProxy: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub AllowedCertificateAuthorities: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        )
            -> windows_core::HRESULT,
        pub MutuallyTrustedCertificates: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        )
            -> windows_core::HRESULT,
        pub SelectedCertificate: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub SelectedCertificate2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Cancel: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub Cancel2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub Handled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub Handled2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub GetDeferral: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ClientCertificateRequestedEventArgs_Impl {
        fn Host(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn Port(&self, value: i32) -> windows_core::Result<()>;
        fn IsProxy(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn AllowedCertificateAuthorities(
            &self,
            value: windows_core::Ref<'_, ICoreWebView2StringCollection>,
        ) -> windows_core::Result<()>;
        fn MutuallyTrustedCertificates(
            &self,
            value: windows_core::Ref<'_, ICoreWebView2ClientCertificateCollection>,
        ) -> windows_core::Result<()>;
        fn SelectedCertificate(
            &self,
            value: windows_core::Ref<'_, ICoreWebView2ClientCertificate>,
        ) -> windows_core::Result<()>;
        fn SelectedCertificate2(
            &self,
            value: windows_core::Ref<'_, ICoreWebView2ClientCertificate>,
        ) -> windows_core::Result<()>;
        fn Cancel(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn Cancel2(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn Handled(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn Handled2(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn GetDeferral(
            &self,
            deferral: windows_core::Ref<'_, ICoreWebView2Deferral>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ClientCertificateRequestedEventArgs_Vtbl {
        pub const fn new<Identity: ICoreWebView2ClientCertificateRequestedEventArgs_Impl>() -> Self
        {
            unsafe extern "system" fn Host<
                Identity: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ClientCertificateRequestedEventArgs_Impl::Host(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Port<
                Identity: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: i32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ClientCertificateRequestedEventArgs_Impl::Port(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsProxy<
                Identity: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ClientCertificateRequestedEventArgs_Impl::IsProxy(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn AllowedCertificateAuthorities<
                Identity: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ClientCertificateRequestedEventArgs_Impl:: AllowedCertificateAuthorities ( this , core::mem::transmute_copy ( & value ) , ) . into ( )
                }
            }
            unsafe extern "system" fn MutuallyTrustedCertificates<
                Identity: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ClientCertificateRequestedEventArgs_Impl:: MutuallyTrustedCertificates ( this , core::mem::transmute_copy ( & value ) , ) . into ( )
                }
            }
            unsafe extern "system" fn SelectedCertificate<
                Identity: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ClientCertificateRequestedEventArgs_Impl::SelectedCertificate(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn SelectedCertificate2<
                Identity: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ClientCertificateRequestedEventArgs_Impl::SelectedCertificate2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Cancel<
                Identity: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ClientCertificateRequestedEventArgs_Impl::Cancel(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Cancel2<
                Identity: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ClientCertificateRequestedEventArgs_Impl::Cancel2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Handled<
                Identity: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ClientCertificateRequestedEventArgs_Impl::Handled(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Handled2<
                Identity: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ClientCertificateRequestedEventArgs_Impl::Handled2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn GetDeferral<
                Identity: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                deferral: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ClientCertificateRequestedEventArgs_Impl::GetDeferral(
                        this,
                        core::mem::transmute_copy(&deferral),
                    )
                    .into()
                }
            }
            Self {
                Host: Host::<Identity>,
                Port: Port::<Identity>,
                IsProxy: IsProxy::<Identity>,
                AllowedCertificateAuthorities: AllowedCertificateAuthorities::<Identity>,
                MutuallyTrustedCertificates: MutuallyTrustedCertificates::<Identity>,
                SelectedCertificate: SelectedCertificate::<Identity>,
                SelectedCertificate2: SelectedCertificate2::<Identity>,
                Cancel: Cancel::<Identity>,
                Cancel2: Cancel2::<Identity>,
                Handled: Handled::<Identity>,
                Handled2: Handled2::<Identity>,
                GetDeferral: GetDeferral::<Identity>,
            }
        }
    }
    struct ICoreWebView2ClientCertificateRequestedEventArgs_ImplVtbl<
        T: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2ClientCertificateRequestedEventArgs_Impl>
        ICoreWebView2ClientCertificateRequestedEventArgs_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2ClientCertificateRequestedEventArgs_Vtbl =
            ICoreWebView2ClientCertificateRequestedEventArgs_Vtbl::new::<T>();
    }
    impl ICoreWebView2ClientCertificateRequestedEventArgs {
        pub fn new<'a, T: ICoreWebView2ClientCertificateRequestedEventArgs_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ClientCertificateRequestedEventArgs_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ClientCertificateRequestedEventHandler,
        ICoreWebView2ClientCertificateRequestedEventHandler_Vtbl
    );
    impl ICoreWebView2ClientCertificateRequestedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
            P1: windows_core::Param<ICoreWebView2ClientCertificateRequestedEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ClientCertificateRequestedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ClientCertificateRequestedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2>,
            args: windows_core::Ref<'_, ICoreWebView2ClientCertificateRequestedEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ClientCertificateRequestedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2ClientCertificateRequestedEventHandler_Impl>(
        ) -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2ClientCertificateRequestedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ClientCertificateRequestedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2ClientCertificateRequestedEventHandler_ImplVtbl<
        T: ICoreWebView2ClientCertificateRequestedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2ClientCertificateRequestedEventHandler_Impl>
        ICoreWebView2ClientCertificateRequestedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2ClientCertificateRequestedEventHandler_Vtbl =
            ICoreWebView2ClientCertificateRequestedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2ClientCertificateRequestedEventHandler {
        pub fn new<'a, T: ICoreWebView2ClientCertificateRequestedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ClientCertificateRequestedEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2CompositionController,
        ICoreWebView2CompositionController_Vtbl
    );
    impl ICoreWebView2CompositionController {
        pub unsafe fn RootVisualTarget<P0>(&self, target: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::IUnknown>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).RootVisualTarget)(
                    windows_core::Interface::as_raw(self),
                    target.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn RootVisualTarget2<P0>(&self, target: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::IUnknown>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).RootVisualTarget2)(
                    windows_core::Interface::as_raw(self),
                    target.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn SendPointerInput<P1>(
            &self,
            eventkind: COREWEBVIEW2_POINTER_EVENT_KIND,
            pointerinfo: P1,
        ) -> windows_core::Result<()>
        where
            P1: windows_core::Param<ICoreWebView2PointerInfo>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).SendPointerInput)(
                    windows_core::Interface::as_raw(self),
                    eventkind,
                    pointerinfo.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn SystemCursorId(&self, systemcursorid: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).SystemCursorId)(
                    windows_core::Interface::as_raw(self),
                    systemcursorid,
                )
                .ok()
            }
        }
        pub unsafe fn add_CursorChanged<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2CursorChangedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_CursorChanged)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_CursorChanged(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_CursorChanged)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2CompositionController_Vtbl {
        pub RootVisualTarget: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub RootVisualTarget2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        SendMouseInput: usize,
        pub SendPointerInput: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_POINTER_EVENT_KIND,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        Cursor: usize,
        pub SystemCursorId:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub add_CursorChanged: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_CursorChanged:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2CompositionController_Impl {
        fn RootVisualTarget(
            &self,
            target: windows_core::Ref<'_, windows_core::IUnknown>,
        ) -> windows_core::Result<()>;
        fn RootVisualTarget2(
            &self,
            target: windows_core::Ref<'_, windows_core::IUnknown>,
        ) -> windows_core::Result<()>;
        fn SendPointerInput(
            &self,
            eventkind: COREWEBVIEW2_POINTER_EVENT_KIND,
            pointerinfo: windows_core::Ref<'_, ICoreWebView2PointerInfo>,
        ) -> windows_core::Result<()>;
        fn SystemCursorId(&self, systemcursorid: u32) -> windows_core::Result<()>;
        fn add_CursorChanged(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2CursorChangedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_CursorChanged(&self, token: i64) -> windows_core::Result<()>;
    }
    impl ICoreWebView2CompositionController_Vtbl {
        pub const fn new<Identity: ICoreWebView2CompositionController_Impl>() -> Self {
            unsafe extern "system" fn RootVisualTarget<
                Identity: ICoreWebView2CompositionController_Impl,
            >(
                this: *mut core::ffi::c_void,
                target: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CompositionController_Impl::RootVisualTarget(
                        this,
                        core::mem::transmute_copy(&target),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn RootVisualTarget2<
                Identity: ICoreWebView2CompositionController_Impl,
            >(
                this: *mut core::ffi::c_void,
                target: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CompositionController_Impl::RootVisualTarget2(
                        this,
                        core::mem::transmute_copy(&target),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn SendPointerInput<
                Identity: ICoreWebView2CompositionController_Impl,
            >(
                this: *mut core::ffi::c_void,
                eventkind: COREWEBVIEW2_POINTER_EVENT_KIND,
                pointerinfo: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CompositionController_Impl::SendPointerInput(
                        this,
                        core::mem::transmute_copy(&eventkind),
                        core::mem::transmute_copy(&pointerinfo),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn SystemCursorId<
                Identity: ICoreWebView2CompositionController_Impl,
            >(
                this: *mut core::ffi::c_void,
                systemcursorid: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CompositionController_Impl::SystemCursorId(
                        this,
                        core::mem::transmute_copy(&systemcursorid),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn add_CursorChanged<
                Identity: ICoreWebView2CompositionController_Impl,
            >(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CompositionController_Impl::add_CursorChanged(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_CursorChanged<
                Identity: ICoreWebView2CompositionController_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CompositionController_Impl::remove_CursorChanged(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            Self {
                RootVisualTarget: RootVisualTarget::<Identity>,
                RootVisualTarget2: RootVisualTarget2::<Identity>,
                SendMouseInput: 0,
                SendPointerInput: SendPointerInput::<Identity>,
                Cursor: 0,
                SystemCursorId: SystemCursorId::<Identity>,
                add_CursorChanged: add_CursorChanged::<Identity>,
                remove_CursorChanged: remove_CursorChanged::<Identity>,
            }
        }
    }
    struct ICoreWebView2CompositionController_ImplVtbl<T: ICoreWebView2CompositionController_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2CompositionController_Impl> ICoreWebView2CompositionController_ImplVtbl<T> {
        const VTABLE: ICoreWebView2CompositionController_Vtbl =
            ICoreWebView2CompositionController_Vtbl::new::<T>();
    }
    impl ICoreWebView2CompositionController {
        pub fn new<'a, T: ICoreWebView2CompositionController_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2CompositionController_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2CompositionController2,
        ICoreWebView2CompositionController2_Vtbl
    );
    impl ICoreWebView2CompositionController2 {
        pub unsafe fn AutomationProvider<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::IUnknown>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).AutomationProvider)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2CompositionController2_Vtbl {
        pub AutomationProvider: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2CompositionController2_Impl {
        fn AutomationProvider(
            &self,
            value: windows_core::Ref<'_, windows_core::IUnknown>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2CompositionController2_Vtbl {
        pub const fn new<Identity: ICoreWebView2CompositionController2_Impl>() -> Self {
            unsafe extern "system" fn AutomationProvider<
                Identity: ICoreWebView2CompositionController2_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CompositionController2_Impl::AutomationProvider(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                AutomationProvider: AutomationProvider::<Identity>,
            }
        }
    }
    struct ICoreWebView2CompositionController2_ImplVtbl<T: ICoreWebView2CompositionController2_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2CompositionController2_Impl> ICoreWebView2CompositionController2_ImplVtbl<T> {
        const VTABLE: ICoreWebView2CompositionController2_Vtbl =
            ICoreWebView2CompositionController2_Vtbl::new::<T>();
    }
    impl ICoreWebView2CompositionController2 {
        pub fn new<'a, T: ICoreWebView2CompositionController2_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2CompositionController2_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2CompositionController3,
        ICoreWebView2CompositionController3_Vtbl
    );
    impl ICoreWebView2CompositionController3 {
        pub unsafe fn DragLeave(&self) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).DragLeave)(windows_core::Interface::as_raw(
                    self,
                ))
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2CompositionController3_Vtbl {
        DragEnter: usize,
        pub DragLeave: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        DragOver: usize,
        Drop: usize,
    }
    pub trait ICoreWebView2CompositionController3_Impl {
        fn DragLeave(&self) -> windows_core::Result<()>;
    }
    impl ICoreWebView2CompositionController3_Vtbl {
        pub const fn new<Identity: ICoreWebView2CompositionController3_Impl>() -> Self {
            unsafe extern "system" fn DragLeave<
                Identity: ICoreWebView2CompositionController3_Impl,
            >(
                this: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CompositionController3_Impl::DragLeave(this).into()
                }
            }
            Self {
                DragEnter: 0,
                DragLeave: DragLeave::<Identity>,
                DragOver: 0,
                Drop: 0,
            }
        }
    }
    struct ICoreWebView2CompositionController3_ImplVtbl<T: ICoreWebView2CompositionController3_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2CompositionController3_Impl> ICoreWebView2CompositionController3_ImplVtbl<T> {
        const VTABLE: ICoreWebView2CompositionController3_Vtbl =
            ICoreWebView2CompositionController3_Vtbl::new::<T>();
    }
    impl ICoreWebView2CompositionController3 {
        pub fn new<'a, T: ICoreWebView2CompositionController3_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2CompositionController3_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2CompositionController4,
        ICoreWebView2CompositionController4_Vtbl
    );
    impl ICoreWebView2CompositionController4 {
        pub unsafe fn QueryNonClientRegion<P1>(
            &self,
            kind: COREWEBVIEW2_NON_CLIENT_REGION_KIND,
            rects: P1,
        ) -> windows_core::Result<()>
        where
            P1: windows_core::Param<ICoreWebView2RegionRectCollectionView>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).QueryNonClientRegion)(
                    windows_core::Interface::as_raw(self),
                    kind,
                    rects.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn add_NonClientRegionChanged<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2NonClientRegionChangedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_NonClientRegionChanged)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_NonClientRegionChanged(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_NonClientRegionChanged)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2CompositionController4_Vtbl {
        GetNonClientRegionAtPoint: usize,
        pub QueryNonClientRegion: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_NON_CLIENT_REGION_KIND,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub add_NonClientRegionChanged: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_NonClientRegionChanged:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2CompositionController4_Impl {
        fn QueryNonClientRegion(
            &self,
            kind: COREWEBVIEW2_NON_CLIENT_REGION_KIND,
            rects: windows_core::Ref<'_, ICoreWebView2RegionRectCollectionView>,
        ) -> windows_core::Result<()>;
        fn add_NonClientRegionChanged(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2NonClientRegionChangedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_NonClientRegionChanged(&self, token: i64) -> windows_core::Result<()>;
    }
    impl ICoreWebView2CompositionController4_Vtbl {
        pub const fn new<Identity: ICoreWebView2CompositionController4_Impl>() -> Self {
            unsafe extern "system" fn QueryNonClientRegion<
                Identity: ICoreWebView2CompositionController4_Impl,
            >(
                this: *mut core::ffi::c_void,
                kind: COREWEBVIEW2_NON_CLIENT_REGION_KIND,
                rects: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CompositionController4_Impl::QueryNonClientRegion(
                        this,
                        core::mem::transmute_copy(&kind),
                        core::mem::transmute_copy(&rects),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn add_NonClientRegionChanged<
                Identity: ICoreWebView2CompositionController4_Impl,
            >(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CompositionController4_Impl::add_NonClientRegionChanged(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_NonClientRegionChanged<
                Identity: ICoreWebView2CompositionController4_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CompositionController4_Impl::remove_NonClientRegionChanged(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            Self {
                GetNonClientRegionAtPoint: 0,
                QueryNonClientRegion: QueryNonClientRegion::<Identity>,
                add_NonClientRegionChanged: add_NonClientRegionChanged::<Identity>,
                remove_NonClientRegionChanged: remove_NonClientRegionChanged::<Identity>,
            }
        }
    }
    struct ICoreWebView2CompositionController4_ImplVtbl<T: ICoreWebView2CompositionController4_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2CompositionController4_Impl> ICoreWebView2CompositionController4_ImplVtbl<T> {
        const VTABLE: ICoreWebView2CompositionController4_Vtbl =
            ICoreWebView2CompositionController4_Vtbl::new::<T>();
    }
    impl ICoreWebView2CompositionController4 {
        pub fn new<'a, T: ICoreWebView2CompositionController4_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2CompositionController4_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ContainsFullScreenElementChangedEventHandler,
        ICoreWebView2ContainsFullScreenElementChangedEventHandler_Vtbl
    );
    impl ICoreWebView2ContainsFullScreenElementChangedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
            P1: windows_core::Param<windows_core::IUnknown>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ContainsFullScreenElementChangedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ContainsFullScreenElementChangedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2>,
            args: windows_core::Ref<'_, windows_core::IUnknown>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ContainsFullScreenElementChangedEventHandler_Vtbl {
        pub const fn new<
            Identity: ICoreWebView2ContainsFullScreenElementChangedEventHandler_Impl,
        >() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2ContainsFullScreenElementChangedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContainsFullScreenElementChangedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2ContainsFullScreenElementChangedEventHandler_ImplVtbl<
        T: ICoreWebView2ContainsFullScreenElementChangedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2ContainsFullScreenElementChangedEventHandler_Impl>
        ICoreWebView2ContainsFullScreenElementChangedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2ContainsFullScreenElementChangedEventHandler_Vtbl =
            ICoreWebView2ContainsFullScreenElementChangedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2ContainsFullScreenElementChangedEventHandler {
        pub fn new<'a, T: ICoreWebView2ContainsFullScreenElementChangedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable:
                    &ICoreWebView2ContainsFullScreenElementChangedEventHandler_ImplVtbl::<T>::VTABLE
                        as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ContentLoadingEventArgs,
        ICoreWebView2ContentLoadingEventArgs_Vtbl
    );
    impl ICoreWebView2ContentLoadingEventArgs {
        pub unsafe fn IsErrorPage(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsErrorPage)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn NavigationId(&self, value: u64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).NavigationId)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ContentLoadingEventArgs_Vtbl {
        pub IsErrorPage: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub NavigationId:
            unsafe extern "system" fn(*mut core::ffi::c_void, u64) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ContentLoadingEventArgs_Impl {
        fn IsErrorPage(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn NavigationId(&self, value: u64) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ContentLoadingEventArgs_Vtbl {
        pub const fn new<Identity: ICoreWebView2ContentLoadingEventArgs_Impl>() -> Self {
            unsafe extern "system" fn IsErrorPage<
                Identity: ICoreWebView2ContentLoadingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContentLoadingEventArgs_Impl::IsErrorPage(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn NavigationId<
                Identity: ICoreWebView2ContentLoadingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: u64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContentLoadingEventArgs_Impl::NavigationId(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                IsErrorPage: IsErrorPage::<Identity>,
                NavigationId: NavigationId::<Identity>,
            }
        }
    }
    struct ICoreWebView2ContentLoadingEventArgs_ImplVtbl<T: ICoreWebView2ContentLoadingEventArgs_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2ContentLoadingEventArgs_Impl>
        ICoreWebView2ContentLoadingEventArgs_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2ContentLoadingEventArgs_Vtbl =
            ICoreWebView2ContentLoadingEventArgs_Vtbl::new::<T>();
    }
    impl ICoreWebView2ContentLoadingEventArgs {
        pub fn new<'a, T: ICoreWebView2ContentLoadingEventArgs_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ContentLoadingEventArgs_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ContentLoadingEventHandler,
        ICoreWebView2ContentLoadingEventHandler_Vtbl
    );
    impl ICoreWebView2ContentLoadingEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
            P1: windows_core::Param<ICoreWebView2ContentLoadingEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ContentLoadingEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ContentLoadingEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2>,
            args: windows_core::Ref<'_, ICoreWebView2ContentLoadingEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ContentLoadingEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2ContentLoadingEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2ContentLoadingEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContentLoadingEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2ContentLoadingEventHandler_ImplVtbl<
        T: ICoreWebView2ContentLoadingEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2ContentLoadingEventHandler_Impl>
        ICoreWebView2ContentLoadingEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2ContentLoadingEventHandler_Vtbl =
            ICoreWebView2ContentLoadingEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2ContentLoadingEventHandler {
        pub fn new<'a, T: ICoreWebView2ContentLoadingEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ContentLoadingEventHandler_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ContextMenuItem,
        ICoreWebView2ContextMenuItem_Vtbl
    );
    impl ICoreWebView2ContextMenuItem {
        pub unsafe fn Name<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Name)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Label<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Label)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn CommandId(&self, value: i32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).CommandId)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn ShortcutKeyDescription<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ShortcutKeyDescription)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Kind(
            &self,
            value: COREWEBVIEW2_CONTEXT_MENU_ITEM_KIND,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Kind)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn IsEnabled(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsEnabled)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsEnabled2(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsEnabled2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsChecked(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsChecked)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsChecked2(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsChecked2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn Children<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2ContextMenuItemCollection>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Children)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn add_CustomItemSelected<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2CustomItemSelectedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_CustomItemSelected)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_CustomItemSelected(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_CustomItemSelected)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ContextMenuItem_Vtbl {
        pub Name: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub Label: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub CommandId:
            unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
        pub ShortcutKeyDescription: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        Icon: usize,
        pub Kind: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_CONTEXT_MENU_ITEM_KIND,
        ) -> windows_core::HRESULT,
        pub IsEnabled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub IsEnabled2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub IsChecked: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub IsChecked2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub Children: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub add_CustomItemSelected: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_CustomItemSelected:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ContextMenuItem_Impl {
        fn Name(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn Label(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn CommandId(&self, value: i32) -> windows_core::Result<()>;
        fn ShortcutKeyDescription(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn Kind(&self, value: COREWEBVIEW2_CONTEXT_MENU_ITEM_KIND) -> windows_core::Result<()>;
        fn IsEnabled(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn IsEnabled2(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn IsChecked(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn IsChecked2(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn Children(
            &self,
            value: windows_core::Ref<'_, ICoreWebView2ContextMenuItemCollection>,
        ) -> windows_core::Result<()>;
        fn add_CustomItemSelected(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2CustomItemSelectedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_CustomItemSelected(&self, token: i64) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ContextMenuItem_Vtbl {
        pub const fn new<Identity: ICoreWebView2ContextMenuItem_Impl>() -> Self {
            unsafe extern "system" fn Name<Identity: ICoreWebView2ContextMenuItem_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuItem_Impl::Name(this, core::mem::transmute(&value))
                        .into()
                }
            }
            unsafe extern "system" fn Label<Identity: ICoreWebView2ContextMenuItem_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuItem_Impl::Label(this, core::mem::transmute(&value))
                        .into()
                }
            }
            unsafe extern "system" fn CommandId<Identity: ICoreWebView2ContextMenuItem_Impl>(
                this: *mut core::ffi::c_void,
                value: i32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuItem_Impl::CommandId(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ShortcutKeyDescription<
                Identity: ICoreWebView2ContextMenuItem_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuItem_Impl::ShortcutKeyDescription(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Kind<Identity: ICoreWebView2ContextMenuItem_Impl>(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_CONTEXT_MENU_ITEM_KIND,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuItem_Impl::Kind(this, core::mem::transmute_copy(&value))
                        .into()
                }
            }
            unsafe extern "system" fn IsEnabled<Identity: ICoreWebView2ContextMenuItem_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuItem_Impl::IsEnabled(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsEnabled2<Identity: ICoreWebView2ContextMenuItem_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuItem_Impl::IsEnabled2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsChecked<Identity: ICoreWebView2ContextMenuItem_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuItem_Impl::IsChecked(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsChecked2<Identity: ICoreWebView2ContextMenuItem_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuItem_Impl::IsChecked2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Children<Identity: ICoreWebView2ContextMenuItem_Impl>(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuItem_Impl::Children(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn add_CustomItemSelected<
                Identity: ICoreWebView2ContextMenuItem_Impl,
            >(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuItem_Impl::add_CustomItemSelected(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_CustomItemSelected<
                Identity: ICoreWebView2ContextMenuItem_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuItem_Impl::remove_CustomItemSelected(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            Self {
                Name: Name::<Identity>,
                Label: Label::<Identity>,
                CommandId: CommandId::<Identity>,
                ShortcutKeyDescription: ShortcutKeyDescription::<Identity>,
                Icon: 0,
                Kind: Kind::<Identity>,
                IsEnabled: IsEnabled::<Identity>,
                IsEnabled2: IsEnabled2::<Identity>,
                IsChecked: IsChecked::<Identity>,
                IsChecked2: IsChecked2::<Identity>,
                Children: Children::<Identity>,
                add_CustomItemSelected: add_CustomItemSelected::<Identity>,
                remove_CustomItemSelected: remove_CustomItemSelected::<Identity>,
            }
        }
    }
    struct ICoreWebView2ContextMenuItem_ImplVtbl<T: ICoreWebView2ContextMenuItem_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2ContextMenuItem_Impl> ICoreWebView2ContextMenuItem_ImplVtbl<T> {
        const VTABLE: ICoreWebView2ContextMenuItem_Vtbl =
            ICoreWebView2ContextMenuItem_Vtbl::new::<T>();
    }
    impl ICoreWebView2ContextMenuItem {
        pub fn new<'a, T: ICoreWebView2ContextMenuItem_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ContextMenuItem_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ContextMenuItemCollection,
        ICoreWebView2ContextMenuItemCollection_Vtbl
    );
    impl ICoreWebView2ContextMenuItemCollection {
        pub unsafe fn Count(&self, value: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Count)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn GetValueAtIndex<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
        where
            P1: windows_core::Param<ICoreWebView2ContextMenuItem>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetValueAtIndex)(
                    windows_core::Interface::as_raw(self),
                    index,
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn RemoveValueAtIndex(&self, index: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).RemoveValueAtIndex)(
                    windows_core::Interface::as_raw(self),
                    index,
                )
                .ok()
            }
        }
        pub unsafe fn InsertValueAtIndex<P1>(
            &self,
            index: u32,
            value: P1,
        ) -> windows_core::Result<()>
        where
            P1: windows_core::Param<ICoreWebView2ContextMenuItem>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).InsertValueAtIndex)(
                    windows_core::Interface::as_raw(self),
                    index,
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ContextMenuItemCollection_Vtbl {
        pub Count: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub GetValueAtIndex: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub RemoveValueAtIndex:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub InsertValueAtIndex: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ContextMenuItemCollection_Impl {
        fn Count(&self, value: u32) -> windows_core::Result<()>;
        fn GetValueAtIndex(
            &self,
            index: u32,
            value: windows_core::Ref<'_, ICoreWebView2ContextMenuItem>,
        ) -> windows_core::Result<()>;
        fn RemoveValueAtIndex(&self, index: u32) -> windows_core::Result<()>;
        fn InsertValueAtIndex(
            &self,
            index: u32,
            value: windows_core::Ref<'_, ICoreWebView2ContextMenuItem>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ContextMenuItemCollection_Vtbl {
        pub const fn new<Identity: ICoreWebView2ContextMenuItemCollection_Impl>() -> Self {
            unsafe extern "system" fn Count<
                Identity: ICoreWebView2ContextMenuItemCollection_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuItemCollection_Impl::Count(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn GetValueAtIndex<
                Identity: ICoreWebView2ContextMenuItemCollection_Impl,
            >(
                this: *mut core::ffi::c_void,
                index: u32,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuItemCollection_Impl::GetValueAtIndex(
                        this,
                        core::mem::transmute_copy(&index),
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn RemoveValueAtIndex<
                Identity: ICoreWebView2ContextMenuItemCollection_Impl,
            >(
                this: *mut core::ffi::c_void,
                index: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuItemCollection_Impl::RemoveValueAtIndex(
                        this,
                        core::mem::transmute_copy(&index),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn InsertValueAtIndex<
                Identity: ICoreWebView2ContextMenuItemCollection_Impl,
            >(
                this: *mut core::ffi::c_void,
                index: u32,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuItemCollection_Impl::InsertValueAtIndex(
                        this,
                        core::mem::transmute_copy(&index),
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                Count: Count::<Identity>,
                GetValueAtIndex: GetValueAtIndex::<Identity>,
                RemoveValueAtIndex: RemoveValueAtIndex::<Identity>,
                InsertValueAtIndex: InsertValueAtIndex::<Identity>,
            }
        }
    }
    struct ICoreWebView2ContextMenuItemCollection_ImplVtbl<
        T: ICoreWebView2ContextMenuItemCollection_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2ContextMenuItemCollection_Impl>
        ICoreWebView2ContextMenuItemCollection_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2ContextMenuItemCollection_Vtbl =
            ICoreWebView2ContextMenuItemCollection_Vtbl::new::<T>();
    }
    impl ICoreWebView2ContextMenuItemCollection {
        pub fn new<'a, T: ICoreWebView2ContextMenuItemCollection_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ContextMenuItemCollection_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ContextMenuRequestedEventArgs,
        ICoreWebView2ContextMenuRequestedEventArgs_Vtbl
    );
    impl ICoreWebView2ContextMenuRequestedEventArgs {
        pub unsafe fn MenuItems<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2ContextMenuItemCollection>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).MenuItems)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn ContextMenuTarget<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2ContextMenuTarget>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ContextMenuTarget)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn SelectedCommandId(&self, value: i32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).SelectedCommandId)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn SelectedCommandId2(&self, value: i32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).SelectedCommandId2)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn Handled(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Handled)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn Handled2(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Handled2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn GetDeferral<P0>(&self, deferral: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Deferral>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetDeferral)(
                    windows_core::Interface::as_raw(self),
                    deferral.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ContextMenuRequestedEventArgs_Vtbl {
        pub MenuItems: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub ContextMenuTarget: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        Location: usize,
        pub SelectedCommandId:
            unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
        pub SelectedCommandId2:
            unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
        pub Handled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub Handled2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub GetDeferral: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ContextMenuRequestedEventArgs_Impl {
        fn MenuItems(
            &self,
            value: windows_core::Ref<'_, ICoreWebView2ContextMenuItemCollection>,
        ) -> windows_core::Result<()>;
        fn ContextMenuTarget(
            &self,
            value: windows_core::Ref<'_, ICoreWebView2ContextMenuTarget>,
        ) -> windows_core::Result<()>;
        fn SelectedCommandId(&self, value: i32) -> windows_core::Result<()>;
        fn SelectedCommandId2(&self, value: i32) -> windows_core::Result<()>;
        fn Handled(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn Handled2(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn GetDeferral(
            &self,
            deferral: windows_core::Ref<'_, ICoreWebView2Deferral>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ContextMenuRequestedEventArgs_Vtbl {
        pub const fn new<Identity: ICoreWebView2ContextMenuRequestedEventArgs_Impl>() -> Self {
            unsafe extern "system" fn MenuItems<
                Identity: ICoreWebView2ContextMenuRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuRequestedEventArgs_Impl::MenuItems(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ContextMenuTarget<
                Identity: ICoreWebView2ContextMenuRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuRequestedEventArgs_Impl::ContextMenuTarget(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn SelectedCommandId<
                Identity: ICoreWebView2ContextMenuRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: i32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuRequestedEventArgs_Impl::SelectedCommandId(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn SelectedCommandId2<
                Identity: ICoreWebView2ContextMenuRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: i32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuRequestedEventArgs_Impl::SelectedCommandId2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Handled<
                Identity: ICoreWebView2ContextMenuRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuRequestedEventArgs_Impl::Handled(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Handled2<
                Identity: ICoreWebView2ContextMenuRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuRequestedEventArgs_Impl::Handled2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn GetDeferral<
                Identity: ICoreWebView2ContextMenuRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                deferral: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuRequestedEventArgs_Impl::GetDeferral(
                        this,
                        core::mem::transmute_copy(&deferral),
                    )
                    .into()
                }
            }
            Self {
                MenuItems: MenuItems::<Identity>,
                ContextMenuTarget: ContextMenuTarget::<Identity>,
                Location: 0,
                SelectedCommandId: SelectedCommandId::<Identity>,
                SelectedCommandId2: SelectedCommandId2::<Identity>,
                Handled: Handled::<Identity>,
                Handled2: Handled2::<Identity>,
                GetDeferral: GetDeferral::<Identity>,
            }
        }
    }
    struct ICoreWebView2ContextMenuRequestedEventArgs_ImplVtbl<
        T: ICoreWebView2ContextMenuRequestedEventArgs_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2ContextMenuRequestedEventArgs_Impl>
        ICoreWebView2ContextMenuRequestedEventArgs_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2ContextMenuRequestedEventArgs_Vtbl =
            ICoreWebView2ContextMenuRequestedEventArgs_Vtbl::new::<T>();
    }
    impl ICoreWebView2ContextMenuRequestedEventArgs {
        pub fn new<'a, T: ICoreWebView2ContextMenuRequestedEventArgs_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ContextMenuRequestedEventArgs_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ContextMenuRequestedEventHandler,
        ICoreWebView2ContextMenuRequestedEventHandler_Vtbl
    );
    impl ICoreWebView2ContextMenuRequestedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
            P1: windows_core::Param<ICoreWebView2ContextMenuRequestedEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ContextMenuRequestedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ContextMenuRequestedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2>,
            args: windows_core::Ref<'_, ICoreWebView2ContextMenuRequestedEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ContextMenuRequestedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2ContextMenuRequestedEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2ContextMenuRequestedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuRequestedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2ContextMenuRequestedEventHandler_ImplVtbl<
        T: ICoreWebView2ContextMenuRequestedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2ContextMenuRequestedEventHandler_Impl>
        ICoreWebView2ContextMenuRequestedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2ContextMenuRequestedEventHandler_Vtbl =
            ICoreWebView2ContextMenuRequestedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2ContextMenuRequestedEventHandler {
        pub fn new<'a, T: ICoreWebView2ContextMenuRequestedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ContextMenuRequestedEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ContextMenuTarget,
        ICoreWebView2ContextMenuTarget_Vtbl
    );
    impl ICoreWebView2ContextMenuTarget {
        pub unsafe fn Kind(
            &self,
            value: COREWEBVIEW2_CONTEXT_MENU_TARGET_KIND,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Kind)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn IsEditable(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsEditable)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsRequestedForMainFrame(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsRequestedForMainFrame)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn PageUri<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).PageUri)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn FrameUri<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).FrameUri)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn HasLinkUri(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).HasLinkUri)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn LinkUri<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).LinkUri)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn HasLinkText(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).HasLinkText)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn LinkText<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).LinkText)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn HasSourceUri(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).HasSourceUri)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn SourceUri<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).SourceUri)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn HasSelection(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).HasSelection)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn SelectionText<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).SelectionText)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ContextMenuTarget_Vtbl {
        pub Kind: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_CONTEXT_MENU_TARGET_KIND,
        ) -> windows_core::HRESULT,
        pub IsEditable: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub IsRequestedForMainFrame: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub PageUri: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub FrameUri: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub HasLinkUri: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub LinkUri: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub HasLinkText: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub LinkText: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub HasSourceUri: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub SourceUri: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub HasSelection: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub SelectionText: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ContextMenuTarget_Impl {
        fn Kind(&self, value: COREWEBVIEW2_CONTEXT_MENU_TARGET_KIND) -> windows_core::Result<()>;
        fn IsEditable(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn IsRequestedForMainFrame(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn PageUri(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn FrameUri(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn HasLinkUri(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn LinkUri(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn HasLinkText(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn LinkText(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn HasSourceUri(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn SourceUri(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn HasSelection(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn SelectionText(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ContextMenuTarget_Vtbl {
        pub const fn new<Identity: ICoreWebView2ContextMenuTarget_Impl>() -> Self {
            unsafe extern "system" fn Kind<Identity: ICoreWebView2ContextMenuTarget_Impl>(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_CONTEXT_MENU_TARGET_KIND,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuTarget_Impl::Kind(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsEditable<Identity: ICoreWebView2ContextMenuTarget_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuTarget_Impl::IsEditable(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsRequestedForMainFrame<
                Identity: ICoreWebView2ContextMenuTarget_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuTarget_Impl::IsRequestedForMainFrame(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PageUri<Identity: ICoreWebView2ContextMenuTarget_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuTarget_Impl::PageUri(this, core::mem::transmute(&value))
                        .into()
                }
            }
            unsafe extern "system" fn FrameUri<Identity: ICoreWebView2ContextMenuTarget_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuTarget_Impl::FrameUri(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn HasLinkUri<Identity: ICoreWebView2ContextMenuTarget_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuTarget_Impl::HasLinkUri(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn LinkUri<Identity: ICoreWebView2ContextMenuTarget_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuTarget_Impl::LinkUri(this, core::mem::transmute(&value))
                        .into()
                }
            }
            unsafe extern "system" fn HasLinkText<Identity: ICoreWebView2ContextMenuTarget_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuTarget_Impl::HasLinkText(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn LinkText<Identity: ICoreWebView2ContextMenuTarget_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuTarget_Impl::LinkText(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn HasSourceUri<
                Identity: ICoreWebView2ContextMenuTarget_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuTarget_Impl::HasSourceUri(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn SourceUri<Identity: ICoreWebView2ContextMenuTarget_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuTarget_Impl::SourceUri(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn HasSelection<
                Identity: ICoreWebView2ContextMenuTarget_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuTarget_Impl::HasSelection(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn SelectionText<
                Identity: ICoreWebView2ContextMenuTarget_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ContextMenuTarget_Impl::SelectionText(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            Self {
                Kind: Kind::<Identity>,
                IsEditable: IsEditable::<Identity>,
                IsRequestedForMainFrame: IsRequestedForMainFrame::<Identity>,
                PageUri: PageUri::<Identity>,
                FrameUri: FrameUri::<Identity>,
                HasLinkUri: HasLinkUri::<Identity>,
                LinkUri: LinkUri::<Identity>,
                HasLinkText: HasLinkText::<Identity>,
                LinkText: LinkText::<Identity>,
                HasSourceUri: HasSourceUri::<Identity>,
                SourceUri: SourceUri::<Identity>,
                HasSelection: HasSelection::<Identity>,
                SelectionText: SelectionText::<Identity>,
            }
        }
    }
    struct ICoreWebView2ContextMenuTarget_ImplVtbl<T: ICoreWebView2ContextMenuTarget_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2ContextMenuTarget_Impl> ICoreWebView2ContextMenuTarget_ImplVtbl<T> {
        const VTABLE: ICoreWebView2ContextMenuTarget_Vtbl =
            ICoreWebView2ContextMenuTarget_Vtbl::new::<T>();
    }
    impl ICoreWebView2ContextMenuTarget {
        pub fn new<'a, T: ICoreWebView2ContextMenuTarget_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ContextMenuTarget_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Controller, ICoreWebView2Controller_Vtbl);
    impl ICoreWebView2Controller {
        pub unsafe fn IsVisible(&self, isvisible: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsVisible)(
                    windows_core::Interface::as_raw(self),
                    isvisible.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsVisible2(&self, isvisible: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsVisible2)(
                    windows_core::Interface::as_raw(self),
                    isvisible.into(),
                )
                .ok()
            }
        }
        pub unsafe fn ZoomFactor(&self, zoomfactor: f64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ZoomFactor)(
                    windows_core::Interface::as_raw(self),
                    zoomfactor,
                )
                .ok()
            }
        }
        pub unsafe fn ZoomFactor2(&self, zoomfactor: f64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ZoomFactor2)(
                    windows_core::Interface::as_raw(self),
                    zoomfactor,
                )
                .ok()
            }
        }
        pub unsafe fn add_ZoomFactorChanged<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2ZoomFactorChangedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_ZoomFactorChanged)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_ZoomFactorChanged(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_ZoomFactorChanged)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn MoveFocus(
            &self,
            reason: COREWEBVIEW2_MOVE_FOCUS_REASON,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).MoveFocus)(
                    windows_core::Interface::as_raw(self),
                    reason,
                )
                .ok()
            }
        }
        pub unsafe fn add_MoveFocusRequested<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2MoveFocusRequestedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_MoveFocusRequested)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_MoveFocusRequested(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_MoveFocusRequested)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn add_GotFocus<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2FocusChangedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_GotFocus)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_GotFocus(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_GotFocus)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn add_LostFocus<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2FocusChangedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_LostFocus)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_LostFocus(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_LostFocus)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn add_AcceleratorKeyPressed<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2AcceleratorKeyPressedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_AcceleratorKeyPressed)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_AcceleratorKeyPressed(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_AcceleratorKeyPressed)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn NotifyParentWindowPositionChanged(&self) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).NotifyParentWindowPositionChanged)(
                    windows_core::Interface::as_raw(self),
                )
                .ok()
            }
        }
        pub unsafe fn Close(&self) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Close)(windows_core::Interface::as_raw(self))
                    .ok()
            }
        }
        pub unsafe fn CoreWebView2<P0>(&self, corewebview2: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).CoreWebView2)(
                    windows_core::Interface::as_raw(self),
                    corewebview2.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Controller_Vtbl {
        pub IsVisible: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub IsVisible2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        Bounds: usize,
        Bounds2: usize,
        pub ZoomFactor:
            unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
        pub ZoomFactor2:
            unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
        pub add_ZoomFactorChanged: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_ZoomFactorChanged:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        SetBoundsAndZoomFactor: usize,
        pub MoveFocus: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_MOVE_FOCUS_REASON,
        ) -> windows_core::HRESULT,
        pub add_MoveFocusRequested: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_MoveFocusRequested:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub add_GotFocus: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_GotFocus:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub add_LostFocus: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_LostFocus:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub add_AcceleratorKeyPressed: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_AcceleratorKeyPressed:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        ParentWindow: usize,
        ParentWindow2: usize,
        pub NotifyParentWindowPositionChanged:
            unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub Close: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub CoreWebView2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Controller_Impl {
        fn IsVisible(&self, isvisible: windows_core::BOOL) -> windows_core::Result<()>;
        fn IsVisible2(&self, isvisible: windows_core::BOOL) -> windows_core::Result<()>;
        fn ZoomFactor(&self, zoomfactor: f64) -> windows_core::Result<()>;
        fn ZoomFactor2(&self, zoomfactor: f64) -> windows_core::Result<()>;
        fn add_ZoomFactorChanged(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2ZoomFactorChangedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_ZoomFactorChanged(&self, token: i64) -> windows_core::Result<()>;
        fn MoveFocus(&self, reason: COREWEBVIEW2_MOVE_FOCUS_REASON) -> windows_core::Result<()>;
        fn add_MoveFocusRequested(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2MoveFocusRequestedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_MoveFocusRequested(&self, token: i64) -> windows_core::Result<()>;
        fn add_GotFocus(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2FocusChangedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_GotFocus(&self, token: i64) -> windows_core::Result<()>;
        fn add_LostFocus(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2FocusChangedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_LostFocus(&self, token: i64) -> windows_core::Result<()>;
        fn add_AcceleratorKeyPressed(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2AcceleratorKeyPressedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_AcceleratorKeyPressed(&self, token: i64) -> windows_core::Result<()>;
        fn NotifyParentWindowPositionChanged(&self) -> windows_core::Result<()>;
        fn Close(&self) -> windows_core::Result<()>;
        fn CoreWebView2(
            &self,
            corewebview2: windows_core::Ref<'_, ICoreWebView2>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Controller_Vtbl {
        pub const fn new<Identity: ICoreWebView2Controller_Impl>() -> Self {
            unsafe extern "system" fn IsVisible<Identity: ICoreWebView2Controller_Impl>(
                this: *mut core::ffi::c_void,
                isvisible: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Controller_Impl::IsVisible(
                        this,
                        core::mem::transmute_copy(&isvisible),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsVisible2<Identity: ICoreWebView2Controller_Impl>(
                this: *mut core::ffi::c_void,
                isvisible: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Controller_Impl::IsVisible2(
                        this,
                        core::mem::transmute_copy(&isvisible),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ZoomFactor<Identity: ICoreWebView2Controller_Impl>(
                this: *mut core::ffi::c_void,
                zoomfactor: f64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Controller_Impl::ZoomFactor(
                        this,
                        core::mem::transmute_copy(&zoomfactor),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ZoomFactor2<Identity: ICoreWebView2Controller_Impl>(
                this: *mut core::ffi::c_void,
                zoomfactor: f64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Controller_Impl::ZoomFactor2(
                        this,
                        core::mem::transmute_copy(&zoomfactor),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn add_ZoomFactorChanged<
                Identity: ICoreWebView2Controller_Impl,
            >(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Controller_Impl::add_ZoomFactorChanged(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_ZoomFactorChanged<
                Identity: ICoreWebView2Controller_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Controller_Impl::remove_ZoomFactorChanged(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn MoveFocus<Identity: ICoreWebView2Controller_Impl>(
                this: *mut core::ffi::c_void,
                reason: COREWEBVIEW2_MOVE_FOCUS_REASON,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Controller_Impl::MoveFocus(
                        this,
                        core::mem::transmute_copy(&reason),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn add_MoveFocusRequested<
                Identity: ICoreWebView2Controller_Impl,
            >(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Controller_Impl::add_MoveFocusRequested(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_MoveFocusRequested<
                Identity: ICoreWebView2Controller_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Controller_Impl::remove_MoveFocusRequested(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn add_GotFocus<Identity: ICoreWebView2Controller_Impl>(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Controller_Impl::add_GotFocus(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_GotFocus<Identity: ICoreWebView2Controller_Impl>(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Controller_Impl::remove_GotFocus(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn add_LostFocus<Identity: ICoreWebView2Controller_Impl>(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Controller_Impl::add_LostFocus(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_LostFocus<Identity: ICoreWebView2Controller_Impl>(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Controller_Impl::remove_LostFocus(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn add_AcceleratorKeyPressed<
                Identity: ICoreWebView2Controller_Impl,
            >(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Controller_Impl::add_AcceleratorKeyPressed(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_AcceleratorKeyPressed<
                Identity: ICoreWebView2Controller_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Controller_Impl::remove_AcceleratorKeyPressed(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn NotifyParentWindowPositionChanged<
                Identity: ICoreWebView2Controller_Impl,
            >(
                this: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Controller_Impl::NotifyParentWindowPositionChanged(this).into()
                }
            }
            unsafe extern "system" fn Close<Identity: ICoreWebView2Controller_Impl>(
                this: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Controller_Impl::Close(this).into()
                }
            }
            unsafe extern "system" fn CoreWebView2<Identity: ICoreWebView2Controller_Impl>(
                this: *mut core::ffi::c_void,
                corewebview2: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Controller_Impl::CoreWebView2(
                        this,
                        core::mem::transmute_copy(&corewebview2),
                    )
                    .into()
                }
            }
            Self {
                IsVisible: IsVisible::<Identity>,
                IsVisible2: IsVisible2::<Identity>,
                Bounds: 0,
                Bounds2: 0,
                ZoomFactor: ZoomFactor::<Identity>,
                ZoomFactor2: ZoomFactor2::<Identity>,
                add_ZoomFactorChanged: add_ZoomFactorChanged::<Identity>,
                remove_ZoomFactorChanged: remove_ZoomFactorChanged::<Identity>,
                SetBoundsAndZoomFactor: 0,
                MoveFocus: MoveFocus::<Identity>,
                add_MoveFocusRequested: add_MoveFocusRequested::<Identity>,
                remove_MoveFocusRequested: remove_MoveFocusRequested::<Identity>,
                add_GotFocus: add_GotFocus::<Identity>,
                remove_GotFocus: remove_GotFocus::<Identity>,
                add_LostFocus: add_LostFocus::<Identity>,
                remove_LostFocus: remove_LostFocus::<Identity>,
                add_AcceleratorKeyPressed: add_AcceleratorKeyPressed::<Identity>,
                remove_AcceleratorKeyPressed: remove_AcceleratorKeyPressed::<Identity>,
                ParentWindow: 0,
                ParentWindow2: 0,
                NotifyParentWindowPositionChanged: NotifyParentWindowPositionChanged::<Identity>,
                Close: Close::<Identity>,
                CoreWebView2: CoreWebView2::<Identity>,
            }
        }
    }
    struct ICoreWebView2Controller_ImplVtbl<T: ICoreWebView2Controller_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Controller_Impl> ICoreWebView2Controller_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Controller_Vtbl = ICoreWebView2Controller_Vtbl::new::<T>();
    }
    impl ICoreWebView2Controller {
        pub fn new<'a, T: ICoreWebView2Controller_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Controller_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Controller2, ICoreWebView2Controller2_Vtbl);
    impl ICoreWebView2Controller2 {
        pub unsafe fn DefaultBackgroundColor(
            &self,
            value: COREWEBVIEW2_COLOR,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).DefaultBackgroundColor)(
                    windows_core::Interface::as_raw(self),
                    core::mem::transmute(value),
                )
                .ok()
            }
        }
        pub unsafe fn DefaultBackgroundColor2(
            &self,
            value: COREWEBVIEW2_COLOR,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).DefaultBackgroundColor2)(
                    windows_core::Interface::as_raw(self),
                    core::mem::transmute(value),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Controller2_Vtbl {
        pub DefaultBackgroundColor: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_COLOR,
        ) -> windows_core::HRESULT,
        pub DefaultBackgroundColor2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_COLOR,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Controller2_Impl {
        fn DefaultBackgroundColor(&self, value: &COREWEBVIEW2_COLOR) -> windows_core::Result<()>;
        fn DefaultBackgroundColor2(&self, value: &COREWEBVIEW2_COLOR) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Controller2_Vtbl {
        pub const fn new<Identity: ICoreWebView2Controller2_Impl>() -> Self {
            unsafe extern "system" fn DefaultBackgroundColor<
                Identity: ICoreWebView2Controller2_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_COLOR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Controller2_Impl::DefaultBackgroundColor(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn DefaultBackgroundColor2<
                Identity: ICoreWebView2Controller2_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_COLOR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Controller2_Impl::DefaultBackgroundColor2(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            Self {
                DefaultBackgroundColor: DefaultBackgroundColor::<Identity>,
                DefaultBackgroundColor2: DefaultBackgroundColor2::<Identity>,
            }
        }
    }
    struct ICoreWebView2Controller2_ImplVtbl<T: ICoreWebView2Controller2_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Controller2_Impl> ICoreWebView2Controller2_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Controller2_Vtbl = ICoreWebView2Controller2_Vtbl::new::<T>();
    }
    impl ICoreWebView2Controller2 {
        pub fn new<'a, T: ICoreWebView2Controller2_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Controller2_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Controller3, ICoreWebView2Controller3_Vtbl);
    impl ICoreWebView2Controller3 {
        pub unsafe fn RasterizationScale(&self, scale: f64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).RasterizationScale)(
                    windows_core::Interface::as_raw(self),
                    scale,
                )
                .ok()
            }
        }
        pub unsafe fn RasterizationScale2(&self, scale: f64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).RasterizationScale2)(
                    windows_core::Interface::as_raw(self),
                    scale,
                )
                .ok()
            }
        }
        pub unsafe fn ShouldDetectMonitorScaleChanges(
            &self,
            value: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ShouldDetectMonitorScaleChanges)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn ShouldDetectMonitorScaleChanges2(
            &self,
            value: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ShouldDetectMonitorScaleChanges2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn add_RasterizationScaleChanged<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2RasterizationScaleChangedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_RasterizationScaleChanged)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_RasterizationScaleChanged(
            &self,
            token: i64,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_RasterizationScaleChanged)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn BoundsMode(
            &self,
            boundsmode: COREWEBVIEW2_BOUNDS_MODE,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).BoundsMode)(
                    windows_core::Interface::as_raw(self),
                    boundsmode,
                )
                .ok()
            }
        }
        pub unsafe fn BoundsMode2(
            &self,
            boundsmode: COREWEBVIEW2_BOUNDS_MODE,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).BoundsMode2)(
                    windows_core::Interface::as_raw(self),
                    boundsmode,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Controller3_Vtbl {
        pub RasterizationScale:
            unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
        pub RasterizationScale2:
            unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
        pub ShouldDetectMonitorScaleChanges: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        )
            -> windows_core::HRESULT,
        pub ShouldDetectMonitorScaleChanges2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        )
            -> windows_core::HRESULT,
        pub add_RasterizationScaleChanged: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        )
            -> windows_core::HRESULT,
        pub remove_RasterizationScaleChanged:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub BoundsMode: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_BOUNDS_MODE,
        ) -> windows_core::HRESULT,
        pub BoundsMode2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_BOUNDS_MODE,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Controller3_Impl {
        fn RasterizationScale(&self, scale: f64) -> windows_core::Result<()>;
        fn RasterizationScale2(&self, scale: f64) -> windows_core::Result<()>;
        fn ShouldDetectMonitorScaleChanges(
            &self,
            value: windows_core::BOOL,
        ) -> windows_core::Result<()>;
        fn ShouldDetectMonitorScaleChanges2(
            &self,
            value: windows_core::BOOL,
        ) -> windows_core::Result<()>;
        fn add_RasterizationScaleChanged(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2RasterizationScaleChangedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_RasterizationScaleChanged(&self, token: i64) -> windows_core::Result<()>;
        fn BoundsMode(&self, boundsmode: COREWEBVIEW2_BOUNDS_MODE) -> windows_core::Result<()>;
        fn BoundsMode2(&self, boundsmode: COREWEBVIEW2_BOUNDS_MODE) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Controller3_Vtbl {
        pub const fn new<Identity: ICoreWebView2Controller3_Impl>() -> Self {
            unsafe extern "system" fn RasterizationScale<
                Identity: ICoreWebView2Controller3_Impl,
            >(
                this: *mut core::ffi::c_void,
                scale: f64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Controller3_Impl::RasterizationScale(
                        this,
                        core::mem::transmute_copy(&scale),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn RasterizationScale2<
                Identity: ICoreWebView2Controller3_Impl,
            >(
                this: *mut core::ffi::c_void,
                scale: f64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Controller3_Impl::RasterizationScale2(
                        this,
                        core::mem::transmute_copy(&scale),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ShouldDetectMonitorScaleChanges<
                Identity: ICoreWebView2Controller3_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Controller3_Impl::ShouldDetectMonitorScaleChanges(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ShouldDetectMonitorScaleChanges2<
                Identity: ICoreWebView2Controller3_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Controller3_Impl::ShouldDetectMonitorScaleChanges2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn add_RasterizationScaleChanged<
                Identity: ICoreWebView2Controller3_Impl,
            >(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Controller3_Impl::add_RasterizationScaleChanged(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_RasterizationScaleChanged<
                Identity: ICoreWebView2Controller3_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Controller3_Impl::remove_RasterizationScaleChanged(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn BoundsMode<Identity: ICoreWebView2Controller3_Impl>(
                this: *mut core::ffi::c_void,
                boundsmode: COREWEBVIEW2_BOUNDS_MODE,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Controller3_Impl::BoundsMode(
                        this,
                        core::mem::transmute_copy(&boundsmode),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn BoundsMode2<Identity: ICoreWebView2Controller3_Impl>(
                this: *mut core::ffi::c_void,
                boundsmode: COREWEBVIEW2_BOUNDS_MODE,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Controller3_Impl::BoundsMode2(
                        this,
                        core::mem::transmute_copy(&boundsmode),
                    )
                    .into()
                }
            }
            Self {
                RasterizationScale: RasterizationScale::<Identity>,
                RasterizationScale2: RasterizationScale2::<Identity>,
                ShouldDetectMonitorScaleChanges: ShouldDetectMonitorScaleChanges::<Identity>,
                ShouldDetectMonitorScaleChanges2: ShouldDetectMonitorScaleChanges2::<Identity>,
                add_RasterizationScaleChanged: add_RasterizationScaleChanged::<Identity>,
                remove_RasterizationScaleChanged: remove_RasterizationScaleChanged::<Identity>,
                BoundsMode: BoundsMode::<Identity>,
                BoundsMode2: BoundsMode2::<Identity>,
            }
        }
    }
    struct ICoreWebView2Controller3_ImplVtbl<T: ICoreWebView2Controller3_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Controller3_Impl> ICoreWebView2Controller3_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Controller3_Vtbl = ICoreWebView2Controller3_Vtbl::new::<T>();
    }
    impl ICoreWebView2Controller3 {
        pub fn new<'a, T: ICoreWebView2Controller3_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Controller3_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Controller4, ICoreWebView2Controller4_Vtbl);
    impl ICoreWebView2Controller4 {
        pub unsafe fn AllowExternalDrop(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).AllowExternalDrop)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn AllowExternalDrop2(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).AllowExternalDrop2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Controller4_Vtbl {
        pub AllowExternalDrop: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub AllowExternalDrop2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Controller4_Impl {
        fn AllowExternalDrop(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn AllowExternalDrop2(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Controller4_Vtbl {
        pub const fn new<Identity: ICoreWebView2Controller4_Impl>() -> Self {
            unsafe extern "system" fn AllowExternalDrop<Identity: ICoreWebView2Controller4_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Controller4_Impl::AllowExternalDrop(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn AllowExternalDrop2<
                Identity: ICoreWebView2Controller4_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Controller4_Impl::AllowExternalDrop2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                AllowExternalDrop: AllowExternalDrop::<Identity>,
                AllowExternalDrop2: AllowExternalDrop2::<Identity>,
            }
        }
    }
    struct ICoreWebView2Controller4_ImplVtbl<T: ICoreWebView2Controller4_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Controller4_Impl> ICoreWebView2Controller4_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Controller4_Vtbl = ICoreWebView2Controller4_Vtbl::new::<T>();
    }
    impl ICoreWebView2Controller4 {
        pub fn new<'a, T: ICoreWebView2Controller4_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Controller4_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ControllerOptions,
        ICoreWebView2ControllerOptions_Vtbl
    );
    impl ICoreWebView2ControllerOptions {
        pub unsafe fn ProfileName<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ProfileName)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn ProfileName2<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ProfileName2)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn IsInPrivateModeEnabled(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsInPrivateModeEnabled)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsInPrivateModeEnabled2(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsInPrivateModeEnabled2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ControllerOptions_Vtbl {
        pub ProfileName: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub ProfileName2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub IsInPrivateModeEnabled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub IsInPrivateModeEnabled2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ControllerOptions_Impl {
        fn ProfileName(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn ProfileName2(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn IsInPrivateModeEnabled(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn IsInPrivateModeEnabled2(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ControllerOptions_Vtbl {
        pub const fn new<Identity: ICoreWebView2ControllerOptions_Impl>() -> Self {
            unsafe extern "system" fn ProfileName<Identity: ICoreWebView2ControllerOptions_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ControllerOptions_Impl::ProfileName(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ProfileName2<
                Identity: ICoreWebView2ControllerOptions_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ControllerOptions_Impl::ProfileName2(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsInPrivateModeEnabled<
                Identity: ICoreWebView2ControllerOptions_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ControllerOptions_Impl::IsInPrivateModeEnabled(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsInPrivateModeEnabled2<
                Identity: ICoreWebView2ControllerOptions_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ControllerOptions_Impl::IsInPrivateModeEnabled2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                ProfileName: ProfileName::<Identity>,
                ProfileName2: ProfileName2::<Identity>,
                IsInPrivateModeEnabled: IsInPrivateModeEnabled::<Identity>,
                IsInPrivateModeEnabled2: IsInPrivateModeEnabled2::<Identity>,
            }
        }
    }
    struct ICoreWebView2ControllerOptions_ImplVtbl<T: ICoreWebView2ControllerOptions_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2ControllerOptions_Impl> ICoreWebView2ControllerOptions_ImplVtbl<T> {
        const VTABLE: ICoreWebView2ControllerOptions_Vtbl =
            ICoreWebView2ControllerOptions_Vtbl::new::<T>();
    }
    impl ICoreWebView2ControllerOptions {
        pub fn new<'a, T: ICoreWebView2ControllerOptions_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ControllerOptions_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ControllerOptions2,
        ICoreWebView2ControllerOptions2_Vtbl
    );
    impl ICoreWebView2ControllerOptions2 {
        pub unsafe fn ScriptLocale<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ScriptLocale)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn ScriptLocale2<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ScriptLocale2)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ControllerOptions2_Vtbl {
        pub ScriptLocale: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub ScriptLocale2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ControllerOptions2_Impl {
        fn ScriptLocale(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn ScriptLocale2(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ControllerOptions2_Vtbl {
        pub const fn new<Identity: ICoreWebView2ControllerOptions2_Impl>() -> Self {
            unsafe extern "system" fn ScriptLocale<
                Identity: ICoreWebView2ControllerOptions2_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ControllerOptions2_Impl::ScriptLocale(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ScriptLocale2<
                Identity: ICoreWebView2ControllerOptions2_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ControllerOptions2_Impl::ScriptLocale2(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            Self {
                ScriptLocale: ScriptLocale::<Identity>,
                ScriptLocale2: ScriptLocale2::<Identity>,
            }
        }
    }
    struct ICoreWebView2ControllerOptions2_ImplVtbl<T: ICoreWebView2ControllerOptions2_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2ControllerOptions2_Impl> ICoreWebView2ControllerOptions2_ImplVtbl<T> {
        const VTABLE: ICoreWebView2ControllerOptions2_Vtbl =
            ICoreWebView2ControllerOptions2_Vtbl::new::<T>();
    }
    impl ICoreWebView2ControllerOptions2 {
        pub fn new<'a, T: ICoreWebView2ControllerOptions2_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ControllerOptions2_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Cookie, ICoreWebView2Cookie_Vtbl);
    impl ICoreWebView2Cookie {
        pub unsafe fn Name<P0>(&self, name: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Name)(
                    windows_core::Interface::as_raw(self),
                    name.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Value<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Value)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Value2<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Value2)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Domain<P0>(&self, domain: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Domain)(
                    windows_core::Interface::as_raw(self),
                    domain.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Path<P0>(&self, path: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Path)(
                    windows_core::Interface::as_raw(self),
                    path.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Expires(&self, expires: f64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Expires)(
                    windows_core::Interface::as_raw(self),
                    expires,
                )
                .ok()
            }
        }
        pub unsafe fn Expires2(&self, expires: f64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Expires2)(
                    windows_core::Interface::as_raw(self),
                    expires,
                )
                .ok()
            }
        }
        pub unsafe fn IsHttpOnly(&self, ishttponly: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsHttpOnly)(
                    windows_core::Interface::as_raw(self),
                    ishttponly.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsHttpOnly2(&self, ishttponly: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsHttpOnly2)(
                    windows_core::Interface::as_raw(self),
                    ishttponly.into(),
                )
                .ok()
            }
        }
        pub unsafe fn SameSite(
            &self,
            samesite: COREWEBVIEW2_COOKIE_SAME_SITE_KIND,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).SameSite)(
                    windows_core::Interface::as_raw(self),
                    samesite,
                )
                .ok()
            }
        }
        pub unsafe fn SameSite2(
            &self,
            samesite: COREWEBVIEW2_COOKIE_SAME_SITE_KIND,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).SameSite2)(
                    windows_core::Interface::as_raw(self),
                    samesite,
                )
                .ok()
            }
        }
        pub unsafe fn IsSecure(&self, issecure: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsSecure)(
                    windows_core::Interface::as_raw(self),
                    issecure.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsSecure2(&self, issecure: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsSecure2)(
                    windows_core::Interface::as_raw(self),
                    issecure.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsSession(&self, issession: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsSession)(
                    windows_core::Interface::as_raw(self),
                    issession.into(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Cookie_Vtbl {
        pub Name: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub Value: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub Value2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub Domain: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub Path: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub Expires:
            unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
        pub Expires2:
            unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
        pub IsHttpOnly: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub IsHttpOnly2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub SameSite: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_COOKIE_SAME_SITE_KIND,
        ) -> windows_core::HRESULT,
        pub SameSite2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_COOKIE_SAME_SITE_KIND,
        ) -> windows_core::HRESULT,
        pub IsSecure: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub IsSecure2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub IsSession: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Cookie_Impl {
        fn Name(&self, name: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn Value(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn Value2(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn Domain(&self, domain: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn Path(&self, path: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn Expires(&self, expires: f64) -> windows_core::Result<()>;
        fn Expires2(&self, expires: f64) -> windows_core::Result<()>;
        fn IsHttpOnly(&self, ishttponly: windows_core::BOOL) -> windows_core::Result<()>;
        fn IsHttpOnly2(&self, ishttponly: windows_core::BOOL) -> windows_core::Result<()>;
        fn SameSite(
            &self,
            samesite: COREWEBVIEW2_COOKIE_SAME_SITE_KIND,
        ) -> windows_core::Result<()>;
        fn SameSite2(
            &self,
            samesite: COREWEBVIEW2_COOKIE_SAME_SITE_KIND,
        ) -> windows_core::Result<()>;
        fn IsSecure(&self, issecure: windows_core::BOOL) -> windows_core::Result<()>;
        fn IsSecure2(&self, issecure: windows_core::BOOL) -> windows_core::Result<()>;
        fn IsSession(&self, issession: windows_core::BOOL) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Cookie_Vtbl {
        pub const fn new<Identity: ICoreWebView2Cookie_Impl>() -> Self {
            unsafe extern "system" fn Name<Identity: ICoreWebView2Cookie_Impl>(
                this: *mut core::ffi::c_void,
                name: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Cookie_Impl::Name(this, core::mem::transmute(&name)).into()
                }
            }
            unsafe extern "system" fn Value<Identity: ICoreWebView2Cookie_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Cookie_Impl::Value(this, core::mem::transmute(&value)).into()
                }
            }
            unsafe extern "system" fn Value2<Identity: ICoreWebView2Cookie_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Cookie_Impl::Value2(this, core::mem::transmute(&value)).into()
                }
            }
            unsafe extern "system" fn Domain<Identity: ICoreWebView2Cookie_Impl>(
                this: *mut core::ffi::c_void,
                domain: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Cookie_Impl::Domain(this, core::mem::transmute(&domain)).into()
                }
            }
            unsafe extern "system" fn Path<Identity: ICoreWebView2Cookie_Impl>(
                this: *mut core::ffi::c_void,
                path: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Cookie_Impl::Path(this, core::mem::transmute(&path)).into()
                }
            }
            unsafe extern "system" fn Expires<Identity: ICoreWebView2Cookie_Impl>(
                this: *mut core::ffi::c_void,
                expires: f64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Cookie_Impl::Expires(this, core::mem::transmute_copy(&expires))
                        .into()
                }
            }
            unsafe extern "system" fn Expires2<Identity: ICoreWebView2Cookie_Impl>(
                this: *mut core::ffi::c_void,
                expires: f64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Cookie_Impl::Expires2(this, core::mem::transmute_copy(&expires))
                        .into()
                }
            }
            unsafe extern "system" fn IsHttpOnly<Identity: ICoreWebView2Cookie_Impl>(
                this: *mut core::ffi::c_void,
                ishttponly: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Cookie_Impl::IsHttpOnly(
                        this,
                        core::mem::transmute_copy(&ishttponly),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsHttpOnly2<Identity: ICoreWebView2Cookie_Impl>(
                this: *mut core::ffi::c_void,
                ishttponly: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Cookie_Impl::IsHttpOnly2(
                        this,
                        core::mem::transmute_copy(&ishttponly),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn SameSite<Identity: ICoreWebView2Cookie_Impl>(
                this: *mut core::ffi::c_void,
                samesite: COREWEBVIEW2_COOKIE_SAME_SITE_KIND,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Cookie_Impl::SameSite(this, core::mem::transmute_copy(&samesite))
                        .into()
                }
            }
            unsafe extern "system" fn SameSite2<Identity: ICoreWebView2Cookie_Impl>(
                this: *mut core::ffi::c_void,
                samesite: COREWEBVIEW2_COOKIE_SAME_SITE_KIND,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Cookie_Impl::SameSite2(this, core::mem::transmute_copy(&samesite))
                        .into()
                }
            }
            unsafe extern "system" fn IsSecure<Identity: ICoreWebView2Cookie_Impl>(
                this: *mut core::ffi::c_void,
                issecure: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Cookie_Impl::IsSecure(this, core::mem::transmute_copy(&issecure))
                        .into()
                }
            }
            unsafe extern "system" fn IsSecure2<Identity: ICoreWebView2Cookie_Impl>(
                this: *mut core::ffi::c_void,
                issecure: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Cookie_Impl::IsSecure2(this, core::mem::transmute_copy(&issecure))
                        .into()
                }
            }
            unsafe extern "system" fn IsSession<Identity: ICoreWebView2Cookie_Impl>(
                this: *mut core::ffi::c_void,
                issession: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Cookie_Impl::IsSession(this, core::mem::transmute_copy(&issession))
                        .into()
                }
            }
            Self {
                Name: Name::<Identity>,
                Value: Value::<Identity>,
                Value2: Value2::<Identity>,
                Domain: Domain::<Identity>,
                Path: Path::<Identity>,
                Expires: Expires::<Identity>,
                Expires2: Expires2::<Identity>,
                IsHttpOnly: IsHttpOnly::<Identity>,
                IsHttpOnly2: IsHttpOnly2::<Identity>,
                SameSite: SameSite::<Identity>,
                SameSite2: SameSite2::<Identity>,
                IsSecure: IsSecure::<Identity>,
                IsSecure2: IsSecure2::<Identity>,
                IsSession: IsSession::<Identity>,
            }
        }
    }
    struct ICoreWebView2Cookie_ImplVtbl<T: ICoreWebView2Cookie_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2Cookie_Impl> ICoreWebView2Cookie_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Cookie_Vtbl = ICoreWebView2Cookie_Vtbl::new::<T>();
    }
    impl ICoreWebView2Cookie {
        pub fn new<'a, T: ICoreWebView2Cookie_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Cookie_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2CookieList, ICoreWebView2CookieList_Vtbl);
    impl ICoreWebView2CookieList {
        pub unsafe fn Count(&self, value: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Count)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn GetValueAtIndex<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
        where
            P1: windows_core::Param<ICoreWebView2Cookie>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetValueAtIndex)(
                    windows_core::Interface::as_raw(self),
                    index,
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2CookieList_Vtbl {
        pub Count: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub GetValueAtIndex: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2CookieList_Impl {
        fn Count(&self, value: u32) -> windows_core::Result<()>;
        fn GetValueAtIndex(
            &self,
            index: u32,
            value: windows_core::Ref<'_, ICoreWebView2Cookie>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2CookieList_Vtbl {
        pub const fn new<Identity: ICoreWebView2CookieList_Impl>() -> Self {
            unsafe extern "system" fn Count<Identity: ICoreWebView2CookieList_Impl>(
                this: *mut core::ffi::c_void,
                value: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CookieList_Impl::Count(this, core::mem::transmute_copy(&value))
                        .into()
                }
            }
            unsafe extern "system" fn GetValueAtIndex<Identity: ICoreWebView2CookieList_Impl>(
                this: *mut core::ffi::c_void,
                index: u32,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CookieList_Impl::GetValueAtIndex(
                        this,
                        core::mem::transmute_copy(&index),
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                Count: Count::<Identity>,
                GetValueAtIndex: GetValueAtIndex::<Identity>,
            }
        }
    }
    struct ICoreWebView2CookieList_ImplVtbl<T: ICoreWebView2CookieList_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2CookieList_Impl> ICoreWebView2CookieList_ImplVtbl<T> {
        const VTABLE: ICoreWebView2CookieList_Vtbl = ICoreWebView2CookieList_Vtbl::new::<T>();
    }
    impl ICoreWebView2CookieList {
        pub fn new<'a, T: ICoreWebView2CookieList_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2CookieList_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2CookieManager,
        ICoreWebView2CookieManager_Vtbl
    );
    impl ICoreWebView2CookieManager {
        pub unsafe fn CreateCookie<P0, P1, P2, P3, P4>(
            &self,
            name: P0,
            value: P1,
            domain: P2,
            path: P3,
            cookie: P4,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
            P1: windows_core::Param<windows_core::PCWSTR>,
            P2: windows_core::Param<windows_core::PCWSTR>,
            P3: windows_core::Param<windows_core::PCWSTR>,
            P4: windows_core::Param<ICoreWebView2Cookie>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).CreateCookie)(
                    windows_core::Interface::as_raw(self),
                    name.param().abi(),
                    value.param().abi(),
                    domain.param().abi(),
                    path.param().abi(),
                    cookie.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn CopyCookie<P0, P1>(
            &self,
            cookieparam: P0,
            cookie: P1,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Cookie>,
            P1: windows_core::Param<ICoreWebView2Cookie>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).CopyCookie)(
                    windows_core::Interface::as_raw(self),
                    cookieparam.param().abi(),
                    cookie.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn GetCookies<P0, P1>(&self, uri: P0, handler: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
            P1: windows_core::Param<ICoreWebView2GetCookiesCompletedHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetCookies)(
                    windows_core::Interface::as_raw(self),
                    uri.param().abi(),
                    handler.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn AddOrUpdateCookie<P0>(&self, cookie: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Cookie>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).AddOrUpdateCookie)(
                    windows_core::Interface::as_raw(self),
                    cookie.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn DeleteCookie<P0>(&self, cookie: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Cookie>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).DeleteCookie)(
                    windows_core::Interface::as_raw(self),
                    cookie.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn DeleteCookies<P0, P1>(&self, name: P0, uri: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
            P1: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).DeleteCookies)(
                    windows_core::Interface::as_raw(self),
                    name.param().abi(),
                    uri.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn DeleteCookiesWithDomainAndPath<P0, P1, P2>(
            &self,
            name: P0,
            domain: P1,
            path: P2,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
            P1: windows_core::Param<windows_core::PCWSTR>,
            P2: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).DeleteCookiesWithDomainAndPath)(
                    windows_core::Interface::as_raw(self),
                    name.param().abi(),
                    domain.param().abi(),
                    path.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn DeleteAllCookies(&self) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).DeleteAllCookies)(
                    windows_core::Interface::as_raw(self),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2CookieManager_Vtbl {
        pub CreateCookie: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            windows_core::PCWSTR,
            windows_core::PCWSTR,
            windows_core::PCWSTR,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub CopyCookie: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub GetCookies: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub AddOrUpdateCookie: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub DeleteCookie: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub DeleteCookies: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub DeleteCookiesWithDomainAndPath: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            windows_core::PCWSTR,
            windows_core::PCWSTR,
        )
            -> windows_core::HRESULT,
        pub DeleteAllCookies:
            unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2CookieManager_Impl {
        fn CreateCookie(
            &self,
            name: &windows_core::PCWSTR,
            value: &windows_core::PCWSTR,
            domain: &windows_core::PCWSTR,
            path: &windows_core::PCWSTR,
            cookie: windows_core::Ref<'_, ICoreWebView2Cookie>,
        ) -> windows_core::Result<()>;
        fn CopyCookie(
            &self,
            cookieparam: windows_core::Ref<'_, ICoreWebView2Cookie>,
            cookie: windows_core::Ref<'_, ICoreWebView2Cookie>,
        ) -> windows_core::Result<()>;
        fn GetCookies(
            &self,
            uri: &windows_core::PCWSTR,
            handler: windows_core::Ref<'_, ICoreWebView2GetCookiesCompletedHandler>,
        ) -> windows_core::Result<()>;
        fn AddOrUpdateCookie(
            &self,
            cookie: windows_core::Ref<'_, ICoreWebView2Cookie>,
        ) -> windows_core::Result<()>;
        fn DeleteCookie(
            &self,
            cookie: windows_core::Ref<'_, ICoreWebView2Cookie>,
        ) -> windows_core::Result<()>;
        fn DeleteCookies(
            &self,
            name: &windows_core::PCWSTR,
            uri: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
        fn DeleteCookiesWithDomainAndPath(
            &self,
            name: &windows_core::PCWSTR,
            domain: &windows_core::PCWSTR,
            path: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
        fn DeleteAllCookies(&self) -> windows_core::Result<()>;
    }
    impl ICoreWebView2CookieManager_Vtbl {
        pub const fn new<Identity: ICoreWebView2CookieManager_Impl>() -> Self {
            unsafe extern "system" fn CreateCookie<Identity: ICoreWebView2CookieManager_Impl>(
                this: *mut core::ffi::c_void,
                name: windows_core::PCWSTR,
                value: windows_core::PCWSTR,
                domain: windows_core::PCWSTR,
                path: windows_core::PCWSTR,
                cookie: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CookieManager_Impl::CreateCookie(
                        this,
                        core::mem::transmute(&name),
                        core::mem::transmute(&value),
                        core::mem::transmute(&domain),
                        core::mem::transmute(&path),
                        core::mem::transmute_copy(&cookie),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn CopyCookie<Identity: ICoreWebView2CookieManager_Impl>(
                this: *mut core::ffi::c_void,
                cookieparam: *mut core::ffi::c_void,
                cookie: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CookieManager_Impl::CopyCookie(
                        this,
                        core::mem::transmute_copy(&cookieparam),
                        core::mem::transmute_copy(&cookie),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn GetCookies<Identity: ICoreWebView2CookieManager_Impl>(
                this: *mut core::ffi::c_void,
                uri: windows_core::PCWSTR,
                handler: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CookieManager_Impl::GetCookies(
                        this,
                        core::mem::transmute(&uri),
                        core::mem::transmute_copy(&handler),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn AddOrUpdateCookie<
                Identity: ICoreWebView2CookieManager_Impl,
            >(
                this: *mut core::ffi::c_void,
                cookie: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CookieManager_Impl::AddOrUpdateCookie(
                        this,
                        core::mem::transmute_copy(&cookie),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn DeleteCookie<Identity: ICoreWebView2CookieManager_Impl>(
                this: *mut core::ffi::c_void,
                cookie: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CookieManager_Impl::DeleteCookie(
                        this,
                        core::mem::transmute_copy(&cookie),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn DeleteCookies<Identity: ICoreWebView2CookieManager_Impl>(
                this: *mut core::ffi::c_void,
                name: windows_core::PCWSTR,
                uri: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CookieManager_Impl::DeleteCookies(
                        this,
                        core::mem::transmute(&name),
                        core::mem::transmute(&uri),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn DeleteCookiesWithDomainAndPath<
                Identity: ICoreWebView2CookieManager_Impl,
            >(
                this: *mut core::ffi::c_void,
                name: windows_core::PCWSTR,
                domain: windows_core::PCWSTR,
                path: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CookieManager_Impl::DeleteCookiesWithDomainAndPath(
                        this,
                        core::mem::transmute(&name),
                        core::mem::transmute(&domain),
                        core::mem::transmute(&path),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn DeleteAllCookies<
                Identity: ICoreWebView2CookieManager_Impl,
            >(
                this: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CookieManager_Impl::DeleteAllCookies(this).into()
                }
            }
            Self {
                CreateCookie: CreateCookie::<Identity>,
                CopyCookie: CopyCookie::<Identity>,
                GetCookies: GetCookies::<Identity>,
                AddOrUpdateCookie: AddOrUpdateCookie::<Identity>,
                DeleteCookie: DeleteCookie::<Identity>,
                DeleteCookies: DeleteCookies::<Identity>,
                DeleteCookiesWithDomainAndPath: DeleteCookiesWithDomainAndPath::<Identity>,
                DeleteAllCookies: DeleteAllCookies::<Identity>,
            }
        }
    }
    struct ICoreWebView2CookieManager_ImplVtbl<T: ICoreWebView2CookieManager_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2CookieManager_Impl> ICoreWebView2CookieManager_ImplVtbl<T> {
        const VTABLE: ICoreWebView2CookieManager_Vtbl = ICoreWebView2CookieManager_Vtbl::new::<T>();
    }
    impl ICoreWebView2CookieManager {
        pub fn new<'a, T: ICoreWebView2CookieManager_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2CookieManager_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler,
        ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler_Vtbl
    );
    impl ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler {
        pub unsafe fn Invoke<P1>(
            &self,
            errorcode: windows_core::HRESULT,
            result: P1,
        ) -> windows_core::Result<()>
        where
            P1: windows_core::Param<ICoreWebView2CompositionController>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    errorcode,
                    result.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::HRESULT,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler_Impl {
        fn Invoke(
            &self,
            errorcode: windows_core::HRESULT,
            result: windows_core::Ref<'_, ICoreWebView2CompositionController>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler_Vtbl {
        pub const fn new<
            Identity: ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler_Impl,
        >() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                errorcode: windows_core::HRESULT,
                result: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler_Impl:: Invoke ( this , core::mem::transmute_copy ( & errorcode ) , core::mem::transmute_copy ( & result ) , ) . into ( )
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler_ImplVtbl<
        T: ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler_Impl>
        ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler_Vtbl =
            ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler {
        pub fn new<
            'a,
            T: ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler_Impl,
        >(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable:
                    &ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler_ImplVtbl::<
                        T,
                    >::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2CreateCoreWebView2ControllerCompletedHandler,
        ICoreWebView2CreateCoreWebView2ControllerCompletedHandler_Vtbl
    );
    impl ICoreWebView2CreateCoreWebView2ControllerCompletedHandler {
        pub unsafe fn Invoke<P1>(
            &self,
            errorcode: windows_core::HRESULT,
            result: P1,
        ) -> windows_core::Result<()>
        where
            P1: windows_core::Param<ICoreWebView2Controller>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    errorcode,
                    result.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2CreateCoreWebView2ControllerCompletedHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::HRESULT,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2CreateCoreWebView2ControllerCompletedHandler_Impl {
        fn Invoke(
            &self,
            errorcode: windows_core::HRESULT,
            result: windows_core::Ref<'_, ICoreWebView2Controller>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2CreateCoreWebView2ControllerCompletedHandler_Vtbl {
        pub const fn new<
            Identity: ICoreWebView2CreateCoreWebView2ControllerCompletedHandler_Impl,
        >() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2CreateCoreWebView2ControllerCompletedHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                errorcode: windows_core::HRESULT,
                result: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CreateCoreWebView2ControllerCompletedHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&errorcode),
                        core::mem::transmute_copy(&result),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2CreateCoreWebView2ControllerCompletedHandler_ImplVtbl<
        T: ICoreWebView2CreateCoreWebView2ControllerCompletedHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2CreateCoreWebView2ControllerCompletedHandler_Impl>
        ICoreWebView2CreateCoreWebView2ControllerCompletedHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2CreateCoreWebView2ControllerCompletedHandler_Vtbl =
            ICoreWebView2CreateCoreWebView2ControllerCompletedHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2CreateCoreWebView2ControllerCompletedHandler {
        pub fn new<'a, T: ICoreWebView2CreateCoreWebView2ControllerCompletedHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable:
                    &ICoreWebView2CreateCoreWebView2ControllerCompletedHandler_ImplVtbl::<T>::VTABLE
                        as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler,
        ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler_Vtbl
    );
    impl ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler {
        pub unsafe fn Invoke<P1>(
            &self,
            errorcode: windows_core::HRESULT,
            result: P1,
        ) -> windows_core::Result<()>
        where
            P1: windows_core::Param<ICoreWebView2Environment>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    errorcode,
                    result.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::HRESULT,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler_Impl {
        fn Invoke(
            &self,
            errorcode: windows_core::HRESULT,
            result: windows_core::Ref<'_, ICoreWebView2Environment>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler_Vtbl {
        pub const fn new<
            Identity: ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler_Impl,
        >() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                errorcode: windows_core::HRESULT,
                result: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&errorcode),
                        core::mem::transmute_copy(&result),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler_ImplVtbl<
        T: ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler_Impl>
        ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler_Vtbl =
            ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler {
        pub fn new<'a, T: ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap { vtable : & ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler_ImplVtbl:: < T >::VTABLE as * const _ as * const _ , this :this as * const _ as * const _ } ;
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2CursorChangedEventHandler,
        ICoreWebView2CursorChangedEventHandler_Vtbl
    );
    impl ICoreWebView2CursorChangedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2CompositionController>,
            P1: windows_core::Param<windows_core::IUnknown>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2CursorChangedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2CursorChangedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2CompositionController>,
            args: windows_core::Ref<'_, windows_core::IUnknown>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2CursorChangedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2CursorChangedEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2CursorChangedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CursorChangedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2CursorChangedEventHandler_ImplVtbl<
        T: ICoreWebView2CursorChangedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2CursorChangedEventHandler_Impl>
        ICoreWebView2CursorChangedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2CursorChangedEventHandler_Vtbl =
            ICoreWebView2CursorChangedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2CursorChangedEventHandler {
        pub fn new<'a, T: ICoreWebView2CursorChangedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2CursorChangedEventHandler_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2CustomItemSelectedEventHandler,
        ICoreWebView2CustomItemSelectedEventHandler_Vtbl
    );
    impl ICoreWebView2CustomItemSelectedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2ContextMenuItem>,
            P1: windows_core::Param<windows_core::IUnknown>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2CustomItemSelectedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2CustomItemSelectedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2ContextMenuItem>,
            args: windows_core::Ref<'_, windows_core::IUnknown>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2CustomItemSelectedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2CustomItemSelectedEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2CustomItemSelectedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CustomItemSelectedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2CustomItemSelectedEventHandler_ImplVtbl<
        T: ICoreWebView2CustomItemSelectedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2CustomItemSelectedEventHandler_Impl>
        ICoreWebView2CustomItemSelectedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2CustomItemSelectedEventHandler_Vtbl =
            ICoreWebView2CustomItemSelectedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2CustomItemSelectedEventHandler {
        pub fn new<'a, T: ICoreWebView2CustomItemSelectedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2CustomItemSelectedEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2CustomSchemeRegistration,
        ICoreWebView2CustomSchemeRegistration_Vtbl
    );
    impl ICoreWebView2CustomSchemeRegistration {
        pub unsafe fn SchemeName<P0>(&self, schemename: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).SchemeName)(
                    windows_core::Interface::as_raw(self),
                    schemename.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn TreatAsSecure(&self, treatassecure: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).TreatAsSecure)(
                    windows_core::Interface::as_raw(self),
                    treatassecure.into(),
                )
                .ok()
            }
        }
        pub unsafe fn TreatAsSecure2(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).TreatAsSecure2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn GetAllowedOrigins<P1>(
            &self,
            allowedoriginscount: u32,
            allowedorigins: P1,
        ) -> windows_core::Result<()>
        where
            P1: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetAllowedOrigins)(
                    windows_core::Interface::as_raw(self),
                    allowedoriginscount,
                    allowedorigins.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn SetAllowedOrigins<P1>(
            &self,
            allowedoriginscount: u32,
            allowedorigins: P1,
        ) -> windows_core::Result<()>
        where
            P1: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).SetAllowedOrigins)(
                    windows_core::Interface::as_raw(self),
                    allowedoriginscount,
                    allowedorigins.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn HasAuthorityComponent(
            &self,
            hasauthoritycomponent: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).HasAuthorityComponent)(
                    windows_core::Interface::as_raw(self),
                    hasauthoritycomponent.into(),
                )
                .ok()
            }
        }
        pub unsafe fn HasAuthorityComponent2(
            &self,
            hasauthoritycomponent: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).HasAuthorityComponent2)(
                    windows_core::Interface::as_raw(self),
                    hasauthoritycomponent.into(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2CustomSchemeRegistration_Vtbl {
        pub SchemeName: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub TreatAsSecure: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub TreatAsSecure2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub GetAllowedOrigins: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub SetAllowedOrigins: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub HasAuthorityComponent: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub HasAuthorityComponent2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2CustomSchemeRegistration_Impl {
        fn SchemeName(&self, schemename: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn TreatAsSecure(&self, treatassecure: windows_core::BOOL) -> windows_core::Result<()>;
        fn TreatAsSecure2(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn GetAllowedOrigins(
            &self,
            allowedoriginscount: u32,
            allowedorigins: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
        fn SetAllowedOrigins(
            &self,
            allowedoriginscount: u32,
            allowedorigins: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
        fn HasAuthorityComponent(
            &self,
            hasauthoritycomponent: windows_core::BOOL,
        ) -> windows_core::Result<()>;
        fn HasAuthorityComponent2(
            &self,
            hasauthoritycomponent: windows_core::BOOL,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2CustomSchemeRegistration_Vtbl {
        pub const fn new<Identity: ICoreWebView2CustomSchemeRegistration_Impl>() -> Self {
            unsafe extern "system" fn SchemeName<
                Identity: ICoreWebView2CustomSchemeRegistration_Impl,
            >(
                this: *mut core::ffi::c_void,
                schemename: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CustomSchemeRegistration_Impl::SchemeName(
                        this,
                        core::mem::transmute(&schemename),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn TreatAsSecure<
                Identity: ICoreWebView2CustomSchemeRegistration_Impl,
            >(
                this: *mut core::ffi::c_void,
                treatassecure: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CustomSchemeRegistration_Impl::TreatAsSecure(
                        this,
                        core::mem::transmute_copy(&treatassecure),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn TreatAsSecure2<
                Identity: ICoreWebView2CustomSchemeRegistration_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CustomSchemeRegistration_Impl::TreatAsSecure2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn GetAllowedOrigins<
                Identity: ICoreWebView2CustomSchemeRegistration_Impl,
            >(
                this: *mut core::ffi::c_void,
                allowedoriginscount: u32,
                allowedorigins: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CustomSchemeRegistration_Impl::GetAllowedOrigins(
                        this,
                        core::mem::transmute_copy(&allowedoriginscount),
                        core::mem::transmute(&allowedorigins),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn SetAllowedOrigins<
                Identity: ICoreWebView2CustomSchemeRegistration_Impl,
            >(
                this: *mut core::ffi::c_void,
                allowedoriginscount: u32,
                allowedorigins: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CustomSchemeRegistration_Impl::SetAllowedOrigins(
                        this,
                        core::mem::transmute_copy(&allowedoriginscount),
                        core::mem::transmute(&allowedorigins),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn HasAuthorityComponent<
                Identity: ICoreWebView2CustomSchemeRegistration_Impl,
            >(
                this: *mut core::ffi::c_void,
                hasauthoritycomponent: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CustomSchemeRegistration_Impl::HasAuthorityComponent(
                        this,
                        core::mem::transmute_copy(&hasauthoritycomponent),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn HasAuthorityComponent2<
                Identity: ICoreWebView2CustomSchemeRegistration_Impl,
            >(
                this: *mut core::ffi::c_void,
                hasauthoritycomponent: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2CustomSchemeRegistration_Impl::HasAuthorityComponent2(
                        this,
                        core::mem::transmute_copy(&hasauthoritycomponent),
                    )
                    .into()
                }
            }
            Self {
                SchemeName: SchemeName::<Identity>,
                TreatAsSecure: TreatAsSecure::<Identity>,
                TreatAsSecure2: TreatAsSecure2::<Identity>,
                GetAllowedOrigins: GetAllowedOrigins::<Identity>,
                SetAllowedOrigins: SetAllowedOrigins::<Identity>,
                HasAuthorityComponent: HasAuthorityComponent::<Identity>,
                HasAuthorityComponent2: HasAuthorityComponent2::<Identity>,
            }
        }
    }
    struct ICoreWebView2CustomSchemeRegistration_ImplVtbl<T: ICoreWebView2CustomSchemeRegistration_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2CustomSchemeRegistration_Impl>
        ICoreWebView2CustomSchemeRegistration_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2CustomSchemeRegistration_Vtbl =
            ICoreWebView2CustomSchemeRegistration_Vtbl::new::<T>();
    }
    impl ICoreWebView2CustomSchemeRegistration {
        pub fn new<'a, T: ICoreWebView2CustomSchemeRegistration_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2CustomSchemeRegistration_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2DOMContentLoadedEventArgs,
        ICoreWebView2DOMContentLoadedEventArgs_Vtbl
    );
    impl ICoreWebView2DOMContentLoadedEventArgs {
        pub unsafe fn NavigationId(&self, value: u64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).NavigationId)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2DOMContentLoadedEventArgs_Vtbl {
        pub NavigationId:
            unsafe extern "system" fn(*mut core::ffi::c_void, u64) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2DOMContentLoadedEventArgs_Impl {
        fn NavigationId(&self, value: u64) -> windows_core::Result<()>;
    }
    impl ICoreWebView2DOMContentLoadedEventArgs_Vtbl {
        pub const fn new<Identity: ICoreWebView2DOMContentLoadedEventArgs_Impl>() -> Self {
            unsafe extern "system" fn NavigationId<
                Identity: ICoreWebView2DOMContentLoadedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: u64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DOMContentLoadedEventArgs_Impl::NavigationId(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                NavigationId: NavigationId::<Identity>,
            }
        }
    }
    struct ICoreWebView2DOMContentLoadedEventArgs_ImplVtbl<
        T: ICoreWebView2DOMContentLoadedEventArgs_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2DOMContentLoadedEventArgs_Impl>
        ICoreWebView2DOMContentLoadedEventArgs_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2DOMContentLoadedEventArgs_Vtbl =
            ICoreWebView2DOMContentLoadedEventArgs_Vtbl::new::<T>();
    }
    impl ICoreWebView2DOMContentLoadedEventArgs {
        pub fn new<'a, T: ICoreWebView2DOMContentLoadedEventArgs_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2DOMContentLoadedEventArgs_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2DOMContentLoadedEventHandler,
        ICoreWebView2DOMContentLoadedEventHandler_Vtbl
    );
    impl ICoreWebView2DOMContentLoadedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
            P1: windows_core::Param<ICoreWebView2DOMContentLoadedEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2DOMContentLoadedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2DOMContentLoadedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2>,
            args: windows_core::Ref<'_, ICoreWebView2DOMContentLoadedEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2DOMContentLoadedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2DOMContentLoadedEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2DOMContentLoadedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DOMContentLoadedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2DOMContentLoadedEventHandler_ImplVtbl<
        T: ICoreWebView2DOMContentLoadedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2DOMContentLoadedEventHandler_Impl>
        ICoreWebView2DOMContentLoadedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2DOMContentLoadedEventHandler_Vtbl =
            ICoreWebView2DOMContentLoadedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2DOMContentLoadedEventHandler {
        pub fn new<'a, T: ICoreWebView2DOMContentLoadedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2DOMContentLoadedEventHandler_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Deferral, ICoreWebView2Deferral_Vtbl);
    impl ICoreWebView2Deferral {
        pub unsafe fn Complete(&self) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Complete)(windows_core::Interface::as_raw(
                    self,
                ))
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Deferral_Vtbl {
        pub Complete: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Deferral_Impl {
        fn Complete(&self) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Deferral_Vtbl {
        pub const fn new<Identity: ICoreWebView2Deferral_Impl>() -> Self {
            unsafe extern "system" fn Complete<Identity: ICoreWebView2Deferral_Impl>(
                this: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Deferral_Impl::Complete(this).into()
                }
            }
            Self {
                Complete: Complete::<Identity>,
            }
        }
    }
    struct ICoreWebView2Deferral_ImplVtbl<T: ICoreWebView2Deferral_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Deferral_Impl> ICoreWebView2Deferral_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Deferral_Vtbl = ICoreWebView2Deferral_Vtbl::new::<T>();
    }
    impl ICoreWebView2Deferral {
        pub fn new<'a, T: ICoreWebView2Deferral_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Deferral_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2DevToolsProtocolEventReceivedEventArgs,
        ICoreWebView2DevToolsProtocolEventReceivedEventArgs_Vtbl
    );
    impl ICoreWebView2DevToolsProtocolEventReceivedEventArgs {
        pub unsafe fn ParameterObjectAsJson<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ParameterObjectAsJson)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2DevToolsProtocolEventReceivedEventArgs_Vtbl {
        pub ParameterObjectAsJson: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2DevToolsProtocolEventReceivedEventArgs_Impl {
        fn ParameterObjectAsJson(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
    }
    impl ICoreWebView2DevToolsProtocolEventReceivedEventArgs_Vtbl {
        pub const fn new<Identity: ICoreWebView2DevToolsProtocolEventReceivedEventArgs_Impl>(
        ) -> Self {
            unsafe extern "system" fn ParameterObjectAsJson<
                Identity: ICoreWebView2DevToolsProtocolEventReceivedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DevToolsProtocolEventReceivedEventArgs_Impl::ParameterObjectAsJson(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            Self {
                ParameterObjectAsJson: ParameterObjectAsJson::<Identity>,
            }
        }
    }
    struct ICoreWebView2DevToolsProtocolEventReceivedEventArgs_ImplVtbl<
        T: ICoreWebView2DevToolsProtocolEventReceivedEventArgs_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2DevToolsProtocolEventReceivedEventArgs_Impl>
        ICoreWebView2DevToolsProtocolEventReceivedEventArgs_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2DevToolsProtocolEventReceivedEventArgs_Vtbl =
            ICoreWebView2DevToolsProtocolEventReceivedEventArgs_Vtbl::new::<T>();
    }
    impl ICoreWebView2DevToolsProtocolEventReceivedEventArgs {
        pub fn new<'a, T: ICoreWebView2DevToolsProtocolEventReceivedEventArgs_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2DevToolsProtocolEventReceivedEventArgs_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2DevToolsProtocolEventReceivedEventArgs2,
        ICoreWebView2DevToolsProtocolEventReceivedEventArgs2_Vtbl
    );
    impl ICoreWebView2DevToolsProtocolEventReceivedEventArgs2 {
        pub unsafe fn SessionId<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).SessionId)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2DevToolsProtocolEventReceivedEventArgs2_Vtbl {
        pub SessionId: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2DevToolsProtocolEventReceivedEventArgs2_Impl {
        fn SessionId(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
    }
    impl ICoreWebView2DevToolsProtocolEventReceivedEventArgs2_Vtbl {
        pub const fn new<Identity: ICoreWebView2DevToolsProtocolEventReceivedEventArgs2_Impl>(
        ) -> Self {
            unsafe extern "system" fn SessionId<
                Identity: ICoreWebView2DevToolsProtocolEventReceivedEventArgs2_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DevToolsProtocolEventReceivedEventArgs2_Impl::SessionId(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            Self {
                SessionId: SessionId::<Identity>,
            }
        }
    }
    struct ICoreWebView2DevToolsProtocolEventReceivedEventArgs2_ImplVtbl<
        T: ICoreWebView2DevToolsProtocolEventReceivedEventArgs2_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2DevToolsProtocolEventReceivedEventArgs2_Impl>
        ICoreWebView2DevToolsProtocolEventReceivedEventArgs2_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2DevToolsProtocolEventReceivedEventArgs2_Vtbl =
            ICoreWebView2DevToolsProtocolEventReceivedEventArgs2_Vtbl::new::<T>();
    }
    impl ICoreWebView2DevToolsProtocolEventReceivedEventArgs2 {
        pub fn new<'a, T: ICoreWebView2DevToolsProtocolEventReceivedEventArgs2_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2DevToolsProtocolEventReceivedEventArgs2_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2DevToolsProtocolEventReceivedEventHandler,
        ICoreWebView2DevToolsProtocolEventReceivedEventHandler_Vtbl
    );
    impl ICoreWebView2DevToolsProtocolEventReceivedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
            P1: windows_core::Param<ICoreWebView2DevToolsProtocolEventReceivedEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2DevToolsProtocolEventReceivedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2DevToolsProtocolEventReceivedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2>,
            args: windows_core::Ref<'_, ICoreWebView2DevToolsProtocolEventReceivedEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2DevToolsProtocolEventReceivedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2DevToolsProtocolEventReceivedEventHandler_Impl>(
        ) -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2DevToolsProtocolEventReceivedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DevToolsProtocolEventReceivedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2DevToolsProtocolEventReceivedEventHandler_ImplVtbl<
        T: ICoreWebView2DevToolsProtocolEventReceivedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2DevToolsProtocolEventReceivedEventHandler_Impl>
        ICoreWebView2DevToolsProtocolEventReceivedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2DevToolsProtocolEventReceivedEventHandler_Vtbl =
            ICoreWebView2DevToolsProtocolEventReceivedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2DevToolsProtocolEventReceivedEventHandler {
        pub fn new<'a, T: ICoreWebView2DevToolsProtocolEventReceivedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable:
                    &ICoreWebView2DevToolsProtocolEventReceivedEventHandler_ImplVtbl::<T>::VTABLE
                        as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2DevToolsProtocolEventReceiver,
        ICoreWebView2DevToolsProtocolEventReceiver_Vtbl
    );
    impl ICoreWebView2DevToolsProtocolEventReceiver {
        pub unsafe fn add_DevToolsProtocolEventReceived<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2DevToolsProtocolEventReceivedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_DevToolsProtocolEventReceived)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_DevToolsProtocolEventReceived(
            &self,
            token: i64,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_DevToolsProtocolEventReceived)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2DevToolsProtocolEventReceiver_Vtbl {
        pub add_DevToolsProtocolEventReceived: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        )
            -> windows_core::HRESULT,
        pub remove_DevToolsProtocolEventReceived:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2DevToolsProtocolEventReceiver_Impl {
        fn add_DevToolsProtocolEventReceived(
            &self,
            eventhandler: windows_core::Ref<
                '_,
                ICoreWebView2DevToolsProtocolEventReceivedEventHandler,
            >,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_DevToolsProtocolEventReceived(&self, token: i64) -> windows_core::Result<()>;
    }
    impl ICoreWebView2DevToolsProtocolEventReceiver_Vtbl {
        pub const fn new<Identity: ICoreWebView2DevToolsProtocolEventReceiver_Impl>() -> Self {
            unsafe extern "system" fn add_DevToolsProtocolEventReceived<
                Identity: ICoreWebView2DevToolsProtocolEventReceiver_Impl,
            >(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DevToolsProtocolEventReceiver_Impl:: add_DevToolsProtocolEventReceived ( this , core::mem::transmute_copy ( & eventhandler ) , core::mem::transmute_copy ( & token ) , ) . into ( )
                }
            }
            unsafe extern "system" fn remove_DevToolsProtocolEventReceived<
                Identity: ICoreWebView2DevToolsProtocolEventReceiver_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DevToolsProtocolEventReceiver_Impl:: remove_DevToolsProtocolEventReceived ( this , core::mem::transmute_copy ( & token ) , ) . into ( )
                }
            }
            Self {
                add_DevToolsProtocolEventReceived: add_DevToolsProtocolEventReceived::<Identity>,
                remove_DevToolsProtocolEventReceived: remove_DevToolsProtocolEventReceived::<
                    Identity,
                >,
            }
        }
    }
    struct ICoreWebView2DevToolsProtocolEventReceiver_ImplVtbl<
        T: ICoreWebView2DevToolsProtocolEventReceiver_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2DevToolsProtocolEventReceiver_Impl>
        ICoreWebView2DevToolsProtocolEventReceiver_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2DevToolsProtocolEventReceiver_Vtbl =
            ICoreWebView2DevToolsProtocolEventReceiver_Vtbl::new::<T>();
    }
    impl ICoreWebView2DevToolsProtocolEventReceiver {
        pub fn new<'a, T: ICoreWebView2DevToolsProtocolEventReceiver_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2DevToolsProtocolEventReceiver_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2DocumentTitleChangedEventHandler,
        ICoreWebView2DocumentTitleChangedEventHandler_Vtbl
    );
    impl ICoreWebView2DocumentTitleChangedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
            P1: windows_core::Param<windows_core::IUnknown>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2DocumentTitleChangedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2DocumentTitleChangedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2>,
            args: windows_core::Ref<'_, windows_core::IUnknown>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2DocumentTitleChangedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2DocumentTitleChangedEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2DocumentTitleChangedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DocumentTitleChangedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2DocumentTitleChangedEventHandler_ImplVtbl<
        T: ICoreWebView2DocumentTitleChangedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2DocumentTitleChangedEventHandler_Impl>
        ICoreWebView2DocumentTitleChangedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2DocumentTitleChangedEventHandler_Vtbl =
            ICoreWebView2DocumentTitleChangedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2DocumentTitleChangedEventHandler {
        pub fn new<'a, T: ICoreWebView2DocumentTitleChangedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2DocumentTitleChangedEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2DownloadOperation,
        ICoreWebView2DownloadOperation_Vtbl
    );
    impl ICoreWebView2DownloadOperation {
        pub unsafe fn add_BytesReceivedChanged<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2BytesReceivedChangedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_BytesReceivedChanged)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_BytesReceivedChanged(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_BytesReceivedChanged)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn add_EstimatedEndTimeChanged<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2EstimatedEndTimeChangedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_EstimatedEndTimeChanged)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_EstimatedEndTimeChanged(
            &self,
            token: i64,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_EstimatedEndTimeChanged)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn add_StateChanged<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2StateChangedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_StateChanged)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_StateChanged(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_StateChanged)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn Uri<P0>(&self, uri: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Uri)(
                    windows_core::Interface::as_raw(self),
                    uri.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn ContentDisposition<P0>(
            &self,
            contentdisposition: P0,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ContentDisposition)(
                    windows_core::Interface::as_raw(self),
                    contentdisposition.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn MimeType<P0>(&self, mimetype: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).MimeType)(
                    windows_core::Interface::as_raw(self),
                    mimetype.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn TotalBytesToReceive(
            &self,
            totalbytestoreceive: i64,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).TotalBytesToReceive)(
                    windows_core::Interface::as_raw(self),
                    totalbytestoreceive,
                )
                .ok()
            }
        }
        pub unsafe fn BytesReceived(&self, bytesreceived: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).BytesReceived)(
                    windows_core::Interface::as_raw(self),
                    bytesreceived,
                )
                .ok()
            }
        }
        pub unsafe fn EstimatedEndTime<P0>(&self, estimatedendtime: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).EstimatedEndTime)(
                    windows_core::Interface::as_raw(self),
                    estimatedendtime.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn ResultFilePath<P0>(&self, resultfilepath: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ResultFilePath)(
                    windows_core::Interface::as_raw(self),
                    resultfilepath.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn State(
            &self,
            downloadstate: COREWEBVIEW2_DOWNLOAD_STATE,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).State)(
                    windows_core::Interface::as_raw(self),
                    downloadstate,
                )
                .ok()
            }
        }
        pub unsafe fn InterruptReason(
            &self,
            interruptreason: COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).InterruptReason)(
                    windows_core::Interface::as_raw(self),
                    interruptreason,
                )
                .ok()
            }
        }
        pub unsafe fn Cancel(&self) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Cancel)(windows_core::Interface::as_raw(
                    self,
                ))
                .ok()
            }
        }
        pub unsafe fn Pause(&self) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Pause)(windows_core::Interface::as_raw(self))
                    .ok()
            }
        }
        pub unsafe fn Resume(&self) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Resume)(windows_core::Interface::as_raw(
                    self,
                ))
                .ok()
            }
        }
        pub unsafe fn CanResume(&self, canresume: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).CanResume)(
                    windows_core::Interface::as_raw(self),
                    canresume.into(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2DownloadOperation_Vtbl {
        pub add_BytesReceivedChanged: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_BytesReceivedChanged:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub add_EstimatedEndTimeChanged: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        )
            -> windows_core::HRESULT,
        pub remove_EstimatedEndTimeChanged:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub add_StateChanged: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_StateChanged:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub Uri: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub ContentDisposition: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub MimeType: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub TotalBytesToReceive:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub BytesReceived:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub EstimatedEndTime: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub ResultFilePath: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub State: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_DOWNLOAD_STATE,
        ) -> windows_core::HRESULT,
        pub InterruptReason: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON,
        ) -> windows_core::HRESULT,
        pub Cancel: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub Pause: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub Resume: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub CanResume: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2DownloadOperation_Impl {
        fn add_BytesReceivedChanged(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2BytesReceivedChangedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_BytesReceivedChanged(&self, token: i64) -> windows_core::Result<()>;
        fn add_EstimatedEndTimeChanged(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2EstimatedEndTimeChangedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_EstimatedEndTimeChanged(&self, token: i64) -> windows_core::Result<()>;
        fn add_StateChanged(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2StateChangedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_StateChanged(&self, token: i64) -> windows_core::Result<()>;
        fn Uri(&self, uri: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn ContentDisposition(
            &self,
            contentdisposition: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
        fn MimeType(&self, mimetype: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn TotalBytesToReceive(&self, totalbytestoreceive: i64) -> windows_core::Result<()>;
        fn BytesReceived(&self, bytesreceived: i64) -> windows_core::Result<()>;
        fn EstimatedEndTime(
            &self,
            estimatedendtime: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
        fn ResultFilePath(&self, resultfilepath: &windows_core::PCWSTR)
            -> windows_core::Result<()>;
        fn State(&self, downloadstate: COREWEBVIEW2_DOWNLOAD_STATE) -> windows_core::Result<()>;
        fn InterruptReason(
            &self,
            interruptreason: COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON,
        ) -> windows_core::Result<()>;
        fn Cancel(&self) -> windows_core::Result<()>;
        fn Pause(&self) -> windows_core::Result<()>;
        fn Resume(&self) -> windows_core::Result<()>;
        fn CanResume(&self, canresume: windows_core::BOOL) -> windows_core::Result<()>;
    }
    impl ICoreWebView2DownloadOperation_Vtbl {
        pub const fn new<Identity: ICoreWebView2DownloadOperation_Impl>() -> Self {
            unsafe extern "system" fn add_BytesReceivedChanged<
                Identity: ICoreWebView2DownloadOperation_Impl,
            >(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DownloadOperation_Impl::add_BytesReceivedChanged(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_BytesReceivedChanged<
                Identity: ICoreWebView2DownloadOperation_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DownloadOperation_Impl::remove_BytesReceivedChanged(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn add_EstimatedEndTimeChanged<
                Identity: ICoreWebView2DownloadOperation_Impl,
            >(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DownloadOperation_Impl::add_EstimatedEndTimeChanged(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_EstimatedEndTimeChanged<
                Identity: ICoreWebView2DownloadOperation_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DownloadOperation_Impl::remove_EstimatedEndTimeChanged(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn add_StateChanged<
                Identity: ICoreWebView2DownloadOperation_Impl,
            >(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DownloadOperation_Impl::add_StateChanged(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_StateChanged<
                Identity: ICoreWebView2DownloadOperation_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DownloadOperation_Impl::remove_StateChanged(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Uri<Identity: ICoreWebView2DownloadOperation_Impl>(
                this: *mut core::ffi::c_void,
                uri: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DownloadOperation_Impl::Uri(this, core::mem::transmute(&uri))
                        .into()
                }
            }
            unsafe extern "system" fn ContentDisposition<
                Identity: ICoreWebView2DownloadOperation_Impl,
            >(
                this: *mut core::ffi::c_void,
                contentdisposition: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DownloadOperation_Impl::ContentDisposition(
                        this,
                        core::mem::transmute(&contentdisposition),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn MimeType<Identity: ICoreWebView2DownloadOperation_Impl>(
                this: *mut core::ffi::c_void,
                mimetype: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DownloadOperation_Impl::MimeType(
                        this,
                        core::mem::transmute(&mimetype),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn TotalBytesToReceive<
                Identity: ICoreWebView2DownloadOperation_Impl,
            >(
                this: *mut core::ffi::c_void,
                totalbytestoreceive: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DownloadOperation_Impl::TotalBytesToReceive(
                        this,
                        core::mem::transmute_copy(&totalbytestoreceive),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn BytesReceived<
                Identity: ICoreWebView2DownloadOperation_Impl,
            >(
                this: *mut core::ffi::c_void,
                bytesreceived: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DownloadOperation_Impl::BytesReceived(
                        this,
                        core::mem::transmute_copy(&bytesreceived),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn EstimatedEndTime<
                Identity: ICoreWebView2DownloadOperation_Impl,
            >(
                this: *mut core::ffi::c_void,
                estimatedendtime: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DownloadOperation_Impl::EstimatedEndTime(
                        this,
                        core::mem::transmute(&estimatedendtime),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ResultFilePath<
                Identity: ICoreWebView2DownloadOperation_Impl,
            >(
                this: *mut core::ffi::c_void,
                resultfilepath: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DownloadOperation_Impl::ResultFilePath(
                        this,
                        core::mem::transmute(&resultfilepath),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn State<Identity: ICoreWebView2DownloadOperation_Impl>(
                this: *mut core::ffi::c_void,
                downloadstate: COREWEBVIEW2_DOWNLOAD_STATE,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DownloadOperation_Impl::State(
                        this,
                        core::mem::transmute_copy(&downloadstate),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn InterruptReason<
                Identity: ICoreWebView2DownloadOperation_Impl,
            >(
                this: *mut core::ffi::c_void,
                interruptreason: COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DownloadOperation_Impl::InterruptReason(
                        this,
                        core::mem::transmute_copy(&interruptreason),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Cancel<Identity: ICoreWebView2DownloadOperation_Impl>(
                this: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DownloadOperation_Impl::Cancel(this).into()
                }
            }
            unsafe extern "system" fn Pause<Identity: ICoreWebView2DownloadOperation_Impl>(
                this: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DownloadOperation_Impl::Pause(this).into()
                }
            }
            unsafe extern "system" fn Resume<Identity: ICoreWebView2DownloadOperation_Impl>(
                this: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DownloadOperation_Impl::Resume(this).into()
                }
            }
            unsafe extern "system" fn CanResume<Identity: ICoreWebView2DownloadOperation_Impl>(
                this: *mut core::ffi::c_void,
                canresume: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DownloadOperation_Impl::CanResume(
                        this,
                        core::mem::transmute_copy(&canresume),
                    )
                    .into()
                }
            }
            Self {
                add_BytesReceivedChanged: add_BytesReceivedChanged::<Identity>,
                remove_BytesReceivedChanged: remove_BytesReceivedChanged::<Identity>,
                add_EstimatedEndTimeChanged: add_EstimatedEndTimeChanged::<Identity>,
                remove_EstimatedEndTimeChanged: remove_EstimatedEndTimeChanged::<Identity>,
                add_StateChanged: add_StateChanged::<Identity>,
                remove_StateChanged: remove_StateChanged::<Identity>,
                Uri: Uri::<Identity>,
                ContentDisposition: ContentDisposition::<Identity>,
                MimeType: MimeType::<Identity>,
                TotalBytesToReceive: TotalBytesToReceive::<Identity>,
                BytesReceived: BytesReceived::<Identity>,
                EstimatedEndTime: EstimatedEndTime::<Identity>,
                ResultFilePath: ResultFilePath::<Identity>,
                State: State::<Identity>,
                InterruptReason: InterruptReason::<Identity>,
                Cancel: Cancel::<Identity>,
                Pause: Pause::<Identity>,
                Resume: Resume::<Identity>,
                CanResume: CanResume::<Identity>,
            }
        }
    }
    struct ICoreWebView2DownloadOperation_ImplVtbl<T: ICoreWebView2DownloadOperation_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2DownloadOperation_Impl> ICoreWebView2DownloadOperation_ImplVtbl<T> {
        const VTABLE: ICoreWebView2DownloadOperation_Vtbl =
            ICoreWebView2DownloadOperation_Vtbl::new::<T>();
    }
    impl ICoreWebView2DownloadOperation {
        pub fn new<'a, T: ICoreWebView2DownloadOperation_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2DownloadOperation_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2DownloadStartingEventArgs,
        ICoreWebView2DownloadStartingEventArgs_Vtbl
    );
    impl ICoreWebView2DownloadStartingEventArgs {
        pub unsafe fn DownloadOperation<P0>(
            &self,
            downloadoperation: P0,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2DownloadOperation>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).DownloadOperation)(
                    windows_core::Interface::as_raw(self),
                    downloadoperation.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Cancel(&self, cancel: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Cancel)(
                    windows_core::Interface::as_raw(self),
                    cancel.into(),
                )
                .ok()
            }
        }
        pub unsafe fn Cancel2(&self, cancel: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Cancel2)(
                    windows_core::Interface::as_raw(self),
                    cancel.into(),
                )
                .ok()
            }
        }
        pub unsafe fn ResultFilePath<P0>(&self, resultfilepath: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ResultFilePath)(
                    windows_core::Interface::as_raw(self),
                    resultfilepath.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn ResultFilePath2<P0>(&self, resultfilepath: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ResultFilePath2)(
                    windows_core::Interface::as_raw(self),
                    resultfilepath.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Handled(&self, handled: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Handled)(
                    windows_core::Interface::as_raw(self),
                    handled.into(),
                )
                .ok()
            }
        }
        pub unsafe fn Handled2(&self, handled: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Handled2)(
                    windows_core::Interface::as_raw(self),
                    handled.into(),
                )
                .ok()
            }
        }
        pub unsafe fn GetDeferral<P0>(&self, deferral: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Deferral>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetDeferral)(
                    windows_core::Interface::as_raw(self),
                    deferral.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2DownloadStartingEventArgs_Vtbl {
        pub DownloadOperation: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Cancel: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub Cancel2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub ResultFilePath: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub ResultFilePath2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub Handled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub Handled2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub GetDeferral: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2DownloadStartingEventArgs_Impl {
        fn DownloadOperation(
            &self,
            downloadoperation: windows_core::Ref<'_, ICoreWebView2DownloadOperation>,
        ) -> windows_core::Result<()>;
        fn Cancel(&self, cancel: windows_core::BOOL) -> windows_core::Result<()>;
        fn Cancel2(&self, cancel: windows_core::BOOL) -> windows_core::Result<()>;
        fn ResultFilePath(&self, resultfilepath: &windows_core::PCWSTR)
            -> windows_core::Result<()>;
        fn ResultFilePath2(
            &self,
            resultfilepath: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
        fn Handled(&self, handled: windows_core::BOOL) -> windows_core::Result<()>;
        fn Handled2(&self, handled: windows_core::BOOL) -> windows_core::Result<()>;
        fn GetDeferral(
            &self,
            deferral: windows_core::Ref<'_, ICoreWebView2Deferral>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2DownloadStartingEventArgs_Vtbl {
        pub const fn new<Identity: ICoreWebView2DownloadStartingEventArgs_Impl>() -> Self {
            unsafe extern "system" fn DownloadOperation<
                Identity: ICoreWebView2DownloadStartingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                downloadoperation: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DownloadStartingEventArgs_Impl::DownloadOperation(
                        this,
                        core::mem::transmute_copy(&downloadoperation),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Cancel<
                Identity: ICoreWebView2DownloadStartingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                cancel: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DownloadStartingEventArgs_Impl::Cancel(
                        this,
                        core::mem::transmute_copy(&cancel),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Cancel2<
                Identity: ICoreWebView2DownloadStartingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                cancel: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DownloadStartingEventArgs_Impl::Cancel2(
                        this,
                        core::mem::transmute_copy(&cancel),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ResultFilePath<
                Identity: ICoreWebView2DownloadStartingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                resultfilepath: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DownloadStartingEventArgs_Impl::ResultFilePath(
                        this,
                        core::mem::transmute(&resultfilepath),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ResultFilePath2<
                Identity: ICoreWebView2DownloadStartingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                resultfilepath: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DownloadStartingEventArgs_Impl::ResultFilePath2(
                        this,
                        core::mem::transmute(&resultfilepath),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Handled<
                Identity: ICoreWebView2DownloadStartingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                handled: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DownloadStartingEventArgs_Impl::Handled(
                        this,
                        core::mem::transmute_copy(&handled),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Handled2<
                Identity: ICoreWebView2DownloadStartingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                handled: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DownloadStartingEventArgs_Impl::Handled2(
                        this,
                        core::mem::transmute_copy(&handled),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn GetDeferral<
                Identity: ICoreWebView2DownloadStartingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                deferral: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DownloadStartingEventArgs_Impl::GetDeferral(
                        this,
                        core::mem::transmute_copy(&deferral),
                    )
                    .into()
                }
            }
            Self {
                DownloadOperation: DownloadOperation::<Identity>,
                Cancel: Cancel::<Identity>,
                Cancel2: Cancel2::<Identity>,
                ResultFilePath: ResultFilePath::<Identity>,
                ResultFilePath2: ResultFilePath2::<Identity>,
                Handled: Handled::<Identity>,
                Handled2: Handled2::<Identity>,
                GetDeferral: GetDeferral::<Identity>,
            }
        }
    }
    struct ICoreWebView2DownloadStartingEventArgs_ImplVtbl<
        T: ICoreWebView2DownloadStartingEventArgs_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2DownloadStartingEventArgs_Impl>
        ICoreWebView2DownloadStartingEventArgs_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2DownloadStartingEventArgs_Vtbl =
            ICoreWebView2DownloadStartingEventArgs_Vtbl::new::<T>();
    }
    impl ICoreWebView2DownloadStartingEventArgs {
        pub fn new<'a, T: ICoreWebView2DownloadStartingEventArgs_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2DownloadStartingEventArgs_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2DownloadStartingEventHandler,
        ICoreWebView2DownloadStartingEventHandler_Vtbl
    );
    impl ICoreWebView2DownloadStartingEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
            P1: windows_core::Param<ICoreWebView2DownloadStartingEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2DownloadStartingEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2DownloadStartingEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2>,
            args: windows_core::Ref<'_, ICoreWebView2DownloadStartingEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2DownloadStartingEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2DownloadStartingEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2DownloadStartingEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2DownloadStartingEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2DownloadStartingEventHandler_ImplVtbl<
        T: ICoreWebView2DownloadStartingEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2DownloadStartingEventHandler_Impl>
        ICoreWebView2DownloadStartingEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2DownloadStartingEventHandler_Vtbl =
            ICoreWebView2DownloadStartingEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2DownloadStartingEventHandler {
        pub fn new<'a, T: ICoreWebView2DownloadStartingEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2DownloadStartingEventHandler_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Environment, ICoreWebView2Environment_Vtbl);
    impl ICoreWebView2Environment {
        pub unsafe fn BrowserVersionString<P0>(&self, versioninfo: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).BrowserVersionString)(
                    windows_core::Interface::as_raw(self),
                    versioninfo.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn add_NewBrowserVersionAvailable<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2NewBrowserVersionAvailableEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_NewBrowserVersionAvailable)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_NewBrowserVersionAvailable(
            &self,
            token: i64,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_NewBrowserVersionAvailable)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Environment_Vtbl {
        CreateCoreWebView2Controller: usize,
        CreateWebResourceResponse: usize,
        pub BrowserVersionString: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub add_NewBrowserVersionAvailable: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        )
            -> windows_core::HRESULT,
        pub remove_NewBrowserVersionAvailable:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Environment_Impl {
        fn BrowserVersionString(
            &self,
            versioninfo: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
        fn add_NewBrowserVersionAvailable(
            &self,
            eventhandler: windows_core::Ref<
                '_,
                ICoreWebView2NewBrowserVersionAvailableEventHandler,
            >,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_NewBrowserVersionAvailable(&self, token: i64) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Environment_Vtbl {
        pub const fn new<Identity: ICoreWebView2Environment_Impl>() -> Self {
            unsafe extern "system" fn BrowserVersionString<
                Identity: ICoreWebView2Environment_Impl,
            >(
                this: *mut core::ffi::c_void,
                versioninfo: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Environment_Impl::BrowserVersionString(
                        this,
                        core::mem::transmute(&versioninfo),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn add_NewBrowserVersionAvailable<
                Identity: ICoreWebView2Environment_Impl,
            >(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Environment_Impl::add_NewBrowserVersionAvailable(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_NewBrowserVersionAvailable<
                Identity: ICoreWebView2Environment_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Environment_Impl::remove_NewBrowserVersionAvailable(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            Self {
                CreateCoreWebView2Controller: 0,
                CreateWebResourceResponse: 0,
                BrowserVersionString: BrowserVersionString::<Identity>,
                add_NewBrowserVersionAvailable: add_NewBrowserVersionAvailable::<Identity>,
                remove_NewBrowserVersionAvailable: remove_NewBrowserVersionAvailable::<Identity>,
            }
        }
    }
    struct ICoreWebView2Environment_ImplVtbl<T: ICoreWebView2Environment_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Environment_Impl> ICoreWebView2Environment_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Environment_Vtbl = ICoreWebView2Environment_Vtbl::new::<T>();
    }
    impl ICoreWebView2Environment {
        pub fn new<'a, T: ICoreWebView2Environment_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Environment_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2Environment10,
        ICoreWebView2Environment10_Vtbl
    );
    impl ICoreWebView2Environment10 {
        pub unsafe fn CreateCoreWebView2ControllerOptions<P0>(
            &self,
            value: P0,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2ControllerOptions>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).CreateCoreWebView2ControllerOptions)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Environment10_Vtbl {
        pub CreateCoreWebView2ControllerOptions: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        )
            -> windows_core::HRESULT,
        CreateCoreWebView2ControllerWithOptions: usize,
        CreateCoreWebView2CompositionControllerWithOptions: usize,
    }
    pub trait ICoreWebView2Environment10_Impl {
        fn CreateCoreWebView2ControllerOptions(
            &self,
            value: windows_core::Ref<'_, ICoreWebView2ControllerOptions>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Environment10_Vtbl {
        pub const fn new<Identity: ICoreWebView2Environment10_Impl>() -> Self {
            unsafe extern "system" fn CreateCoreWebView2ControllerOptions<
                Identity: ICoreWebView2Environment10_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Environment10_Impl::CreateCoreWebView2ControllerOptions(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                CreateCoreWebView2ControllerOptions: CreateCoreWebView2ControllerOptions::<Identity>,
                CreateCoreWebView2ControllerWithOptions: 0,
                CreateCoreWebView2CompositionControllerWithOptions: 0,
            }
        }
    }
    struct ICoreWebView2Environment10_ImplVtbl<T: ICoreWebView2Environment10_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Environment10_Impl> ICoreWebView2Environment10_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Environment10_Vtbl = ICoreWebView2Environment10_Vtbl::new::<T>();
    }
    impl ICoreWebView2Environment10 {
        pub fn new<'a, T: ICoreWebView2Environment10_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Environment10_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2Environment11,
        ICoreWebView2Environment11_Vtbl
    );
    impl ICoreWebView2Environment11 {
        pub unsafe fn FailureReportFolderPath<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).FailureReportFolderPath)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Environment11_Vtbl {
        pub FailureReportFolderPath: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Environment11_Impl {
        fn FailureReportFolderPath(&self, value: &windows_core::PCWSTR)
            -> windows_core::Result<()>;
    }
    impl ICoreWebView2Environment11_Vtbl {
        pub const fn new<Identity: ICoreWebView2Environment11_Impl>() -> Self {
            unsafe extern "system" fn FailureReportFolderPath<
                Identity: ICoreWebView2Environment11_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Environment11_Impl::FailureReportFolderPath(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            Self {
                FailureReportFolderPath: FailureReportFolderPath::<Identity>,
            }
        }
    }
    struct ICoreWebView2Environment11_ImplVtbl<T: ICoreWebView2Environment11_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Environment11_Impl> ICoreWebView2Environment11_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Environment11_Vtbl = ICoreWebView2Environment11_Vtbl::new::<T>();
    }
    impl ICoreWebView2Environment11 {
        pub fn new<'a, T: ICoreWebView2Environment11_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Environment11_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2Environment12,
        ICoreWebView2Environment12_Vtbl
    );
    impl ICoreWebView2Environment12 {
        pub unsafe fn CreateSharedBuffer<P1>(
            &self,
            size: u64,
            value: P1,
        ) -> windows_core::Result<()>
        where
            P1: windows_core::Param<ICoreWebView2SharedBuffer>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).CreateSharedBuffer)(
                    windows_core::Interface::as_raw(self),
                    size,
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Environment12_Vtbl {
        pub CreateSharedBuffer: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u64,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Environment12_Impl {
        fn CreateSharedBuffer(
            &self,
            size: u64,
            value: windows_core::Ref<'_, ICoreWebView2SharedBuffer>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Environment12_Vtbl {
        pub const fn new<Identity: ICoreWebView2Environment12_Impl>() -> Self {
            unsafe extern "system" fn CreateSharedBuffer<
                Identity: ICoreWebView2Environment12_Impl,
            >(
                this: *mut core::ffi::c_void,
                size: u64,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Environment12_Impl::CreateSharedBuffer(
                        this,
                        core::mem::transmute_copy(&size),
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                CreateSharedBuffer: CreateSharedBuffer::<Identity>,
            }
        }
    }
    struct ICoreWebView2Environment12_ImplVtbl<T: ICoreWebView2Environment12_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Environment12_Impl> ICoreWebView2Environment12_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Environment12_Vtbl = ICoreWebView2Environment12_Vtbl::new::<T>();
    }
    impl ICoreWebView2Environment12 {
        pub fn new<'a, T: ICoreWebView2Environment12_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Environment12_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2Environment13,
        ICoreWebView2Environment13_Vtbl
    );
    impl ICoreWebView2Environment13 {
        pub unsafe fn GetProcessExtendedInfos<P0>(&self, handler: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2GetProcessExtendedInfosCompletedHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetProcessExtendedInfos)(
                    windows_core::Interface::as_raw(self),
                    handler.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Environment13_Vtbl {
        pub GetProcessExtendedInfos: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Environment13_Impl {
        fn GetProcessExtendedInfos(
            &self,
            handler: windows_core::Ref<'_, ICoreWebView2GetProcessExtendedInfosCompletedHandler>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Environment13_Vtbl {
        pub const fn new<Identity: ICoreWebView2Environment13_Impl>() -> Self {
            unsafe extern "system" fn GetProcessExtendedInfos<
                Identity: ICoreWebView2Environment13_Impl,
            >(
                this: *mut core::ffi::c_void,
                handler: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Environment13_Impl::GetProcessExtendedInfos(
                        this,
                        core::mem::transmute_copy(&handler),
                    )
                    .into()
                }
            }
            Self {
                GetProcessExtendedInfos: GetProcessExtendedInfos::<Identity>,
            }
        }
    }
    struct ICoreWebView2Environment13_ImplVtbl<T: ICoreWebView2Environment13_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Environment13_Impl> ICoreWebView2Environment13_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Environment13_Vtbl = ICoreWebView2Environment13_Vtbl::new::<T>();
    }
    impl ICoreWebView2Environment13 {
        pub fn new<'a, T: ICoreWebView2Environment13_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Environment13_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2Environment14,
        ICoreWebView2Environment14_Vtbl
    );
    impl ICoreWebView2Environment14 {
        pub unsafe fn CreateWebFileSystemFileHandle<P0, P2>(
            &self,
            path: P0,
            permission: COREWEBVIEW2_FILE_SYSTEM_HANDLE_PERMISSION,
            value: P2,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
            P2: windows_core::Param<ICoreWebView2FileSystemHandle>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).CreateWebFileSystemFileHandle)(
                    windows_core::Interface::as_raw(self),
                    path.param().abi(),
                    permission,
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn CreateWebFileSystemDirectoryHandle<P0, P2>(
            &self,
            path: P0,
            permission: COREWEBVIEW2_FILE_SYSTEM_HANDLE_PERMISSION,
            value: P2,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
            P2: windows_core::Param<ICoreWebView2FileSystemHandle>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).CreateWebFileSystemDirectoryHandle)(
                    windows_core::Interface::as_raw(self),
                    path.param().abi(),
                    permission,
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn CreateObjectCollection<P1, P2>(
            &self,
            length: u32,
            items: P1,
            objectcollection: P2,
        ) -> windows_core::Result<()>
        where
            P1: windows_core::Param<windows_core::IUnknown>,
            P2: windows_core::Param<ICoreWebView2ObjectCollection>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).CreateObjectCollection)(
                    windows_core::Interface::as_raw(self),
                    length,
                    items.param().abi(),
                    objectcollection.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Environment14_Vtbl {
        pub CreateWebFileSystemFileHandle: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            COREWEBVIEW2_FILE_SYSTEM_HANDLE_PERMISSION,
            *mut core::ffi::c_void,
        )
            -> windows_core::HRESULT,
        pub CreateWebFileSystemDirectoryHandle: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            COREWEBVIEW2_FILE_SYSTEM_HANDLE_PERMISSION,
            *mut core::ffi::c_void,
        )
            -> windows_core::HRESULT,
        pub CreateObjectCollection: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Environment14_Impl {
        fn CreateWebFileSystemFileHandle(
            &self,
            path: &windows_core::PCWSTR,
            permission: COREWEBVIEW2_FILE_SYSTEM_HANDLE_PERMISSION,
            value: windows_core::Ref<'_, ICoreWebView2FileSystemHandle>,
        ) -> windows_core::Result<()>;
        fn CreateWebFileSystemDirectoryHandle(
            &self,
            path: &windows_core::PCWSTR,
            permission: COREWEBVIEW2_FILE_SYSTEM_HANDLE_PERMISSION,
            value: windows_core::Ref<'_, ICoreWebView2FileSystemHandle>,
        ) -> windows_core::Result<()>;
        fn CreateObjectCollection(
            &self,
            length: u32,
            items: windows_core::Ref<'_, windows_core::IUnknown>,
            objectcollection: windows_core::Ref<'_, ICoreWebView2ObjectCollection>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Environment14_Vtbl {
        pub const fn new<Identity: ICoreWebView2Environment14_Impl>() -> Self {
            unsafe extern "system" fn CreateWebFileSystemFileHandle<
                Identity: ICoreWebView2Environment14_Impl,
            >(
                this: *mut core::ffi::c_void,
                path: windows_core::PCWSTR,
                permission: COREWEBVIEW2_FILE_SYSTEM_HANDLE_PERMISSION,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Environment14_Impl::CreateWebFileSystemFileHandle(
                        this,
                        core::mem::transmute(&path),
                        core::mem::transmute_copy(&permission),
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn CreateWebFileSystemDirectoryHandle<
                Identity: ICoreWebView2Environment14_Impl,
            >(
                this: *mut core::ffi::c_void,
                path: windows_core::PCWSTR,
                permission: COREWEBVIEW2_FILE_SYSTEM_HANDLE_PERMISSION,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Environment14_Impl::CreateWebFileSystemDirectoryHandle(
                        this,
                        core::mem::transmute(&path),
                        core::mem::transmute_copy(&permission),
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn CreateObjectCollection<
                Identity: ICoreWebView2Environment14_Impl,
            >(
                this: *mut core::ffi::c_void,
                length: u32,
                items: *mut core::ffi::c_void,
                objectcollection: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Environment14_Impl::CreateObjectCollection(
                        this,
                        core::mem::transmute_copy(&length),
                        core::mem::transmute_copy(&items),
                        core::mem::transmute_copy(&objectcollection),
                    )
                    .into()
                }
            }
            Self {
                CreateWebFileSystemFileHandle: CreateWebFileSystemFileHandle::<Identity>,
                CreateWebFileSystemDirectoryHandle: CreateWebFileSystemDirectoryHandle::<Identity>,
                CreateObjectCollection: CreateObjectCollection::<Identity>,
            }
        }
    }
    struct ICoreWebView2Environment14_ImplVtbl<T: ICoreWebView2Environment14_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Environment14_Impl> ICoreWebView2Environment14_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Environment14_Vtbl = ICoreWebView2Environment14_Vtbl::new::<T>();
    }
    impl ICoreWebView2Environment14 {
        pub fn new<'a, T: ICoreWebView2Environment14_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Environment14_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Environment2, ICoreWebView2Environment2_Vtbl);
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Environment2_Vtbl {
        CreateWebResourceRequest: usize,
    }
    pub trait ICoreWebView2Environment2_Impl {}
    impl ICoreWebView2Environment2_Vtbl {
        pub const fn new<Identity: ICoreWebView2Environment2_Impl>() -> Self {
            Self {
                CreateWebResourceRequest: 0,
            }
        }
    }
    struct ICoreWebView2Environment2_ImplVtbl<T: ICoreWebView2Environment2_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Environment2_Impl> ICoreWebView2Environment2_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Environment2_Vtbl = ICoreWebView2Environment2_Vtbl::new::<T>();
    }
    impl ICoreWebView2Environment2 {
        pub fn new<'a, T: ICoreWebView2Environment2_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Environment2_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Environment3, ICoreWebView2Environment3_Vtbl);
    impl ICoreWebView2Environment3 {
        pub unsafe fn CreateCoreWebView2PointerInfo<P0>(
            &self,
            value: P0,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2PointerInfo>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).CreateCoreWebView2PointerInfo)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Environment3_Vtbl {
        CreateCoreWebView2CompositionController: usize,
        pub CreateCoreWebView2PointerInfo: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        )
            -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Environment3_Impl {
        fn CreateCoreWebView2PointerInfo(
            &self,
            value: windows_core::Ref<'_, ICoreWebView2PointerInfo>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Environment3_Vtbl {
        pub const fn new<Identity: ICoreWebView2Environment3_Impl>() -> Self {
            unsafe extern "system" fn CreateCoreWebView2PointerInfo<
                Identity: ICoreWebView2Environment3_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Environment3_Impl::CreateCoreWebView2PointerInfo(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                CreateCoreWebView2CompositionController: 0,
                CreateCoreWebView2PointerInfo: CreateCoreWebView2PointerInfo::<Identity>,
            }
        }
    }
    struct ICoreWebView2Environment3_ImplVtbl<T: ICoreWebView2Environment3_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Environment3_Impl> ICoreWebView2Environment3_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Environment3_Vtbl = ICoreWebView2Environment3_Vtbl::new::<T>();
    }
    impl ICoreWebView2Environment3 {
        pub fn new<'a, T: ICoreWebView2Environment3_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Environment3_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Environment4, ICoreWebView2Environment4_Vtbl);
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Environment4_Vtbl {
        GetAutomationProviderForWindow: usize,
    }
    pub trait ICoreWebView2Environment4_Impl {}
    impl ICoreWebView2Environment4_Vtbl {
        pub const fn new<Identity: ICoreWebView2Environment4_Impl>() -> Self {
            Self {
                GetAutomationProviderForWindow: 0,
            }
        }
    }
    struct ICoreWebView2Environment4_ImplVtbl<T: ICoreWebView2Environment4_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Environment4_Impl> ICoreWebView2Environment4_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Environment4_Vtbl = ICoreWebView2Environment4_Vtbl::new::<T>();
    }
    impl ICoreWebView2Environment4 {
        pub fn new<'a, T: ICoreWebView2Environment4_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Environment4_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Environment5, ICoreWebView2Environment5_Vtbl);
    impl ICoreWebView2Environment5 {
        pub unsafe fn add_BrowserProcessExited<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2BrowserProcessExitedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_BrowserProcessExited)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_BrowserProcessExited(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_BrowserProcessExited)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Environment5_Vtbl {
        pub add_BrowserProcessExited: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_BrowserProcessExited:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Environment5_Impl {
        fn add_BrowserProcessExited(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2BrowserProcessExitedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_BrowserProcessExited(&self, token: i64) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Environment5_Vtbl {
        pub const fn new<Identity: ICoreWebView2Environment5_Impl>() -> Self {
            unsafe extern "system" fn add_BrowserProcessExited<
                Identity: ICoreWebView2Environment5_Impl,
            >(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Environment5_Impl::add_BrowserProcessExited(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_BrowserProcessExited<
                Identity: ICoreWebView2Environment5_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Environment5_Impl::remove_BrowserProcessExited(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            Self {
                add_BrowserProcessExited: add_BrowserProcessExited::<Identity>,
                remove_BrowserProcessExited: remove_BrowserProcessExited::<Identity>,
            }
        }
    }
    struct ICoreWebView2Environment5_ImplVtbl<T: ICoreWebView2Environment5_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Environment5_Impl> ICoreWebView2Environment5_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Environment5_Vtbl = ICoreWebView2Environment5_Vtbl::new::<T>();
    }
    impl ICoreWebView2Environment5 {
        pub fn new<'a, T: ICoreWebView2Environment5_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Environment5_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Environment6, ICoreWebView2Environment6_Vtbl);
    impl ICoreWebView2Environment6 {
        pub unsafe fn CreatePrintSettings<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2PrintSettings>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).CreatePrintSettings)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Environment6_Vtbl {
        pub CreatePrintSettings: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Environment6_Impl {
        fn CreatePrintSettings(
            &self,
            value: windows_core::Ref<'_, ICoreWebView2PrintSettings>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Environment6_Vtbl {
        pub const fn new<Identity: ICoreWebView2Environment6_Impl>() -> Self {
            unsafe extern "system" fn CreatePrintSettings<
                Identity: ICoreWebView2Environment6_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Environment6_Impl::CreatePrintSettings(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                CreatePrintSettings: CreatePrintSettings::<Identity>,
            }
        }
    }
    struct ICoreWebView2Environment6_ImplVtbl<T: ICoreWebView2Environment6_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Environment6_Impl> ICoreWebView2Environment6_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Environment6_Vtbl = ICoreWebView2Environment6_Vtbl::new::<T>();
    }
    impl ICoreWebView2Environment6 {
        pub fn new<'a, T: ICoreWebView2Environment6_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Environment6_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Environment7, ICoreWebView2Environment7_Vtbl);
    impl ICoreWebView2Environment7 {
        pub unsafe fn UserDataFolder<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).UserDataFolder)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Environment7_Vtbl {
        pub UserDataFolder: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Environment7_Impl {
        fn UserDataFolder(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Environment7_Vtbl {
        pub const fn new<Identity: ICoreWebView2Environment7_Impl>() -> Self {
            unsafe extern "system" fn UserDataFolder<Identity: ICoreWebView2Environment7_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Environment7_Impl::UserDataFolder(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            Self {
                UserDataFolder: UserDataFolder::<Identity>,
            }
        }
    }
    struct ICoreWebView2Environment7_ImplVtbl<T: ICoreWebView2Environment7_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Environment7_Impl> ICoreWebView2Environment7_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Environment7_Vtbl = ICoreWebView2Environment7_Vtbl::new::<T>();
    }
    impl ICoreWebView2Environment7 {
        pub fn new<'a, T: ICoreWebView2Environment7_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Environment7_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Environment8, ICoreWebView2Environment8_Vtbl);
    impl ICoreWebView2Environment8 {
        pub unsafe fn add_ProcessInfosChanged<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2ProcessInfosChangedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_ProcessInfosChanged)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_ProcessInfosChanged(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_ProcessInfosChanged)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn GetProcessInfos<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2ProcessInfoCollection>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetProcessInfos)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Environment8_Vtbl {
        pub add_ProcessInfosChanged: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_ProcessInfosChanged:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub GetProcessInfos: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Environment8_Impl {
        fn add_ProcessInfosChanged(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2ProcessInfosChangedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_ProcessInfosChanged(&self, token: i64) -> windows_core::Result<()>;
        fn GetProcessInfos(
            &self,
            value: windows_core::Ref<'_, ICoreWebView2ProcessInfoCollection>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Environment8_Vtbl {
        pub const fn new<Identity: ICoreWebView2Environment8_Impl>() -> Self {
            unsafe extern "system" fn add_ProcessInfosChanged<
                Identity: ICoreWebView2Environment8_Impl,
            >(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Environment8_Impl::add_ProcessInfosChanged(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_ProcessInfosChanged<
                Identity: ICoreWebView2Environment8_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Environment8_Impl::remove_ProcessInfosChanged(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn GetProcessInfos<Identity: ICoreWebView2Environment8_Impl>(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Environment8_Impl::GetProcessInfos(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                add_ProcessInfosChanged: add_ProcessInfosChanged::<Identity>,
                remove_ProcessInfosChanged: remove_ProcessInfosChanged::<Identity>,
                GetProcessInfos: GetProcessInfos::<Identity>,
            }
        }
    }
    struct ICoreWebView2Environment8_ImplVtbl<T: ICoreWebView2Environment8_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Environment8_Impl> ICoreWebView2Environment8_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Environment8_Vtbl = ICoreWebView2Environment8_Vtbl::new::<T>();
    }
    impl ICoreWebView2Environment8 {
        pub fn new<'a, T: ICoreWebView2Environment8_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Environment8_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Environment9, ICoreWebView2Environment9_Vtbl);
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Environment9_Vtbl {
        CreateContextMenuItem: usize,
    }
    pub trait ICoreWebView2Environment9_Impl {}
    impl ICoreWebView2Environment9_Vtbl {
        pub const fn new<Identity: ICoreWebView2Environment9_Impl>() -> Self {
            Self {
                CreateContextMenuItem: 0,
            }
        }
    }
    struct ICoreWebView2Environment9_ImplVtbl<T: ICoreWebView2Environment9_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Environment9_Impl> ICoreWebView2Environment9_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Environment9_Vtbl = ICoreWebView2Environment9_Vtbl::new::<T>();
    }
    impl ICoreWebView2Environment9 {
        pub fn new<'a, T: ICoreWebView2Environment9_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Environment9_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2EnvironmentOptions,
        ICoreWebView2EnvironmentOptions_Vtbl
    );
    impl ICoreWebView2EnvironmentOptions {
        pub unsafe fn AdditionalBrowserArguments<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).AdditionalBrowserArguments)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn AdditionalBrowserArguments2<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).AdditionalBrowserArguments2)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Language<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Language)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Language2<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Language2)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn TargetCompatibleBrowserVersion<P0>(
            &self,
            value: P0,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).TargetCompatibleBrowserVersion)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn TargetCompatibleBrowserVersion2<P0>(
            &self,
            value: P0,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).TargetCompatibleBrowserVersion2)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn AllowSingleSignOnUsingOSPrimaryAccount(
            &self,
            allow: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).AllowSingleSignOnUsingOSPrimaryAccount)(
                    windows_core::Interface::as_raw(self),
                    allow.into(),
                )
                .ok()
            }
        }
        pub unsafe fn AllowSingleSignOnUsingOSPrimaryAccount2(
            &self,
            allow: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).AllowSingleSignOnUsingOSPrimaryAccount2)(
                    windows_core::Interface::as_raw(self),
                    allow.into(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2EnvironmentOptions_Vtbl {
        pub AdditionalBrowserArguments: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub AdditionalBrowserArguments2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        )
            -> windows_core::HRESULT,
        pub Language: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub Language2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub TargetCompatibleBrowserVersion: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        )
            -> windows_core::HRESULT,
        pub TargetCompatibleBrowserVersion2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        )
            -> windows_core::HRESULT,
        pub AllowSingleSignOnUsingOSPrimaryAccount:
            unsafe extern "system" fn(
                *mut core::ffi::c_void,
                windows_core::BOOL,
            ) -> windows_core::HRESULT,
        pub AllowSingleSignOnUsingOSPrimaryAccount2:
            unsafe extern "system" fn(
                *mut core::ffi::c_void,
                windows_core::BOOL,
            ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2EnvironmentOptions_Impl {
        fn AdditionalBrowserArguments(
            &self,
            value: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
        fn AdditionalBrowserArguments2(
            &self,
            value: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
        fn Language(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn Language2(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn TargetCompatibleBrowserVersion(
            &self,
            value: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
        fn TargetCompatibleBrowserVersion2(
            &self,
            value: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
        fn AllowSingleSignOnUsingOSPrimaryAccount(
            &self,
            allow: windows_core::BOOL,
        ) -> windows_core::Result<()>;
        fn AllowSingleSignOnUsingOSPrimaryAccount2(
            &self,
            allow: windows_core::BOOL,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2EnvironmentOptions_Vtbl {
        pub const fn new<Identity: ICoreWebView2EnvironmentOptions_Impl>() -> Self {
            unsafe extern "system" fn AdditionalBrowserArguments<
                Identity: ICoreWebView2EnvironmentOptions_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2EnvironmentOptions_Impl::AdditionalBrowserArguments(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn AdditionalBrowserArguments2<
                Identity: ICoreWebView2EnvironmentOptions_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2EnvironmentOptions_Impl::AdditionalBrowserArguments2(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Language<Identity: ICoreWebView2EnvironmentOptions_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2EnvironmentOptions_Impl::Language(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Language2<Identity: ICoreWebView2EnvironmentOptions_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2EnvironmentOptions_Impl::Language2(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn TargetCompatibleBrowserVersion<
                Identity: ICoreWebView2EnvironmentOptions_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2EnvironmentOptions_Impl::TargetCompatibleBrowserVersion(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn TargetCompatibleBrowserVersion2<
                Identity: ICoreWebView2EnvironmentOptions_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2EnvironmentOptions_Impl::TargetCompatibleBrowserVersion2(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn AllowSingleSignOnUsingOSPrimaryAccount<
                Identity: ICoreWebView2EnvironmentOptions_Impl,
            >(
                this: *mut core::ffi::c_void,
                allow: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2EnvironmentOptions_Impl::AllowSingleSignOnUsingOSPrimaryAccount(
                        this,
                        core::mem::transmute_copy(&allow),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn AllowSingleSignOnUsingOSPrimaryAccount2<
                Identity: ICoreWebView2EnvironmentOptions_Impl,
            >(
                this: *mut core::ffi::c_void,
                allow: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2EnvironmentOptions_Impl::AllowSingleSignOnUsingOSPrimaryAccount2(
                        this,
                        core::mem::transmute_copy(&allow),
                    )
                    .into()
                }
            }
            Self {
                AdditionalBrowserArguments: AdditionalBrowserArguments::<Identity>,
                AdditionalBrowserArguments2: AdditionalBrowserArguments2::<Identity>,
                Language: Language::<Identity>,
                Language2: Language2::<Identity>,
                TargetCompatibleBrowserVersion: TargetCompatibleBrowserVersion::<Identity>,
                TargetCompatibleBrowserVersion2: TargetCompatibleBrowserVersion2::<Identity>,
                AllowSingleSignOnUsingOSPrimaryAccount: AllowSingleSignOnUsingOSPrimaryAccount::<
                    Identity,
                >,
                AllowSingleSignOnUsingOSPrimaryAccount2: AllowSingleSignOnUsingOSPrimaryAccount2::<
                    Identity,
                >,
            }
        }
    }
    struct ICoreWebView2EnvironmentOptions_ImplVtbl<T: ICoreWebView2EnvironmentOptions_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2EnvironmentOptions_Impl> ICoreWebView2EnvironmentOptions_ImplVtbl<T> {
        const VTABLE: ICoreWebView2EnvironmentOptions_Vtbl =
            ICoreWebView2EnvironmentOptions_Vtbl::new::<T>();
    }
    impl ICoreWebView2EnvironmentOptions {
        pub fn new<'a, T: ICoreWebView2EnvironmentOptions_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2EnvironmentOptions_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2EnvironmentOptions2,
        ICoreWebView2EnvironmentOptions2_Vtbl
    );
    impl ICoreWebView2EnvironmentOptions2 {
        pub unsafe fn ExclusiveUserDataFolderAccess(
            &self,
            value: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ExclusiveUserDataFolderAccess)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn ExclusiveUserDataFolderAccess2(
            &self,
            value: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ExclusiveUserDataFolderAccess2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2EnvironmentOptions2_Vtbl {
        pub ExclusiveUserDataFolderAccess: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        )
            -> windows_core::HRESULT,
        pub ExclusiveUserDataFolderAccess2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        )
            -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2EnvironmentOptions2_Impl {
        fn ExclusiveUserDataFolderAccess(
            &self,
            value: windows_core::BOOL,
        ) -> windows_core::Result<()>;
        fn ExclusiveUserDataFolderAccess2(
            &self,
            value: windows_core::BOOL,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2EnvironmentOptions2_Vtbl {
        pub const fn new<Identity: ICoreWebView2EnvironmentOptions2_Impl>() -> Self {
            unsafe extern "system" fn ExclusiveUserDataFolderAccess<
                Identity: ICoreWebView2EnvironmentOptions2_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2EnvironmentOptions2_Impl::ExclusiveUserDataFolderAccess(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ExclusiveUserDataFolderAccess2<
                Identity: ICoreWebView2EnvironmentOptions2_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2EnvironmentOptions2_Impl::ExclusiveUserDataFolderAccess2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                ExclusiveUserDataFolderAccess: ExclusiveUserDataFolderAccess::<Identity>,
                ExclusiveUserDataFolderAccess2: ExclusiveUserDataFolderAccess2::<Identity>,
            }
        }
    }
    struct ICoreWebView2EnvironmentOptions2_ImplVtbl<T: ICoreWebView2EnvironmentOptions2_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2EnvironmentOptions2_Impl> ICoreWebView2EnvironmentOptions2_ImplVtbl<T> {
        const VTABLE: ICoreWebView2EnvironmentOptions2_Vtbl =
            ICoreWebView2EnvironmentOptions2_Vtbl::new::<T>();
    }
    impl ICoreWebView2EnvironmentOptions2 {
        pub fn new<'a, T: ICoreWebView2EnvironmentOptions2_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2EnvironmentOptions2_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2EnvironmentOptions3,
        ICoreWebView2EnvironmentOptions3_Vtbl
    );
    impl ICoreWebView2EnvironmentOptions3 {
        pub unsafe fn IsCustomCrashReportingEnabled(
            &self,
            value: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsCustomCrashReportingEnabled)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsCustomCrashReportingEnabled2(
            &self,
            value: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsCustomCrashReportingEnabled2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2EnvironmentOptions3_Vtbl {
        pub IsCustomCrashReportingEnabled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        )
            -> windows_core::HRESULT,
        pub IsCustomCrashReportingEnabled2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        )
            -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2EnvironmentOptions3_Impl {
        fn IsCustomCrashReportingEnabled(
            &self,
            value: windows_core::BOOL,
        ) -> windows_core::Result<()>;
        fn IsCustomCrashReportingEnabled2(
            &self,
            value: windows_core::BOOL,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2EnvironmentOptions3_Vtbl {
        pub const fn new<Identity: ICoreWebView2EnvironmentOptions3_Impl>() -> Self {
            unsafe extern "system" fn IsCustomCrashReportingEnabled<
                Identity: ICoreWebView2EnvironmentOptions3_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2EnvironmentOptions3_Impl::IsCustomCrashReportingEnabled(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsCustomCrashReportingEnabled2<
                Identity: ICoreWebView2EnvironmentOptions3_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2EnvironmentOptions3_Impl::IsCustomCrashReportingEnabled2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                IsCustomCrashReportingEnabled: IsCustomCrashReportingEnabled::<Identity>,
                IsCustomCrashReportingEnabled2: IsCustomCrashReportingEnabled2::<Identity>,
            }
        }
    }
    struct ICoreWebView2EnvironmentOptions3_ImplVtbl<T: ICoreWebView2EnvironmentOptions3_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2EnvironmentOptions3_Impl> ICoreWebView2EnvironmentOptions3_ImplVtbl<T> {
        const VTABLE: ICoreWebView2EnvironmentOptions3_Vtbl =
            ICoreWebView2EnvironmentOptions3_Vtbl::new::<T>();
    }
    impl ICoreWebView2EnvironmentOptions3 {
        pub fn new<'a, T: ICoreWebView2EnvironmentOptions3_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2EnvironmentOptions3_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2EnvironmentOptions4,
        ICoreWebView2EnvironmentOptions4_Vtbl
    );
    impl ICoreWebView2EnvironmentOptions4 {
        pub unsafe fn GetCustomSchemeRegistrations<P1>(
            &self,
            count: u32,
            schemeregistrations: P1,
        ) -> windows_core::Result<()>
        where
            P1: windows_core::Param<ICoreWebView2CustomSchemeRegistration>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetCustomSchemeRegistrations)(
                    windows_core::Interface::as_raw(self),
                    count,
                    schemeregistrations.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn SetCustomSchemeRegistrations<P1>(
            &self,
            count: u32,
            schemeregistrations: P1,
        ) -> windows_core::Result<()>
        where
            P1: windows_core::Param<ICoreWebView2CustomSchemeRegistration>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).SetCustomSchemeRegistrations)(
                    windows_core::Interface::as_raw(self),
                    count,
                    schemeregistrations.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2EnvironmentOptions4_Vtbl {
        pub GetCustomSchemeRegistrations: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut core::ffi::c_void,
        )
            -> windows_core::HRESULT,
        pub SetCustomSchemeRegistrations: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut core::ffi::c_void,
        )
            -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2EnvironmentOptions4_Impl {
        fn GetCustomSchemeRegistrations(
            &self,
            count: u32,
            schemeregistrations: windows_core::Ref<'_, ICoreWebView2CustomSchemeRegistration>,
        ) -> windows_core::Result<()>;
        fn SetCustomSchemeRegistrations(
            &self,
            count: u32,
            schemeregistrations: windows_core::Ref<'_, ICoreWebView2CustomSchemeRegistration>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2EnvironmentOptions4_Vtbl {
        pub const fn new<Identity: ICoreWebView2EnvironmentOptions4_Impl>() -> Self {
            unsafe extern "system" fn GetCustomSchemeRegistrations<
                Identity: ICoreWebView2EnvironmentOptions4_Impl,
            >(
                this: *mut core::ffi::c_void,
                count: u32,
                schemeregistrations: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2EnvironmentOptions4_Impl::GetCustomSchemeRegistrations(
                        this,
                        core::mem::transmute_copy(&count),
                        core::mem::transmute_copy(&schemeregistrations),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn SetCustomSchemeRegistrations<
                Identity: ICoreWebView2EnvironmentOptions4_Impl,
            >(
                this: *mut core::ffi::c_void,
                count: u32,
                schemeregistrations: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2EnvironmentOptions4_Impl::SetCustomSchemeRegistrations(
                        this,
                        core::mem::transmute_copy(&count),
                        core::mem::transmute_copy(&schemeregistrations),
                    )
                    .into()
                }
            }
            Self {
                GetCustomSchemeRegistrations: GetCustomSchemeRegistrations::<Identity>,
                SetCustomSchemeRegistrations: SetCustomSchemeRegistrations::<Identity>,
            }
        }
    }
    struct ICoreWebView2EnvironmentOptions4_ImplVtbl<T: ICoreWebView2EnvironmentOptions4_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2EnvironmentOptions4_Impl> ICoreWebView2EnvironmentOptions4_ImplVtbl<T> {
        const VTABLE: ICoreWebView2EnvironmentOptions4_Vtbl =
            ICoreWebView2EnvironmentOptions4_Vtbl::new::<T>();
    }
    impl ICoreWebView2EnvironmentOptions4 {
        pub fn new<'a, T: ICoreWebView2EnvironmentOptions4_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2EnvironmentOptions4_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2EnvironmentOptions5,
        ICoreWebView2EnvironmentOptions5_Vtbl
    );
    impl ICoreWebView2EnvironmentOptions5 {
        pub unsafe fn EnableTrackingPrevention(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).EnableTrackingPrevention)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn EnableTrackingPrevention2(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).EnableTrackingPrevention2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2EnvironmentOptions5_Vtbl {
        pub EnableTrackingPrevention: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub EnableTrackingPrevention2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2EnvironmentOptions5_Impl {
        fn EnableTrackingPrevention(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn EnableTrackingPrevention2(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
    }
    impl ICoreWebView2EnvironmentOptions5_Vtbl {
        pub const fn new<Identity: ICoreWebView2EnvironmentOptions5_Impl>() -> Self {
            unsafe extern "system" fn EnableTrackingPrevention<
                Identity: ICoreWebView2EnvironmentOptions5_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2EnvironmentOptions5_Impl::EnableTrackingPrevention(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn EnableTrackingPrevention2<
                Identity: ICoreWebView2EnvironmentOptions5_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2EnvironmentOptions5_Impl::EnableTrackingPrevention2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                EnableTrackingPrevention: EnableTrackingPrevention::<Identity>,
                EnableTrackingPrevention2: EnableTrackingPrevention2::<Identity>,
            }
        }
    }
    struct ICoreWebView2EnvironmentOptions5_ImplVtbl<T: ICoreWebView2EnvironmentOptions5_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2EnvironmentOptions5_Impl> ICoreWebView2EnvironmentOptions5_ImplVtbl<T> {
        const VTABLE: ICoreWebView2EnvironmentOptions5_Vtbl =
            ICoreWebView2EnvironmentOptions5_Vtbl::new::<T>();
    }
    impl ICoreWebView2EnvironmentOptions5 {
        pub fn new<'a, T: ICoreWebView2EnvironmentOptions5_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2EnvironmentOptions5_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2EnvironmentOptions6,
        ICoreWebView2EnvironmentOptions6_Vtbl
    );
    impl ICoreWebView2EnvironmentOptions6 {
        pub unsafe fn AreBrowserExtensionsEnabled(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).AreBrowserExtensionsEnabled)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn AreBrowserExtensionsEnabled2(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).AreBrowserExtensionsEnabled2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2EnvironmentOptions6_Vtbl {
        pub AreBrowserExtensionsEnabled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        )
            -> windows_core::HRESULT,
        pub AreBrowserExtensionsEnabled2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        )
            -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2EnvironmentOptions6_Impl {
        fn AreBrowserExtensionsEnabled(
            &self,
            value: windows_core::BOOL,
        ) -> windows_core::Result<()>;
        fn AreBrowserExtensionsEnabled2(
            &self,
            value: windows_core::BOOL,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2EnvironmentOptions6_Vtbl {
        pub const fn new<Identity: ICoreWebView2EnvironmentOptions6_Impl>() -> Self {
            unsafe extern "system" fn AreBrowserExtensionsEnabled<
                Identity: ICoreWebView2EnvironmentOptions6_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2EnvironmentOptions6_Impl::AreBrowserExtensionsEnabled(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn AreBrowserExtensionsEnabled2<
                Identity: ICoreWebView2EnvironmentOptions6_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2EnvironmentOptions6_Impl::AreBrowserExtensionsEnabled2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                AreBrowserExtensionsEnabled: AreBrowserExtensionsEnabled::<Identity>,
                AreBrowserExtensionsEnabled2: AreBrowserExtensionsEnabled2::<Identity>,
            }
        }
    }
    struct ICoreWebView2EnvironmentOptions6_ImplVtbl<T: ICoreWebView2EnvironmentOptions6_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2EnvironmentOptions6_Impl> ICoreWebView2EnvironmentOptions6_ImplVtbl<T> {
        const VTABLE: ICoreWebView2EnvironmentOptions6_Vtbl =
            ICoreWebView2EnvironmentOptions6_Vtbl::new::<T>();
    }
    impl ICoreWebView2EnvironmentOptions6 {
        pub fn new<'a, T: ICoreWebView2EnvironmentOptions6_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2EnvironmentOptions6_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2EnvironmentOptions7,
        ICoreWebView2EnvironmentOptions7_Vtbl
    );
    impl ICoreWebView2EnvironmentOptions7 {
        pub unsafe fn ChannelSearchKind(
            &self,
            value: COREWEBVIEW2_CHANNEL_SEARCH_KIND,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ChannelSearchKind)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn ChannelSearchKind2(
            &self,
            value: COREWEBVIEW2_CHANNEL_SEARCH_KIND,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ChannelSearchKind2)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn ReleaseChannels(
            &self,
            value: COREWEBVIEW2_RELEASE_CHANNELS,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ReleaseChannels)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn ReleaseChannels2(
            &self,
            value: COREWEBVIEW2_RELEASE_CHANNELS,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ReleaseChannels2)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2EnvironmentOptions7_Vtbl {
        pub ChannelSearchKind: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_CHANNEL_SEARCH_KIND,
        ) -> windows_core::HRESULT,
        pub ChannelSearchKind2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_CHANNEL_SEARCH_KIND,
        ) -> windows_core::HRESULT,
        pub ReleaseChannels: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_RELEASE_CHANNELS,
        ) -> windows_core::HRESULT,
        pub ReleaseChannels2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_RELEASE_CHANNELS,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2EnvironmentOptions7_Impl {
        fn ChannelSearchKind(
            &self,
            value: COREWEBVIEW2_CHANNEL_SEARCH_KIND,
        ) -> windows_core::Result<()>;
        fn ChannelSearchKind2(
            &self,
            value: COREWEBVIEW2_CHANNEL_SEARCH_KIND,
        ) -> windows_core::Result<()>;
        fn ReleaseChannels(&self, value: COREWEBVIEW2_RELEASE_CHANNELS)
            -> windows_core::Result<()>;
        fn ReleaseChannels2(
            &self,
            value: COREWEBVIEW2_RELEASE_CHANNELS,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2EnvironmentOptions7_Vtbl {
        pub const fn new<Identity: ICoreWebView2EnvironmentOptions7_Impl>() -> Self {
            unsafe extern "system" fn ChannelSearchKind<
                Identity: ICoreWebView2EnvironmentOptions7_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_CHANNEL_SEARCH_KIND,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2EnvironmentOptions7_Impl::ChannelSearchKind(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ChannelSearchKind2<
                Identity: ICoreWebView2EnvironmentOptions7_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_CHANNEL_SEARCH_KIND,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2EnvironmentOptions7_Impl::ChannelSearchKind2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ReleaseChannels<
                Identity: ICoreWebView2EnvironmentOptions7_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_RELEASE_CHANNELS,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2EnvironmentOptions7_Impl::ReleaseChannels(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ReleaseChannels2<
                Identity: ICoreWebView2EnvironmentOptions7_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_RELEASE_CHANNELS,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2EnvironmentOptions7_Impl::ReleaseChannels2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                ChannelSearchKind: ChannelSearchKind::<Identity>,
                ChannelSearchKind2: ChannelSearchKind2::<Identity>,
                ReleaseChannels: ReleaseChannels::<Identity>,
                ReleaseChannels2: ReleaseChannels2::<Identity>,
            }
        }
    }
    struct ICoreWebView2EnvironmentOptions7_ImplVtbl<T: ICoreWebView2EnvironmentOptions7_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2EnvironmentOptions7_Impl> ICoreWebView2EnvironmentOptions7_ImplVtbl<T> {
        const VTABLE: ICoreWebView2EnvironmentOptions7_Vtbl =
            ICoreWebView2EnvironmentOptions7_Vtbl::new::<T>();
    }
    impl ICoreWebView2EnvironmentOptions7 {
        pub fn new<'a, T: ICoreWebView2EnvironmentOptions7_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2EnvironmentOptions7_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2EnvironmentOptions8,
        ICoreWebView2EnvironmentOptions8_Vtbl
    );
    impl ICoreWebView2EnvironmentOptions8 {
        pub unsafe fn ScrollBarStyle(
            &self,
            value: COREWEBVIEW2_SCROLLBAR_STYLE,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ScrollBarStyle)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn ScrollBarStyle2(
            &self,
            value: COREWEBVIEW2_SCROLLBAR_STYLE,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ScrollBarStyle2)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2EnvironmentOptions8_Vtbl {
        pub ScrollBarStyle: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_SCROLLBAR_STYLE,
        ) -> windows_core::HRESULT,
        pub ScrollBarStyle2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_SCROLLBAR_STYLE,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2EnvironmentOptions8_Impl {
        fn ScrollBarStyle(&self, value: COREWEBVIEW2_SCROLLBAR_STYLE) -> windows_core::Result<()>;
        fn ScrollBarStyle2(&self, value: COREWEBVIEW2_SCROLLBAR_STYLE) -> windows_core::Result<()>;
    }
    impl ICoreWebView2EnvironmentOptions8_Vtbl {
        pub const fn new<Identity: ICoreWebView2EnvironmentOptions8_Impl>() -> Self {
            unsafe extern "system" fn ScrollBarStyle<
                Identity: ICoreWebView2EnvironmentOptions8_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_SCROLLBAR_STYLE,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2EnvironmentOptions8_Impl::ScrollBarStyle(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ScrollBarStyle2<
                Identity: ICoreWebView2EnvironmentOptions8_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_SCROLLBAR_STYLE,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2EnvironmentOptions8_Impl::ScrollBarStyle2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                ScrollBarStyle: ScrollBarStyle::<Identity>,
                ScrollBarStyle2: ScrollBarStyle2::<Identity>,
            }
        }
    }
    struct ICoreWebView2EnvironmentOptions8_ImplVtbl<T: ICoreWebView2EnvironmentOptions8_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2EnvironmentOptions8_Impl> ICoreWebView2EnvironmentOptions8_ImplVtbl<T> {
        const VTABLE: ICoreWebView2EnvironmentOptions8_Vtbl =
            ICoreWebView2EnvironmentOptions8_Vtbl::new::<T>();
    }
    impl ICoreWebView2EnvironmentOptions8 {
        pub fn new<'a, T: ICoreWebView2EnvironmentOptions8_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2EnvironmentOptions8_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2EstimatedEndTimeChangedEventHandler,
        ICoreWebView2EstimatedEndTimeChangedEventHandler_Vtbl
    );
    impl ICoreWebView2EstimatedEndTimeChangedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2DownloadOperation>,
            P1: windows_core::Param<windows_core::IUnknown>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2EstimatedEndTimeChangedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2EstimatedEndTimeChangedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2DownloadOperation>,
            args: windows_core::Ref<'_, windows_core::IUnknown>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2EstimatedEndTimeChangedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2EstimatedEndTimeChangedEventHandler_Impl>() -> Self
        {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2EstimatedEndTimeChangedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2EstimatedEndTimeChangedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2EstimatedEndTimeChangedEventHandler_ImplVtbl<
        T: ICoreWebView2EstimatedEndTimeChangedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2EstimatedEndTimeChangedEventHandler_Impl>
        ICoreWebView2EstimatedEndTimeChangedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2EstimatedEndTimeChangedEventHandler_Vtbl =
            ICoreWebView2EstimatedEndTimeChangedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2EstimatedEndTimeChangedEventHandler {
        pub fn new<'a, T: ICoreWebView2EstimatedEndTimeChangedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2EstimatedEndTimeChangedEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ExecuteScriptCompletedHandler,
        ICoreWebView2ExecuteScriptCompletedHandler_Vtbl
    );
    impl ICoreWebView2ExecuteScriptCompletedHandler {
        pub unsafe fn Invoke<P1>(
            &self,
            errorcode: windows_core::HRESULT,
            result: P1,
        ) -> windows_core::Result<()>
        where
            P1: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    errorcode,
                    result.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ExecuteScriptCompletedHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::HRESULT,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ExecuteScriptCompletedHandler_Impl {
        fn Invoke(
            &self,
            errorcode: windows_core::HRESULT,
            result: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ExecuteScriptCompletedHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2ExecuteScriptCompletedHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2ExecuteScriptCompletedHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                errorcode: windows_core::HRESULT,
                result: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ExecuteScriptCompletedHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&errorcode),
                        core::mem::transmute(&result),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2ExecuteScriptCompletedHandler_ImplVtbl<
        T: ICoreWebView2ExecuteScriptCompletedHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2ExecuteScriptCompletedHandler_Impl>
        ICoreWebView2ExecuteScriptCompletedHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2ExecuteScriptCompletedHandler_Vtbl =
            ICoreWebView2ExecuteScriptCompletedHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2ExecuteScriptCompletedHandler {
        pub fn new<'a, T: ICoreWebView2ExecuteScriptCompletedHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ExecuteScriptCompletedHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ExecuteScriptResult,
        ICoreWebView2ExecuteScriptResult_Vtbl
    );
    impl ICoreWebView2ExecuteScriptResult {
        pub unsafe fn Succeeded(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Succeeded)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn ResultAsJson<P0>(&self, jsonresult: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ResultAsJson)(
                    windows_core::Interface::as_raw(self),
                    jsonresult.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn TryGetResultAsString<P0>(
            &self,
            stringresult: P0,
            value: bool,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).TryGetResultAsString)(
                    windows_core::Interface::as_raw(self),
                    stringresult.param().abi(),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn Exception<P0>(&self, exception: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2ScriptException>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Exception)(
                    windows_core::Interface::as_raw(self),
                    exception.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ExecuteScriptResult_Vtbl {
        pub Succeeded: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub ResultAsJson: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub TryGetResultAsString: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub Exception: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ExecuteScriptResult_Impl {
        fn Succeeded(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn ResultAsJson(&self, jsonresult: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn TryGetResultAsString(
            &self,
            stringresult: &windows_core::PCWSTR,
            value: windows_core::BOOL,
        ) -> windows_core::Result<()>;
        fn Exception(
            &self,
            exception: windows_core::Ref<'_, ICoreWebView2ScriptException>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ExecuteScriptResult_Vtbl {
        pub const fn new<Identity: ICoreWebView2ExecuteScriptResult_Impl>() -> Self {
            unsafe extern "system" fn Succeeded<Identity: ICoreWebView2ExecuteScriptResult_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ExecuteScriptResult_Impl::Succeeded(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ResultAsJson<
                Identity: ICoreWebView2ExecuteScriptResult_Impl,
            >(
                this: *mut core::ffi::c_void,
                jsonresult: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ExecuteScriptResult_Impl::ResultAsJson(
                        this,
                        core::mem::transmute(&jsonresult),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn TryGetResultAsString<
                Identity: ICoreWebView2ExecuteScriptResult_Impl,
            >(
                this: *mut core::ffi::c_void,
                stringresult: windows_core::PCWSTR,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ExecuteScriptResult_Impl::TryGetResultAsString(
                        this,
                        core::mem::transmute(&stringresult),
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Exception<Identity: ICoreWebView2ExecuteScriptResult_Impl>(
                this: *mut core::ffi::c_void,
                exception: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ExecuteScriptResult_Impl::Exception(
                        this,
                        core::mem::transmute_copy(&exception),
                    )
                    .into()
                }
            }
            Self {
                Succeeded: Succeeded::<Identity>,
                ResultAsJson: ResultAsJson::<Identity>,
                TryGetResultAsString: TryGetResultAsString::<Identity>,
                Exception: Exception::<Identity>,
            }
        }
    }
    struct ICoreWebView2ExecuteScriptResult_ImplVtbl<T: ICoreWebView2ExecuteScriptResult_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2ExecuteScriptResult_Impl> ICoreWebView2ExecuteScriptResult_ImplVtbl<T> {
        const VTABLE: ICoreWebView2ExecuteScriptResult_Vtbl =
            ICoreWebView2ExecuteScriptResult_Vtbl::new::<T>();
    }
    impl ICoreWebView2ExecuteScriptResult {
        pub fn new<'a, T: ICoreWebView2ExecuteScriptResult_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ExecuteScriptResult_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ExecuteScriptWithResultCompletedHandler,
        ICoreWebView2ExecuteScriptWithResultCompletedHandler_Vtbl
    );
    impl ICoreWebView2ExecuteScriptWithResultCompletedHandler {
        pub unsafe fn Invoke<P1>(
            &self,
            errorcode: windows_core::HRESULT,
            result: P1,
        ) -> windows_core::Result<()>
        where
            P1: windows_core::Param<ICoreWebView2ExecuteScriptResult>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    errorcode,
                    result.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ExecuteScriptWithResultCompletedHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::HRESULT,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ExecuteScriptWithResultCompletedHandler_Impl {
        fn Invoke(
            &self,
            errorcode: windows_core::HRESULT,
            result: windows_core::Ref<'_, ICoreWebView2ExecuteScriptResult>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ExecuteScriptWithResultCompletedHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2ExecuteScriptWithResultCompletedHandler_Impl>(
        ) -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2ExecuteScriptWithResultCompletedHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                errorcode: windows_core::HRESULT,
                result: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ExecuteScriptWithResultCompletedHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&errorcode),
                        core::mem::transmute_copy(&result),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2ExecuteScriptWithResultCompletedHandler_ImplVtbl<
        T: ICoreWebView2ExecuteScriptWithResultCompletedHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2ExecuteScriptWithResultCompletedHandler_Impl>
        ICoreWebView2ExecuteScriptWithResultCompletedHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2ExecuteScriptWithResultCompletedHandler_Vtbl =
            ICoreWebView2ExecuteScriptWithResultCompletedHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2ExecuteScriptWithResultCompletedHandler {
        pub fn new<'a, T: ICoreWebView2ExecuteScriptWithResultCompletedHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ExecuteScriptWithResultCompletedHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2FaviconChangedEventHandler,
        ICoreWebView2FaviconChangedEventHandler_Vtbl
    );
    impl ICoreWebView2FaviconChangedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
            P1: windows_core::Param<windows_core::IUnknown>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2FaviconChangedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2FaviconChangedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2>,
            args: windows_core::Ref<'_, windows_core::IUnknown>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2FaviconChangedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2FaviconChangedEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2FaviconChangedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2FaviconChangedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2FaviconChangedEventHandler_ImplVtbl<
        T: ICoreWebView2FaviconChangedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2FaviconChangedEventHandler_Impl>
        ICoreWebView2FaviconChangedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2FaviconChangedEventHandler_Vtbl =
            ICoreWebView2FaviconChangedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2FaviconChangedEventHandler {
        pub fn new<'a, T: ICoreWebView2FaviconChangedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2FaviconChangedEventHandler_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2File, ICoreWebView2File_Vtbl);
    impl ICoreWebView2File {
        pub unsafe fn Path<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Path)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2File_Vtbl {
        pub Path: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2File_Impl {
        fn Path(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
    }
    impl ICoreWebView2File_Vtbl {
        pub const fn new<Identity: ICoreWebView2File_Impl>() -> Self {
            unsafe extern "system" fn Path<Identity: ICoreWebView2File_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2File_Impl::Path(this, core::mem::transmute(&value)).into()
                }
            }
            Self {
                Path: Path::<Identity>,
            }
        }
    }
    struct ICoreWebView2File_ImplVtbl<T: ICoreWebView2File_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2File_Impl> ICoreWebView2File_ImplVtbl<T> {
        const VTABLE: ICoreWebView2File_Vtbl = ICoreWebView2File_Vtbl::new::<T>();
    }
    impl ICoreWebView2File {
        pub fn new<'a, T: ICoreWebView2File_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2File_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2FileSystemHandle,
        ICoreWebView2FileSystemHandle_Vtbl
    );
    impl ICoreWebView2FileSystemHandle {
        pub unsafe fn Kind(
            &self,
            value: COREWEBVIEW2_FILE_SYSTEM_HANDLE_KIND,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Kind)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn Path<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Path)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Permission(
            &self,
            value: COREWEBVIEW2_FILE_SYSTEM_HANDLE_PERMISSION,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Permission)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2FileSystemHandle_Vtbl {
        pub Kind: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_FILE_SYSTEM_HANDLE_KIND,
        ) -> windows_core::HRESULT,
        pub Path: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub Permission: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_FILE_SYSTEM_HANDLE_PERMISSION,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2FileSystemHandle_Impl {
        fn Kind(&self, value: COREWEBVIEW2_FILE_SYSTEM_HANDLE_KIND) -> windows_core::Result<()>;
        fn Path(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn Permission(
            &self,
            value: COREWEBVIEW2_FILE_SYSTEM_HANDLE_PERMISSION,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2FileSystemHandle_Vtbl {
        pub const fn new<Identity: ICoreWebView2FileSystemHandle_Impl>() -> Self {
            unsafe extern "system" fn Kind<Identity: ICoreWebView2FileSystemHandle_Impl>(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_FILE_SYSTEM_HANDLE_KIND,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2FileSystemHandle_Impl::Kind(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Path<Identity: ICoreWebView2FileSystemHandle_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2FileSystemHandle_Impl::Path(this, core::mem::transmute(&value))
                        .into()
                }
            }
            unsafe extern "system" fn Permission<Identity: ICoreWebView2FileSystemHandle_Impl>(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_FILE_SYSTEM_HANDLE_PERMISSION,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2FileSystemHandle_Impl::Permission(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                Kind: Kind::<Identity>,
                Path: Path::<Identity>,
                Permission: Permission::<Identity>,
            }
        }
    }
    struct ICoreWebView2FileSystemHandle_ImplVtbl<T: ICoreWebView2FileSystemHandle_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2FileSystemHandle_Impl> ICoreWebView2FileSystemHandle_ImplVtbl<T> {
        const VTABLE: ICoreWebView2FileSystemHandle_Vtbl =
            ICoreWebView2FileSystemHandle_Vtbl::new::<T>();
    }
    impl ICoreWebView2FileSystemHandle {
        pub fn new<'a, T: ICoreWebView2FileSystemHandle_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2FileSystemHandle_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2FocusChangedEventHandler,
        ICoreWebView2FocusChangedEventHandler_Vtbl
    );
    impl ICoreWebView2FocusChangedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Controller>,
            P1: windows_core::Param<windows_core::IUnknown>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2FocusChangedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2FocusChangedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2Controller>,
            args: windows_core::Ref<'_, windows_core::IUnknown>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2FocusChangedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2FocusChangedEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2FocusChangedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2FocusChangedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2FocusChangedEventHandler_ImplVtbl<T: ICoreWebView2FocusChangedEventHandler_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2FocusChangedEventHandler_Impl>
        ICoreWebView2FocusChangedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2FocusChangedEventHandler_Vtbl =
            ICoreWebView2FocusChangedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2FocusChangedEventHandler {
        pub fn new<'a, T: ICoreWebView2FocusChangedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2FocusChangedEventHandler_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Frame, ICoreWebView2Frame_Vtbl);
    impl ICoreWebView2Frame {
        pub unsafe fn Name<P0>(&self, name: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Name)(
                    windows_core::Interface::as_raw(self),
                    name.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn add_NameChanged<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2FrameNameChangedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_NameChanged)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_NameChanged(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_NameChanged)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn RemoveHostObjectFromScript<P0>(&self, name: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).RemoveHostObjectFromScript)(
                    windows_core::Interface::as_raw(self),
                    name.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn add_Destroyed<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2FrameDestroyedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_Destroyed)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_Destroyed(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_Destroyed)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn IsDestroyed(&self, destroyed: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsDestroyed)(
                    windows_core::Interface::as_raw(self),
                    destroyed.into(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Frame_Vtbl {
        pub Name: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub add_NameChanged: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_NameChanged:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        AddHostObjectToScriptWithOrigins: usize,
        pub RemoveHostObjectFromScript: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub add_Destroyed: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_Destroyed:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub IsDestroyed: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Frame_Impl {
        fn Name(&self, name: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn add_NameChanged(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2FrameNameChangedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_NameChanged(&self, token: i64) -> windows_core::Result<()>;
        fn RemoveHostObjectFromScript(
            &self,
            name: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
        fn add_Destroyed(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2FrameDestroyedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_Destroyed(&self, token: i64) -> windows_core::Result<()>;
        fn IsDestroyed(&self, destroyed: windows_core::BOOL) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Frame_Vtbl {
        pub const fn new<Identity: ICoreWebView2Frame_Impl>() -> Self {
            unsafe extern "system" fn Name<Identity: ICoreWebView2Frame_Impl>(
                this: *mut core::ffi::c_void,
                name: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Frame_Impl::Name(this, core::mem::transmute(&name)).into()
                }
            }
            unsafe extern "system" fn add_NameChanged<Identity: ICoreWebView2Frame_Impl>(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Frame_Impl::add_NameChanged(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_NameChanged<Identity: ICoreWebView2Frame_Impl>(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Frame_Impl::remove_NameChanged(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn RemoveHostObjectFromScript<
                Identity: ICoreWebView2Frame_Impl,
            >(
                this: *mut core::ffi::c_void,
                name: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Frame_Impl::RemoveHostObjectFromScript(
                        this,
                        core::mem::transmute(&name),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn add_Destroyed<Identity: ICoreWebView2Frame_Impl>(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Frame_Impl::add_Destroyed(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_Destroyed<Identity: ICoreWebView2Frame_Impl>(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Frame_Impl::remove_Destroyed(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsDestroyed<Identity: ICoreWebView2Frame_Impl>(
                this: *mut core::ffi::c_void,
                destroyed: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Frame_Impl::IsDestroyed(
                        this,
                        core::mem::transmute_copy(&destroyed),
                    )
                    .into()
                }
            }
            Self {
                Name: Name::<Identity>,
                add_NameChanged: add_NameChanged::<Identity>,
                remove_NameChanged: remove_NameChanged::<Identity>,
                AddHostObjectToScriptWithOrigins: 0,
                RemoveHostObjectFromScript: RemoveHostObjectFromScript::<Identity>,
                add_Destroyed: add_Destroyed::<Identity>,
                remove_Destroyed: remove_Destroyed::<Identity>,
                IsDestroyed: IsDestroyed::<Identity>,
            }
        }
    }
    struct ICoreWebView2Frame_ImplVtbl<T: ICoreWebView2Frame_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2Frame_Impl> ICoreWebView2Frame_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Frame_Vtbl = ICoreWebView2Frame_Vtbl::new::<T>();
    }
    impl ICoreWebView2Frame {
        pub fn new<'a, T: ICoreWebView2Frame_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Frame_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Frame2, ICoreWebView2Frame2_Vtbl);
    impl ICoreWebView2Frame2 {
        pub unsafe fn add_NavigationStarting<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2FrameNavigationStartingEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_NavigationStarting)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_NavigationStarting(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_NavigationStarting)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn add_ContentLoading<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2FrameContentLoadingEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_ContentLoading)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_ContentLoading(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_ContentLoading)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn add_NavigationCompleted<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2FrameNavigationCompletedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_NavigationCompleted)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_NavigationCompleted(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_NavigationCompleted)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn add_DOMContentLoaded<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2FrameDOMContentLoadedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_DOMContentLoaded)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_DOMContentLoaded(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_DOMContentLoaded)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn ExecuteScript<P0, P1>(
            &self,
            javascript: P0,
            handler: P1,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
            P1: windows_core::Param<ICoreWebView2ExecuteScriptCompletedHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ExecuteScript)(
                    windows_core::Interface::as_raw(self),
                    javascript.param().abi(),
                    handler.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn PostWebMessageAsJson<P0>(
            &self,
            webmessageasjson: P0,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).PostWebMessageAsJson)(
                    windows_core::Interface::as_raw(self),
                    webmessageasjson.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn PostWebMessageAsString<P0>(
            &self,
            webmessageasstring: P0,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).PostWebMessageAsString)(
                    windows_core::Interface::as_raw(self),
                    webmessageasstring.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn add_WebMessageReceived<P0>(
            &self,
            handler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2FrameWebMessageReceivedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_WebMessageReceived)(
                    windows_core::Interface::as_raw(self),
                    handler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_WebMessageReceived(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_WebMessageReceived)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Frame2_Vtbl {
        pub add_NavigationStarting: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_NavigationStarting:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub add_ContentLoading: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_ContentLoading:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub add_NavigationCompleted: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_NavigationCompleted:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub add_DOMContentLoaded: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_DOMContentLoaded:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub ExecuteScript: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub PostWebMessageAsJson: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub PostWebMessageAsString: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub add_WebMessageReceived: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_WebMessageReceived:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Frame2_Impl {
        fn add_NavigationStarting(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2FrameNavigationStartingEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_NavigationStarting(&self, token: i64) -> windows_core::Result<()>;
        fn add_ContentLoading(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2FrameContentLoadingEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_ContentLoading(&self, token: i64) -> windows_core::Result<()>;
        fn add_NavigationCompleted(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2FrameNavigationCompletedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_NavigationCompleted(&self, token: i64) -> windows_core::Result<()>;
        fn add_DOMContentLoaded(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2FrameDOMContentLoadedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_DOMContentLoaded(&self, token: i64) -> windows_core::Result<()>;
        fn ExecuteScript(
            &self,
            javascript: &windows_core::PCWSTR,
            handler: windows_core::Ref<'_, ICoreWebView2ExecuteScriptCompletedHandler>,
        ) -> windows_core::Result<()>;
        fn PostWebMessageAsJson(
            &self,
            webmessageasjson: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
        fn PostWebMessageAsString(
            &self,
            webmessageasstring: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
        fn add_WebMessageReceived(
            &self,
            handler: windows_core::Ref<'_, ICoreWebView2FrameWebMessageReceivedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_WebMessageReceived(&self, token: i64) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Frame2_Vtbl {
        pub const fn new<Identity: ICoreWebView2Frame2_Impl>() -> Self {
            unsafe extern "system" fn add_NavigationStarting<Identity: ICoreWebView2Frame2_Impl>(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Frame2_Impl::add_NavigationStarting(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_NavigationStarting<
                Identity: ICoreWebView2Frame2_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Frame2_Impl::remove_NavigationStarting(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn add_ContentLoading<Identity: ICoreWebView2Frame2_Impl>(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Frame2_Impl::add_ContentLoading(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_ContentLoading<Identity: ICoreWebView2Frame2_Impl>(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Frame2_Impl::remove_ContentLoading(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn add_NavigationCompleted<
                Identity: ICoreWebView2Frame2_Impl,
            >(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Frame2_Impl::add_NavigationCompleted(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_NavigationCompleted<
                Identity: ICoreWebView2Frame2_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Frame2_Impl::remove_NavigationCompleted(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn add_DOMContentLoaded<Identity: ICoreWebView2Frame2_Impl>(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Frame2_Impl::add_DOMContentLoaded(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_DOMContentLoaded<
                Identity: ICoreWebView2Frame2_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Frame2_Impl::remove_DOMContentLoaded(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ExecuteScript<Identity: ICoreWebView2Frame2_Impl>(
                this: *mut core::ffi::c_void,
                javascript: windows_core::PCWSTR,
                handler: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Frame2_Impl::ExecuteScript(
                        this,
                        core::mem::transmute(&javascript),
                        core::mem::transmute_copy(&handler),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PostWebMessageAsJson<Identity: ICoreWebView2Frame2_Impl>(
                this: *mut core::ffi::c_void,
                webmessageasjson: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Frame2_Impl::PostWebMessageAsJson(
                        this,
                        core::mem::transmute(&webmessageasjson),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PostWebMessageAsString<Identity: ICoreWebView2Frame2_Impl>(
                this: *mut core::ffi::c_void,
                webmessageasstring: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Frame2_Impl::PostWebMessageAsString(
                        this,
                        core::mem::transmute(&webmessageasstring),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn add_WebMessageReceived<Identity: ICoreWebView2Frame2_Impl>(
                this: *mut core::ffi::c_void,
                handler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Frame2_Impl::add_WebMessageReceived(
                        this,
                        core::mem::transmute_copy(&handler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_WebMessageReceived<
                Identity: ICoreWebView2Frame2_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Frame2_Impl::remove_WebMessageReceived(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            Self {
                add_NavigationStarting: add_NavigationStarting::<Identity>,
                remove_NavigationStarting: remove_NavigationStarting::<Identity>,
                add_ContentLoading: add_ContentLoading::<Identity>,
                remove_ContentLoading: remove_ContentLoading::<Identity>,
                add_NavigationCompleted: add_NavigationCompleted::<Identity>,
                remove_NavigationCompleted: remove_NavigationCompleted::<Identity>,
                add_DOMContentLoaded: add_DOMContentLoaded::<Identity>,
                remove_DOMContentLoaded: remove_DOMContentLoaded::<Identity>,
                ExecuteScript: ExecuteScript::<Identity>,
                PostWebMessageAsJson: PostWebMessageAsJson::<Identity>,
                PostWebMessageAsString: PostWebMessageAsString::<Identity>,
                add_WebMessageReceived: add_WebMessageReceived::<Identity>,
                remove_WebMessageReceived: remove_WebMessageReceived::<Identity>,
            }
        }
    }
    struct ICoreWebView2Frame2_ImplVtbl<T: ICoreWebView2Frame2_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2Frame2_Impl> ICoreWebView2Frame2_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Frame2_Vtbl = ICoreWebView2Frame2_Vtbl::new::<T>();
    }
    impl ICoreWebView2Frame2 {
        pub fn new<'a, T: ICoreWebView2Frame2_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Frame2_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Frame3, ICoreWebView2Frame3_Vtbl);
    impl ICoreWebView2Frame3 {
        pub unsafe fn add_PermissionRequested<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2FramePermissionRequestedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_PermissionRequested)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_PermissionRequested(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_PermissionRequested)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Frame3_Vtbl {
        pub add_PermissionRequested: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_PermissionRequested:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Frame3_Impl {
        fn add_PermissionRequested(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2FramePermissionRequestedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_PermissionRequested(&self, token: i64) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Frame3_Vtbl {
        pub const fn new<Identity: ICoreWebView2Frame3_Impl>() -> Self {
            unsafe extern "system" fn add_PermissionRequested<
                Identity: ICoreWebView2Frame3_Impl,
            >(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Frame3_Impl::add_PermissionRequested(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_PermissionRequested<
                Identity: ICoreWebView2Frame3_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Frame3_Impl::remove_PermissionRequested(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            Self {
                add_PermissionRequested: add_PermissionRequested::<Identity>,
                remove_PermissionRequested: remove_PermissionRequested::<Identity>,
            }
        }
    }
    struct ICoreWebView2Frame3_ImplVtbl<T: ICoreWebView2Frame3_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2Frame3_Impl> ICoreWebView2Frame3_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Frame3_Vtbl = ICoreWebView2Frame3_Vtbl::new::<T>();
    }
    impl ICoreWebView2Frame3 {
        pub fn new<'a, T: ICoreWebView2Frame3_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Frame3_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Frame4, ICoreWebView2Frame4_Vtbl);
    impl ICoreWebView2Frame4 {
        pub unsafe fn PostSharedBufferToScript<P0, P2>(
            &self,
            sharedbuffer: P0,
            access: COREWEBVIEW2_SHARED_BUFFER_ACCESS,
            additionaldataasjson: P2,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2SharedBuffer>,
            P2: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).PostSharedBufferToScript)(
                    windows_core::Interface::as_raw(self),
                    sharedbuffer.param().abi(),
                    access,
                    additionaldataasjson.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Frame4_Vtbl {
        pub PostSharedBufferToScript: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            COREWEBVIEW2_SHARED_BUFFER_ACCESS,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Frame4_Impl {
        fn PostSharedBufferToScript(
            &self,
            sharedbuffer: windows_core::Ref<'_, ICoreWebView2SharedBuffer>,
            access: COREWEBVIEW2_SHARED_BUFFER_ACCESS,
            additionaldataasjson: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Frame4_Vtbl {
        pub const fn new<Identity: ICoreWebView2Frame4_Impl>() -> Self {
            unsafe extern "system" fn PostSharedBufferToScript<
                Identity: ICoreWebView2Frame4_Impl,
            >(
                this: *mut core::ffi::c_void,
                sharedbuffer: *mut core::ffi::c_void,
                access: COREWEBVIEW2_SHARED_BUFFER_ACCESS,
                additionaldataasjson: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Frame4_Impl::PostSharedBufferToScript(
                        this,
                        core::mem::transmute_copy(&sharedbuffer),
                        core::mem::transmute_copy(&access),
                        core::mem::transmute(&additionaldataasjson),
                    )
                    .into()
                }
            }
            Self {
                PostSharedBufferToScript: PostSharedBufferToScript::<Identity>,
            }
        }
    }
    struct ICoreWebView2Frame4_ImplVtbl<T: ICoreWebView2Frame4_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2Frame4_Impl> ICoreWebView2Frame4_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Frame4_Vtbl = ICoreWebView2Frame4_Vtbl::new::<T>();
    }
    impl ICoreWebView2Frame4 {
        pub fn new<'a, T: ICoreWebView2Frame4_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Frame4_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Frame5, ICoreWebView2Frame5_Vtbl);
    impl ICoreWebView2Frame5 {
        pub unsafe fn FrameId(&self, value: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).FrameId)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Frame5_Vtbl {
        pub FrameId:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Frame5_Impl {
        fn FrameId(&self, value: u32) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Frame5_Vtbl {
        pub const fn new<Identity: ICoreWebView2Frame5_Impl>() -> Self {
            unsafe extern "system" fn FrameId<Identity: ICoreWebView2Frame5_Impl>(
                this: *mut core::ffi::c_void,
                value: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Frame5_Impl::FrameId(this, core::mem::transmute_copy(&value))
                        .into()
                }
            }
            Self {
                FrameId: FrameId::<Identity>,
            }
        }
    }
    struct ICoreWebView2Frame5_ImplVtbl<T: ICoreWebView2Frame5_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2Frame5_Impl> ICoreWebView2Frame5_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Frame5_Vtbl = ICoreWebView2Frame5_Vtbl::new::<T>();
    }
    impl ICoreWebView2Frame5 {
        pub fn new<'a, T: ICoreWebView2Frame5_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Frame5_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Frame6, ICoreWebView2Frame6_Vtbl);
    impl ICoreWebView2Frame6 {
        pub unsafe fn add_ScreenCaptureStarting<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2FrameScreenCaptureStartingEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_ScreenCaptureStarting)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_ScreenCaptureStarting(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_ScreenCaptureStarting)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Frame6_Vtbl {
        pub add_ScreenCaptureStarting: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_ScreenCaptureStarting:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Frame6_Impl {
        fn add_ScreenCaptureStarting(
            &self,
            eventhandler: windows_core::Ref<
                '_,
                ICoreWebView2FrameScreenCaptureStartingEventHandler,
            >,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_ScreenCaptureStarting(&self, token: i64) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Frame6_Vtbl {
        pub const fn new<Identity: ICoreWebView2Frame6_Impl>() -> Self {
            unsafe extern "system" fn add_ScreenCaptureStarting<
                Identity: ICoreWebView2Frame6_Impl,
            >(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Frame6_Impl::add_ScreenCaptureStarting(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_ScreenCaptureStarting<
                Identity: ICoreWebView2Frame6_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Frame6_Impl::remove_ScreenCaptureStarting(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            Self {
                add_ScreenCaptureStarting: add_ScreenCaptureStarting::<Identity>,
                remove_ScreenCaptureStarting: remove_ScreenCaptureStarting::<Identity>,
            }
        }
    }
    struct ICoreWebView2Frame6_ImplVtbl<T: ICoreWebView2Frame6_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2Frame6_Impl> ICoreWebView2Frame6_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Frame6_Vtbl = ICoreWebView2Frame6_Vtbl::new::<T>();
    }
    impl ICoreWebView2Frame6 {
        pub fn new<'a, T: ICoreWebView2Frame6_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Frame6_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Frame7, ICoreWebView2Frame7_Vtbl);
    impl ICoreWebView2Frame7 {
        pub unsafe fn add_FrameCreated<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2FrameChildFrameCreatedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_FrameCreated)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_FrameCreated(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_FrameCreated)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Frame7_Vtbl {
        pub add_FrameCreated: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_FrameCreated:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Frame7_Impl {
        fn add_FrameCreated(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2FrameChildFrameCreatedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_FrameCreated(&self, token: i64) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Frame7_Vtbl {
        pub const fn new<Identity: ICoreWebView2Frame7_Impl>() -> Self {
            unsafe extern "system" fn add_FrameCreated<Identity: ICoreWebView2Frame7_Impl>(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Frame7_Impl::add_FrameCreated(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_FrameCreated<Identity: ICoreWebView2Frame7_Impl>(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Frame7_Impl::remove_FrameCreated(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            Self {
                add_FrameCreated: add_FrameCreated::<Identity>,
                remove_FrameCreated: remove_FrameCreated::<Identity>,
            }
        }
    }
    struct ICoreWebView2Frame7_ImplVtbl<T: ICoreWebView2Frame7_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2Frame7_Impl> ICoreWebView2Frame7_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Frame7_Vtbl = ICoreWebView2Frame7_Vtbl::new::<T>();
    }
    impl ICoreWebView2Frame7 {
        pub fn new<'a, T: ICoreWebView2Frame7_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Frame7_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2FrameChildFrameCreatedEventHandler,
        ICoreWebView2FrameChildFrameCreatedEventHandler_Vtbl
    );
    impl ICoreWebView2FrameChildFrameCreatedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Frame>,
            P1: windows_core::Param<ICoreWebView2FrameCreatedEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2FrameChildFrameCreatedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2FrameChildFrameCreatedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2Frame>,
            args: windows_core::Ref<'_, ICoreWebView2FrameCreatedEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2FrameChildFrameCreatedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2FrameChildFrameCreatedEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2FrameChildFrameCreatedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2FrameChildFrameCreatedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2FrameChildFrameCreatedEventHandler_ImplVtbl<
        T: ICoreWebView2FrameChildFrameCreatedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2FrameChildFrameCreatedEventHandler_Impl>
        ICoreWebView2FrameChildFrameCreatedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2FrameChildFrameCreatedEventHandler_Vtbl =
            ICoreWebView2FrameChildFrameCreatedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2FrameChildFrameCreatedEventHandler {
        pub fn new<'a, T: ICoreWebView2FrameChildFrameCreatedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2FrameChildFrameCreatedEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2FrameContentLoadingEventHandler,
        ICoreWebView2FrameContentLoadingEventHandler_Vtbl
    );
    impl ICoreWebView2FrameContentLoadingEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Frame>,
            P1: windows_core::Param<ICoreWebView2ContentLoadingEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2FrameContentLoadingEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2FrameContentLoadingEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2Frame>,
            args: windows_core::Ref<'_, ICoreWebView2ContentLoadingEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2FrameContentLoadingEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2FrameContentLoadingEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2FrameContentLoadingEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2FrameContentLoadingEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2FrameContentLoadingEventHandler_ImplVtbl<
        T: ICoreWebView2FrameContentLoadingEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2FrameContentLoadingEventHandler_Impl>
        ICoreWebView2FrameContentLoadingEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2FrameContentLoadingEventHandler_Vtbl =
            ICoreWebView2FrameContentLoadingEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2FrameContentLoadingEventHandler {
        pub fn new<'a, T: ICoreWebView2FrameContentLoadingEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2FrameContentLoadingEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2FrameCreatedEventArgs,
        ICoreWebView2FrameCreatedEventArgs_Vtbl
    );
    impl ICoreWebView2FrameCreatedEventArgs {
        pub unsafe fn Frame<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Frame>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Frame)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2FrameCreatedEventArgs_Vtbl {
        pub Frame: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2FrameCreatedEventArgs_Impl {
        fn Frame(
            &self,
            value: windows_core::Ref<'_, ICoreWebView2Frame>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2FrameCreatedEventArgs_Vtbl {
        pub const fn new<Identity: ICoreWebView2FrameCreatedEventArgs_Impl>() -> Self {
            unsafe extern "system" fn Frame<Identity: ICoreWebView2FrameCreatedEventArgs_Impl>(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2FrameCreatedEventArgs_Impl::Frame(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                Frame: Frame::<Identity>,
            }
        }
    }
    struct ICoreWebView2FrameCreatedEventArgs_ImplVtbl<T: ICoreWebView2FrameCreatedEventArgs_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2FrameCreatedEventArgs_Impl> ICoreWebView2FrameCreatedEventArgs_ImplVtbl<T> {
        const VTABLE: ICoreWebView2FrameCreatedEventArgs_Vtbl =
            ICoreWebView2FrameCreatedEventArgs_Vtbl::new::<T>();
    }
    impl ICoreWebView2FrameCreatedEventArgs {
        pub fn new<'a, T: ICoreWebView2FrameCreatedEventArgs_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2FrameCreatedEventArgs_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2FrameCreatedEventHandler,
        ICoreWebView2FrameCreatedEventHandler_Vtbl
    );
    impl ICoreWebView2FrameCreatedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
            P1: windows_core::Param<ICoreWebView2FrameCreatedEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2FrameCreatedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2FrameCreatedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2>,
            args: windows_core::Ref<'_, ICoreWebView2FrameCreatedEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2FrameCreatedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2FrameCreatedEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2FrameCreatedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2FrameCreatedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2FrameCreatedEventHandler_ImplVtbl<T: ICoreWebView2FrameCreatedEventHandler_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2FrameCreatedEventHandler_Impl>
        ICoreWebView2FrameCreatedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2FrameCreatedEventHandler_Vtbl =
            ICoreWebView2FrameCreatedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2FrameCreatedEventHandler {
        pub fn new<'a, T: ICoreWebView2FrameCreatedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2FrameCreatedEventHandler_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2FrameDOMContentLoadedEventHandler,
        ICoreWebView2FrameDOMContentLoadedEventHandler_Vtbl
    );
    impl ICoreWebView2FrameDOMContentLoadedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Frame>,
            P1: windows_core::Param<ICoreWebView2DOMContentLoadedEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2FrameDOMContentLoadedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2FrameDOMContentLoadedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2Frame>,
            args: windows_core::Ref<'_, ICoreWebView2DOMContentLoadedEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2FrameDOMContentLoadedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2FrameDOMContentLoadedEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2FrameDOMContentLoadedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2FrameDOMContentLoadedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2FrameDOMContentLoadedEventHandler_ImplVtbl<
        T: ICoreWebView2FrameDOMContentLoadedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2FrameDOMContentLoadedEventHandler_Impl>
        ICoreWebView2FrameDOMContentLoadedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2FrameDOMContentLoadedEventHandler_Vtbl =
            ICoreWebView2FrameDOMContentLoadedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2FrameDOMContentLoadedEventHandler {
        pub fn new<'a, T: ICoreWebView2FrameDOMContentLoadedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2FrameDOMContentLoadedEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2FrameDestroyedEventHandler,
        ICoreWebView2FrameDestroyedEventHandler_Vtbl
    );
    impl ICoreWebView2FrameDestroyedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Frame>,
            P1: windows_core::Param<windows_core::IUnknown>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2FrameDestroyedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2FrameDestroyedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2Frame>,
            args: windows_core::Ref<'_, windows_core::IUnknown>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2FrameDestroyedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2FrameDestroyedEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2FrameDestroyedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2FrameDestroyedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2FrameDestroyedEventHandler_ImplVtbl<
        T: ICoreWebView2FrameDestroyedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2FrameDestroyedEventHandler_Impl>
        ICoreWebView2FrameDestroyedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2FrameDestroyedEventHandler_Vtbl =
            ICoreWebView2FrameDestroyedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2FrameDestroyedEventHandler {
        pub fn new<'a, T: ICoreWebView2FrameDestroyedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2FrameDestroyedEventHandler_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2FrameInfo, ICoreWebView2FrameInfo_Vtbl);
    impl ICoreWebView2FrameInfo {
        pub unsafe fn Name<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Name)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Source<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Source)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2FrameInfo_Vtbl {
        pub Name: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub Source: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2FrameInfo_Impl {
        fn Name(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn Source(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
    }
    impl ICoreWebView2FrameInfo_Vtbl {
        pub const fn new<Identity: ICoreWebView2FrameInfo_Impl>() -> Self {
            unsafe extern "system" fn Name<Identity: ICoreWebView2FrameInfo_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2FrameInfo_Impl::Name(this, core::mem::transmute(&value)).into()
                }
            }
            unsafe extern "system" fn Source<Identity: ICoreWebView2FrameInfo_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2FrameInfo_Impl::Source(this, core::mem::transmute(&value)).into()
                }
            }
            Self {
                Name: Name::<Identity>,
                Source: Source::<Identity>,
            }
        }
    }
    struct ICoreWebView2FrameInfo_ImplVtbl<T: ICoreWebView2FrameInfo_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2FrameInfo_Impl> ICoreWebView2FrameInfo_ImplVtbl<T> {
        const VTABLE: ICoreWebView2FrameInfo_Vtbl = ICoreWebView2FrameInfo_Vtbl::new::<T>();
    }
    impl ICoreWebView2FrameInfo {
        pub fn new<'a, T: ICoreWebView2FrameInfo_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2FrameInfo_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2FrameInfo2, ICoreWebView2FrameInfo2_Vtbl);
    impl ICoreWebView2FrameInfo2 {
        pub unsafe fn ParentFrameInfo<P0>(&self, frameinfo: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2FrameInfo>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ParentFrameInfo)(
                    windows_core::Interface::as_raw(self),
                    frameinfo.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn FrameId(&self, id: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).FrameId)(
                    windows_core::Interface::as_raw(self),
                    id,
                )
                .ok()
            }
        }
        pub unsafe fn FrameKind(&self, kind: COREWEBVIEW2_FRAME_KIND) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).FrameKind)(
                    windows_core::Interface::as_raw(self),
                    kind,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2FrameInfo2_Vtbl {
        pub ParentFrameInfo: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub FrameId:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub FrameKind: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_FRAME_KIND,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2FrameInfo2_Impl {
        fn ParentFrameInfo(
            &self,
            frameinfo: windows_core::Ref<'_, ICoreWebView2FrameInfo>,
        ) -> windows_core::Result<()>;
        fn FrameId(&self, id: u32) -> windows_core::Result<()>;
        fn FrameKind(&self, kind: COREWEBVIEW2_FRAME_KIND) -> windows_core::Result<()>;
    }
    impl ICoreWebView2FrameInfo2_Vtbl {
        pub const fn new<Identity: ICoreWebView2FrameInfo2_Impl>() -> Self {
            unsafe extern "system" fn ParentFrameInfo<Identity: ICoreWebView2FrameInfo2_Impl>(
                this: *mut core::ffi::c_void,
                frameinfo: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2FrameInfo2_Impl::ParentFrameInfo(
                        this,
                        core::mem::transmute_copy(&frameinfo),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn FrameId<Identity: ICoreWebView2FrameInfo2_Impl>(
                this: *mut core::ffi::c_void,
                id: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2FrameInfo2_Impl::FrameId(this, core::mem::transmute_copy(&id))
                        .into()
                }
            }
            unsafe extern "system" fn FrameKind<Identity: ICoreWebView2FrameInfo2_Impl>(
                this: *mut core::ffi::c_void,
                kind: COREWEBVIEW2_FRAME_KIND,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2FrameInfo2_Impl::FrameKind(this, core::mem::transmute_copy(&kind))
                        .into()
                }
            }
            Self {
                ParentFrameInfo: ParentFrameInfo::<Identity>,
                FrameId: FrameId::<Identity>,
                FrameKind: FrameKind::<Identity>,
            }
        }
    }
    struct ICoreWebView2FrameInfo2_ImplVtbl<T: ICoreWebView2FrameInfo2_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2FrameInfo2_Impl> ICoreWebView2FrameInfo2_ImplVtbl<T> {
        const VTABLE: ICoreWebView2FrameInfo2_Vtbl = ICoreWebView2FrameInfo2_Vtbl::new::<T>();
    }
    impl ICoreWebView2FrameInfo2 {
        pub fn new<'a, T: ICoreWebView2FrameInfo2_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2FrameInfo2_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2FrameInfoCollection,
        ICoreWebView2FrameInfoCollection_Vtbl
    );
    impl ICoreWebView2FrameInfoCollection {
        pub unsafe fn GetIterator<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2FrameInfoCollectionIterator>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetIterator)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2FrameInfoCollection_Vtbl {
        pub GetIterator: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2FrameInfoCollection_Impl {
        fn GetIterator(
            &self,
            value: windows_core::Ref<'_, ICoreWebView2FrameInfoCollectionIterator>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2FrameInfoCollection_Vtbl {
        pub const fn new<Identity: ICoreWebView2FrameInfoCollection_Impl>() -> Self {
            unsafe extern "system" fn GetIterator<
                Identity: ICoreWebView2FrameInfoCollection_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2FrameInfoCollection_Impl::GetIterator(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                GetIterator: GetIterator::<Identity>,
            }
        }
    }
    struct ICoreWebView2FrameInfoCollection_ImplVtbl<T: ICoreWebView2FrameInfoCollection_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2FrameInfoCollection_Impl> ICoreWebView2FrameInfoCollection_ImplVtbl<T> {
        const VTABLE: ICoreWebView2FrameInfoCollection_Vtbl =
            ICoreWebView2FrameInfoCollection_Vtbl::new::<T>();
    }
    impl ICoreWebView2FrameInfoCollection {
        pub fn new<'a, T: ICoreWebView2FrameInfoCollection_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2FrameInfoCollection_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2FrameInfoCollectionIterator,
        ICoreWebView2FrameInfoCollectionIterator_Vtbl
    );
    impl ICoreWebView2FrameInfoCollectionIterator {
        pub unsafe fn HasCurrent(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).HasCurrent)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn GetCurrent<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2FrameInfo>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetCurrent)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn MoveNext(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).MoveNext)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2FrameInfoCollectionIterator_Vtbl {
        pub HasCurrent: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub GetCurrent: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub MoveNext: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2FrameInfoCollectionIterator_Impl {
        fn HasCurrent(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn GetCurrent(
            &self,
            value: windows_core::Ref<'_, ICoreWebView2FrameInfo>,
        ) -> windows_core::Result<()>;
        fn MoveNext(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
    }
    impl ICoreWebView2FrameInfoCollectionIterator_Vtbl {
        pub const fn new<Identity: ICoreWebView2FrameInfoCollectionIterator_Impl>() -> Self {
            unsafe extern "system" fn HasCurrent<
                Identity: ICoreWebView2FrameInfoCollectionIterator_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2FrameInfoCollectionIterator_Impl::HasCurrent(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn GetCurrent<
                Identity: ICoreWebView2FrameInfoCollectionIterator_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2FrameInfoCollectionIterator_Impl::GetCurrent(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn MoveNext<
                Identity: ICoreWebView2FrameInfoCollectionIterator_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2FrameInfoCollectionIterator_Impl::MoveNext(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                HasCurrent: HasCurrent::<Identity>,
                GetCurrent: GetCurrent::<Identity>,
                MoveNext: MoveNext::<Identity>,
            }
        }
    }
    struct ICoreWebView2FrameInfoCollectionIterator_ImplVtbl<
        T: ICoreWebView2FrameInfoCollectionIterator_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2FrameInfoCollectionIterator_Impl>
        ICoreWebView2FrameInfoCollectionIterator_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2FrameInfoCollectionIterator_Vtbl =
            ICoreWebView2FrameInfoCollectionIterator_Vtbl::new::<T>();
    }
    impl ICoreWebView2FrameInfoCollectionIterator {
        pub fn new<'a, T: ICoreWebView2FrameInfoCollectionIterator_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2FrameInfoCollectionIterator_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2FrameNameChangedEventHandler,
        ICoreWebView2FrameNameChangedEventHandler_Vtbl
    );
    impl ICoreWebView2FrameNameChangedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Frame>,
            P1: windows_core::Param<windows_core::IUnknown>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2FrameNameChangedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2FrameNameChangedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2Frame>,
            args: windows_core::Ref<'_, windows_core::IUnknown>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2FrameNameChangedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2FrameNameChangedEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2FrameNameChangedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2FrameNameChangedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2FrameNameChangedEventHandler_ImplVtbl<
        T: ICoreWebView2FrameNameChangedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2FrameNameChangedEventHandler_Impl>
        ICoreWebView2FrameNameChangedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2FrameNameChangedEventHandler_Vtbl =
            ICoreWebView2FrameNameChangedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2FrameNameChangedEventHandler {
        pub fn new<'a, T: ICoreWebView2FrameNameChangedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2FrameNameChangedEventHandler_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2FrameNavigationCompletedEventHandler,
        ICoreWebView2FrameNavigationCompletedEventHandler_Vtbl
    );
    impl ICoreWebView2FrameNavigationCompletedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Frame>,
            P1: windows_core::Param<ICoreWebView2NavigationCompletedEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2FrameNavigationCompletedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2FrameNavigationCompletedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2Frame>,
            args: windows_core::Ref<'_, ICoreWebView2NavigationCompletedEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2FrameNavigationCompletedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2FrameNavigationCompletedEventHandler_Impl>() -> Self
        {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2FrameNavigationCompletedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2FrameNavigationCompletedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2FrameNavigationCompletedEventHandler_ImplVtbl<
        T: ICoreWebView2FrameNavigationCompletedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2FrameNavigationCompletedEventHandler_Impl>
        ICoreWebView2FrameNavigationCompletedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2FrameNavigationCompletedEventHandler_Vtbl =
            ICoreWebView2FrameNavigationCompletedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2FrameNavigationCompletedEventHandler {
        pub fn new<'a, T: ICoreWebView2FrameNavigationCompletedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2FrameNavigationCompletedEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2FrameNavigationStartingEventHandler,
        ICoreWebView2FrameNavigationStartingEventHandler_Vtbl
    );
    impl ICoreWebView2FrameNavigationStartingEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Frame>,
            P1: windows_core::Param<ICoreWebView2NavigationStartingEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2FrameNavigationStartingEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2FrameNavigationStartingEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2Frame>,
            args: windows_core::Ref<'_, ICoreWebView2NavigationStartingEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2FrameNavigationStartingEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2FrameNavigationStartingEventHandler_Impl>() -> Self
        {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2FrameNavigationStartingEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2FrameNavigationStartingEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2FrameNavigationStartingEventHandler_ImplVtbl<
        T: ICoreWebView2FrameNavigationStartingEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2FrameNavigationStartingEventHandler_Impl>
        ICoreWebView2FrameNavigationStartingEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2FrameNavigationStartingEventHandler_Vtbl =
            ICoreWebView2FrameNavigationStartingEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2FrameNavigationStartingEventHandler {
        pub fn new<'a, T: ICoreWebView2FrameNavigationStartingEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2FrameNavigationStartingEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2FramePermissionRequestedEventHandler,
        ICoreWebView2FramePermissionRequestedEventHandler_Vtbl
    );
    impl ICoreWebView2FramePermissionRequestedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Frame>,
            P1: windows_core::Param<ICoreWebView2PermissionRequestedEventArgs2>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2FramePermissionRequestedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2FramePermissionRequestedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2Frame>,
            args: windows_core::Ref<'_, ICoreWebView2PermissionRequestedEventArgs2>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2FramePermissionRequestedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2FramePermissionRequestedEventHandler_Impl>() -> Self
        {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2FramePermissionRequestedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2FramePermissionRequestedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2FramePermissionRequestedEventHandler_ImplVtbl<
        T: ICoreWebView2FramePermissionRequestedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2FramePermissionRequestedEventHandler_Impl>
        ICoreWebView2FramePermissionRequestedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2FramePermissionRequestedEventHandler_Vtbl =
            ICoreWebView2FramePermissionRequestedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2FramePermissionRequestedEventHandler {
        pub fn new<'a, T: ICoreWebView2FramePermissionRequestedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2FramePermissionRequestedEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2FrameScreenCaptureStartingEventHandler,
        ICoreWebView2FrameScreenCaptureStartingEventHandler_Vtbl
    );
    impl ICoreWebView2FrameScreenCaptureStartingEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Frame>,
            P1: windows_core::Param<ICoreWebView2ScreenCaptureStartingEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2FrameScreenCaptureStartingEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2FrameScreenCaptureStartingEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2Frame>,
            args: windows_core::Ref<'_, ICoreWebView2ScreenCaptureStartingEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2FrameScreenCaptureStartingEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2FrameScreenCaptureStartingEventHandler_Impl>(
        ) -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2FrameScreenCaptureStartingEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2FrameScreenCaptureStartingEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2FrameScreenCaptureStartingEventHandler_ImplVtbl<
        T: ICoreWebView2FrameScreenCaptureStartingEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2FrameScreenCaptureStartingEventHandler_Impl>
        ICoreWebView2FrameScreenCaptureStartingEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2FrameScreenCaptureStartingEventHandler_Vtbl =
            ICoreWebView2FrameScreenCaptureStartingEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2FrameScreenCaptureStartingEventHandler {
        pub fn new<'a, T: ICoreWebView2FrameScreenCaptureStartingEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2FrameScreenCaptureStartingEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2FrameWebMessageReceivedEventHandler,
        ICoreWebView2FrameWebMessageReceivedEventHandler_Vtbl
    );
    impl ICoreWebView2FrameWebMessageReceivedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Frame>,
            P1: windows_core::Param<ICoreWebView2WebMessageReceivedEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2FrameWebMessageReceivedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2FrameWebMessageReceivedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2Frame>,
            args: windows_core::Ref<'_, ICoreWebView2WebMessageReceivedEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2FrameWebMessageReceivedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2FrameWebMessageReceivedEventHandler_Impl>() -> Self
        {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2FrameWebMessageReceivedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2FrameWebMessageReceivedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2FrameWebMessageReceivedEventHandler_ImplVtbl<
        T: ICoreWebView2FrameWebMessageReceivedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2FrameWebMessageReceivedEventHandler_Impl>
        ICoreWebView2FrameWebMessageReceivedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2FrameWebMessageReceivedEventHandler_Vtbl =
            ICoreWebView2FrameWebMessageReceivedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2FrameWebMessageReceivedEventHandler {
        pub fn new<'a, T: ICoreWebView2FrameWebMessageReceivedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2FrameWebMessageReceivedEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2GetCookiesCompletedHandler,
        ICoreWebView2GetCookiesCompletedHandler_Vtbl
    );
    impl ICoreWebView2GetCookiesCompletedHandler {
        pub unsafe fn Invoke<P1>(
            &self,
            errorcode: windows_core::HRESULT,
            result: P1,
        ) -> windows_core::Result<()>
        where
            P1: windows_core::Param<ICoreWebView2CookieList>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    errorcode,
                    result.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2GetCookiesCompletedHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::HRESULT,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2GetCookiesCompletedHandler_Impl {
        fn Invoke(
            &self,
            errorcode: windows_core::HRESULT,
            result: windows_core::Ref<'_, ICoreWebView2CookieList>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2GetCookiesCompletedHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2GetCookiesCompletedHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2GetCookiesCompletedHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                errorcode: windows_core::HRESULT,
                result: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2GetCookiesCompletedHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&errorcode),
                        core::mem::transmute_copy(&result),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2GetCookiesCompletedHandler_ImplVtbl<
        T: ICoreWebView2GetCookiesCompletedHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2GetCookiesCompletedHandler_Impl>
        ICoreWebView2GetCookiesCompletedHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2GetCookiesCompletedHandler_Vtbl =
            ICoreWebView2GetCookiesCompletedHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2GetCookiesCompletedHandler {
        pub fn new<'a, T: ICoreWebView2GetCookiesCompletedHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2GetCookiesCompletedHandler_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2GetFaviconCompletedHandler,
        ICoreWebView2GetFaviconCompletedHandler_Vtbl
    );
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2GetFaviconCompletedHandler_Vtbl {
        Invoke: usize,
    }
    pub trait ICoreWebView2GetFaviconCompletedHandler_Impl {}
    impl ICoreWebView2GetFaviconCompletedHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2GetFaviconCompletedHandler_Impl>() -> Self {
            Self { Invoke: 0 }
        }
    }
    struct ICoreWebView2GetFaviconCompletedHandler_ImplVtbl<
        T: ICoreWebView2GetFaviconCompletedHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2GetFaviconCompletedHandler_Impl>
        ICoreWebView2GetFaviconCompletedHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2GetFaviconCompletedHandler_Vtbl =
            ICoreWebView2GetFaviconCompletedHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2GetFaviconCompletedHandler {
        pub fn new<'a, T: ICoreWebView2GetFaviconCompletedHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2GetFaviconCompletedHandler_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2GetNonDefaultPermissionSettingsCompletedHandler,
        ICoreWebView2GetNonDefaultPermissionSettingsCompletedHandler_Vtbl
    );
    impl ICoreWebView2GetNonDefaultPermissionSettingsCompletedHandler {
        pub unsafe fn Invoke<P1>(
            &self,
            errorcode: windows_core::HRESULT,
            result: P1,
        ) -> windows_core::Result<()>
        where
            P1: windows_core::Param<ICoreWebView2PermissionSettingCollectionView>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    errorcode,
                    result.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2GetNonDefaultPermissionSettingsCompletedHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::HRESULT,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2GetNonDefaultPermissionSettingsCompletedHandler_Impl {
        fn Invoke(
            &self,
            errorcode: windows_core::HRESULT,
            result: windows_core::Ref<'_, ICoreWebView2PermissionSettingCollectionView>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2GetNonDefaultPermissionSettingsCompletedHandler_Vtbl {
        pub const fn new<
            Identity: ICoreWebView2GetNonDefaultPermissionSettingsCompletedHandler_Impl,
        >() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2GetNonDefaultPermissionSettingsCompletedHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                errorcode: windows_core::HRESULT,
                result: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2GetNonDefaultPermissionSettingsCompletedHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&errorcode),
                        core::mem::transmute_copy(&result),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2GetNonDefaultPermissionSettingsCompletedHandler_ImplVtbl<
        T: ICoreWebView2GetNonDefaultPermissionSettingsCompletedHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2GetNonDefaultPermissionSettingsCompletedHandler_Impl>
        ICoreWebView2GetNonDefaultPermissionSettingsCompletedHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2GetNonDefaultPermissionSettingsCompletedHandler_Vtbl =
            ICoreWebView2GetNonDefaultPermissionSettingsCompletedHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2GetNonDefaultPermissionSettingsCompletedHandler {
        pub fn new<'a, T: ICoreWebView2GetNonDefaultPermissionSettingsCompletedHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this =
                windows_core::ScopedHeap {
                    vtable: &ICoreWebView2GetNonDefaultPermissionSettingsCompletedHandler_ImplVtbl::<
                        T,
                    >::VTABLE as *const _ as *const _,
                    this: this as *const _ as *const _,
                };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2GetProcessExtendedInfosCompletedHandler,
        ICoreWebView2GetProcessExtendedInfosCompletedHandler_Vtbl
    );
    impl ICoreWebView2GetProcessExtendedInfosCompletedHandler {
        pub unsafe fn Invoke<P1>(
            &self,
            errorcode: windows_core::HRESULT,
            result: P1,
        ) -> windows_core::Result<()>
        where
            P1: windows_core::Param<ICoreWebView2ProcessExtendedInfoCollection>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    errorcode,
                    result.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2GetProcessExtendedInfosCompletedHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::HRESULT,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2GetProcessExtendedInfosCompletedHandler_Impl {
        fn Invoke(
            &self,
            errorcode: windows_core::HRESULT,
            result: windows_core::Ref<'_, ICoreWebView2ProcessExtendedInfoCollection>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2GetProcessExtendedInfosCompletedHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2GetProcessExtendedInfosCompletedHandler_Impl>(
        ) -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2GetProcessExtendedInfosCompletedHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                errorcode: windows_core::HRESULT,
                result: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2GetProcessExtendedInfosCompletedHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&errorcode),
                        core::mem::transmute_copy(&result),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2GetProcessExtendedInfosCompletedHandler_ImplVtbl<
        T: ICoreWebView2GetProcessExtendedInfosCompletedHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2GetProcessExtendedInfosCompletedHandler_Impl>
        ICoreWebView2GetProcessExtendedInfosCompletedHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2GetProcessExtendedInfosCompletedHandler_Vtbl =
            ICoreWebView2GetProcessExtendedInfosCompletedHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2GetProcessExtendedInfosCompletedHandler {
        pub fn new<'a, T: ICoreWebView2GetProcessExtendedInfosCompletedHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2GetProcessExtendedInfosCompletedHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2HistoryChangedEventHandler,
        ICoreWebView2HistoryChangedEventHandler_Vtbl
    );
    impl ICoreWebView2HistoryChangedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
            P1: windows_core::Param<windows_core::IUnknown>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2HistoryChangedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2HistoryChangedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2>,
            args: windows_core::Ref<'_, windows_core::IUnknown>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2HistoryChangedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2HistoryChangedEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2HistoryChangedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2HistoryChangedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2HistoryChangedEventHandler_ImplVtbl<
        T: ICoreWebView2HistoryChangedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2HistoryChangedEventHandler_Impl>
        ICoreWebView2HistoryChangedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2HistoryChangedEventHandler_Vtbl =
            ICoreWebView2HistoryChangedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2HistoryChangedEventHandler {
        pub fn new<'a, T: ICoreWebView2HistoryChangedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2HistoryChangedEventHandler_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2HttpHeadersCollectionIterator,
        ICoreWebView2HttpHeadersCollectionIterator_Vtbl
    );
    impl ICoreWebView2HttpHeadersCollectionIterator {
        pub unsafe fn GetCurrentHeader<P0, P1>(
            &self,
            name: P0,
            value: P1,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
            P1: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetCurrentHeader)(
                    windows_core::Interface::as_raw(self),
                    name.param().abi(),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn HasCurrentHeader(&self, hascurrent: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).HasCurrentHeader)(
                    windows_core::Interface::as_raw(self),
                    hascurrent.into(),
                )
                .ok()
            }
        }
        pub unsafe fn MoveNext(&self, hasnext: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).MoveNext)(
                    windows_core::Interface::as_raw(self),
                    hasnext.into(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2HttpHeadersCollectionIterator_Vtbl {
        pub GetCurrentHeader: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub HasCurrentHeader: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub MoveNext: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2HttpHeadersCollectionIterator_Impl {
        fn GetCurrentHeader(
            &self,
            name: &windows_core::PCWSTR,
            value: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
        fn HasCurrentHeader(&self, hascurrent: windows_core::BOOL) -> windows_core::Result<()>;
        fn MoveNext(&self, hasnext: windows_core::BOOL) -> windows_core::Result<()>;
    }
    impl ICoreWebView2HttpHeadersCollectionIterator_Vtbl {
        pub const fn new<Identity: ICoreWebView2HttpHeadersCollectionIterator_Impl>() -> Self {
            unsafe extern "system" fn GetCurrentHeader<
                Identity: ICoreWebView2HttpHeadersCollectionIterator_Impl,
            >(
                this: *mut core::ffi::c_void,
                name: windows_core::PCWSTR,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2HttpHeadersCollectionIterator_Impl::GetCurrentHeader(
                        this,
                        core::mem::transmute(&name),
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn HasCurrentHeader<
                Identity: ICoreWebView2HttpHeadersCollectionIterator_Impl,
            >(
                this: *mut core::ffi::c_void,
                hascurrent: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2HttpHeadersCollectionIterator_Impl::HasCurrentHeader(
                        this,
                        core::mem::transmute_copy(&hascurrent),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn MoveNext<
                Identity: ICoreWebView2HttpHeadersCollectionIterator_Impl,
            >(
                this: *mut core::ffi::c_void,
                hasnext: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2HttpHeadersCollectionIterator_Impl::MoveNext(
                        this,
                        core::mem::transmute_copy(&hasnext),
                    )
                    .into()
                }
            }
            Self {
                GetCurrentHeader: GetCurrentHeader::<Identity>,
                HasCurrentHeader: HasCurrentHeader::<Identity>,
                MoveNext: MoveNext::<Identity>,
            }
        }
    }
    struct ICoreWebView2HttpHeadersCollectionIterator_ImplVtbl<
        T: ICoreWebView2HttpHeadersCollectionIterator_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2HttpHeadersCollectionIterator_Impl>
        ICoreWebView2HttpHeadersCollectionIterator_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2HttpHeadersCollectionIterator_Vtbl =
            ICoreWebView2HttpHeadersCollectionIterator_Vtbl::new::<T>();
    }
    impl ICoreWebView2HttpHeadersCollectionIterator {
        pub fn new<'a, T: ICoreWebView2HttpHeadersCollectionIterator_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2HttpHeadersCollectionIterator_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2HttpRequestHeaders,
        ICoreWebView2HttpRequestHeaders_Vtbl
    );
    impl ICoreWebView2HttpRequestHeaders {
        pub unsafe fn GetHeader<P0, P1>(&self, name: P0, value: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
            P1: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetHeader)(
                    windows_core::Interface::as_raw(self),
                    name.param().abi(),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn GetHeaders<P0, P1>(&self, name: P0, value: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
            P1: windows_core::Param<ICoreWebView2HttpHeadersCollectionIterator>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetHeaders)(
                    windows_core::Interface::as_raw(self),
                    name.param().abi(),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Contains<P0>(&self, name: P0, value: bool) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Contains)(
                    windows_core::Interface::as_raw(self),
                    name.param().abi(),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn SetHeader<P0, P1>(&self, name: P0, value: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
            P1: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).SetHeader)(
                    windows_core::Interface::as_raw(self),
                    name.param().abi(),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn RemoveHeader<P0>(&self, name: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).RemoveHeader)(
                    windows_core::Interface::as_raw(self),
                    name.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn GetIterator<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2HttpHeadersCollectionIterator>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetIterator)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2HttpRequestHeaders_Vtbl {
        pub GetHeader: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub GetHeaders: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Contains: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub SetHeader: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub RemoveHeader: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub GetIterator: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2HttpRequestHeaders_Impl {
        fn GetHeader(
            &self,
            name: &windows_core::PCWSTR,
            value: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
        fn GetHeaders(
            &self,
            name: &windows_core::PCWSTR,
            value: windows_core::Ref<'_, ICoreWebView2HttpHeadersCollectionIterator>,
        ) -> windows_core::Result<()>;
        fn Contains(
            &self,
            name: &windows_core::PCWSTR,
            value: windows_core::BOOL,
        ) -> windows_core::Result<()>;
        fn SetHeader(
            &self,
            name: &windows_core::PCWSTR,
            value: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
        fn RemoveHeader(&self, name: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn GetIterator(
            &self,
            value: windows_core::Ref<'_, ICoreWebView2HttpHeadersCollectionIterator>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2HttpRequestHeaders_Vtbl {
        pub const fn new<Identity: ICoreWebView2HttpRequestHeaders_Impl>() -> Self {
            unsafe extern "system" fn GetHeader<Identity: ICoreWebView2HttpRequestHeaders_Impl>(
                this: *mut core::ffi::c_void,
                name: windows_core::PCWSTR,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2HttpRequestHeaders_Impl::GetHeader(
                        this,
                        core::mem::transmute(&name),
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn GetHeaders<Identity: ICoreWebView2HttpRequestHeaders_Impl>(
                this: *mut core::ffi::c_void,
                name: windows_core::PCWSTR,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2HttpRequestHeaders_Impl::GetHeaders(
                        this,
                        core::mem::transmute(&name),
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Contains<Identity: ICoreWebView2HttpRequestHeaders_Impl>(
                this: *mut core::ffi::c_void,
                name: windows_core::PCWSTR,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2HttpRequestHeaders_Impl::Contains(
                        this,
                        core::mem::transmute(&name),
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn SetHeader<Identity: ICoreWebView2HttpRequestHeaders_Impl>(
                this: *mut core::ffi::c_void,
                name: windows_core::PCWSTR,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2HttpRequestHeaders_Impl::SetHeader(
                        this,
                        core::mem::transmute(&name),
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn RemoveHeader<
                Identity: ICoreWebView2HttpRequestHeaders_Impl,
            >(
                this: *mut core::ffi::c_void,
                name: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2HttpRequestHeaders_Impl::RemoveHeader(
                        this,
                        core::mem::transmute(&name),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn GetIterator<
                Identity: ICoreWebView2HttpRequestHeaders_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2HttpRequestHeaders_Impl::GetIterator(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                GetHeader: GetHeader::<Identity>,
                GetHeaders: GetHeaders::<Identity>,
                Contains: Contains::<Identity>,
                SetHeader: SetHeader::<Identity>,
                RemoveHeader: RemoveHeader::<Identity>,
                GetIterator: GetIterator::<Identity>,
            }
        }
    }
    struct ICoreWebView2HttpRequestHeaders_ImplVtbl<T: ICoreWebView2HttpRequestHeaders_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2HttpRequestHeaders_Impl> ICoreWebView2HttpRequestHeaders_ImplVtbl<T> {
        const VTABLE: ICoreWebView2HttpRequestHeaders_Vtbl =
            ICoreWebView2HttpRequestHeaders_Vtbl::new::<T>();
    }
    impl ICoreWebView2HttpRequestHeaders {
        pub fn new<'a, T: ICoreWebView2HttpRequestHeaders_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2HttpRequestHeaders_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2HttpResponseHeaders,
        ICoreWebView2HttpResponseHeaders_Vtbl
    );
    impl ICoreWebView2HttpResponseHeaders {
        pub unsafe fn AppendHeader<P0, P1>(&self, name: P0, value: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
            P1: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).AppendHeader)(
                    windows_core::Interface::as_raw(self),
                    name.param().abi(),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Contains<P0>(&self, name: P0, value: bool) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Contains)(
                    windows_core::Interface::as_raw(self),
                    name.param().abi(),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn GetHeader<P0, P1>(&self, name: P0, value: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
            P1: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetHeader)(
                    windows_core::Interface::as_raw(self),
                    name.param().abi(),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn GetHeaders<P0, P1>(&self, name: P0, value: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
            P1: windows_core::Param<ICoreWebView2HttpHeadersCollectionIterator>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetHeaders)(
                    windows_core::Interface::as_raw(self),
                    name.param().abi(),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn GetIterator<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2HttpHeadersCollectionIterator>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetIterator)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2HttpResponseHeaders_Vtbl {
        pub AppendHeader: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub Contains: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub GetHeader: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub GetHeaders: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub GetIterator: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2HttpResponseHeaders_Impl {
        fn AppendHeader(
            &self,
            name: &windows_core::PCWSTR,
            value: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
        fn Contains(
            &self,
            name: &windows_core::PCWSTR,
            value: windows_core::BOOL,
        ) -> windows_core::Result<()>;
        fn GetHeader(
            &self,
            name: &windows_core::PCWSTR,
            value: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
        fn GetHeaders(
            &self,
            name: &windows_core::PCWSTR,
            value: windows_core::Ref<'_, ICoreWebView2HttpHeadersCollectionIterator>,
        ) -> windows_core::Result<()>;
        fn GetIterator(
            &self,
            value: windows_core::Ref<'_, ICoreWebView2HttpHeadersCollectionIterator>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2HttpResponseHeaders_Vtbl {
        pub const fn new<Identity: ICoreWebView2HttpResponseHeaders_Impl>() -> Self {
            unsafe extern "system" fn AppendHeader<
                Identity: ICoreWebView2HttpResponseHeaders_Impl,
            >(
                this: *mut core::ffi::c_void,
                name: windows_core::PCWSTR,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2HttpResponseHeaders_Impl::AppendHeader(
                        this,
                        core::mem::transmute(&name),
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Contains<Identity: ICoreWebView2HttpResponseHeaders_Impl>(
                this: *mut core::ffi::c_void,
                name: windows_core::PCWSTR,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2HttpResponseHeaders_Impl::Contains(
                        this,
                        core::mem::transmute(&name),
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn GetHeader<Identity: ICoreWebView2HttpResponseHeaders_Impl>(
                this: *mut core::ffi::c_void,
                name: windows_core::PCWSTR,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2HttpResponseHeaders_Impl::GetHeader(
                        this,
                        core::mem::transmute(&name),
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn GetHeaders<
                Identity: ICoreWebView2HttpResponseHeaders_Impl,
            >(
                this: *mut core::ffi::c_void,
                name: windows_core::PCWSTR,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2HttpResponseHeaders_Impl::GetHeaders(
                        this,
                        core::mem::transmute(&name),
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn GetIterator<
                Identity: ICoreWebView2HttpResponseHeaders_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2HttpResponseHeaders_Impl::GetIterator(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                AppendHeader: AppendHeader::<Identity>,
                Contains: Contains::<Identity>,
                GetHeader: GetHeader::<Identity>,
                GetHeaders: GetHeaders::<Identity>,
                GetIterator: GetIterator::<Identity>,
            }
        }
    }
    struct ICoreWebView2HttpResponseHeaders_ImplVtbl<T: ICoreWebView2HttpResponseHeaders_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2HttpResponseHeaders_Impl> ICoreWebView2HttpResponseHeaders_ImplVtbl<T> {
        const VTABLE: ICoreWebView2HttpResponseHeaders_Vtbl =
            ICoreWebView2HttpResponseHeaders_Vtbl::new::<T>();
    }
    impl ICoreWebView2HttpResponseHeaders {
        pub fn new<'a, T: ICoreWebView2HttpResponseHeaders_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2HttpResponseHeaders_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler,
        ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler_Vtbl
    );
    impl ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
            P1: windows_core::Param<windows_core::IUnknown>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2>,
            args: windows_core::Ref<'_, windows_core::IUnknown>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler_Vtbl {
        pub const fn new<
            Identity: ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler_Impl,
        >() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler_ImplVtbl<
        T: ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler_Impl>
        ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler_Vtbl =
            ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler {
        pub fn new<'a, T: ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap { vtable : & ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler_ImplVtbl:: < T >::VTABLE as * const _ as * const _ , this :this as * const _ as * const _ } ;
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2IsDocumentPlayingAudioChangedEventHandler,
        ICoreWebView2IsDocumentPlayingAudioChangedEventHandler_Vtbl
    );
    impl ICoreWebView2IsDocumentPlayingAudioChangedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
            P1: windows_core::Param<windows_core::IUnknown>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2IsDocumentPlayingAudioChangedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2IsDocumentPlayingAudioChangedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2>,
            args: windows_core::Ref<'_, windows_core::IUnknown>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2IsDocumentPlayingAudioChangedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2IsDocumentPlayingAudioChangedEventHandler_Impl>(
        ) -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2IsDocumentPlayingAudioChangedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2IsDocumentPlayingAudioChangedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2IsDocumentPlayingAudioChangedEventHandler_ImplVtbl<
        T: ICoreWebView2IsDocumentPlayingAudioChangedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2IsDocumentPlayingAudioChangedEventHandler_Impl>
        ICoreWebView2IsDocumentPlayingAudioChangedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2IsDocumentPlayingAudioChangedEventHandler_Vtbl =
            ICoreWebView2IsDocumentPlayingAudioChangedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2IsDocumentPlayingAudioChangedEventHandler {
        pub fn new<'a, T: ICoreWebView2IsDocumentPlayingAudioChangedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable:
                    &ICoreWebView2IsDocumentPlayingAudioChangedEventHandler_ImplVtbl::<T>::VTABLE
                        as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2IsMutedChangedEventHandler,
        ICoreWebView2IsMutedChangedEventHandler_Vtbl
    );
    impl ICoreWebView2IsMutedChangedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
            P1: windows_core::Param<windows_core::IUnknown>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2IsMutedChangedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2IsMutedChangedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2>,
            args: windows_core::Ref<'_, windows_core::IUnknown>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2IsMutedChangedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2IsMutedChangedEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2IsMutedChangedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2IsMutedChangedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2IsMutedChangedEventHandler_ImplVtbl<
        T: ICoreWebView2IsMutedChangedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2IsMutedChangedEventHandler_Impl>
        ICoreWebView2IsMutedChangedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2IsMutedChangedEventHandler_Vtbl =
            ICoreWebView2IsMutedChangedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2IsMutedChangedEventHandler {
        pub fn new<'a, T: ICoreWebView2IsMutedChangedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2IsMutedChangedEventHandler_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2LaunchingExternalUriSchemeEventArgs,
        ICoreWebView2LaunchingExternalUriSchemeEventArgs_Vtbl
    );
    impl ICoreWebView2LaunchingExternalUriSchemeEventArgs {
        pub unsafe fn Uri<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Uri)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn InitiatingOrigin<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).InitiatingOrigin)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn IsUserInitiated(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsUserInitiated)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn Cancel(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Cancel)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn Cancel2(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Cancel2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn GetDeferral<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Deferral>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetDeferral)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2LaunchingExternalUriSchemeEventArgs_Vtbl {
        pub Uri: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub InitiatingOrigin: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub IsUserInitiated: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub Cancel: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub Cancel2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub GetDeferral: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2LaunchingExternalUriSchemeEventArgs_Impl {
        fn Uri(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn InitiatingOrigin(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn IsUserInitiated(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn Cancel(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn Cancel2(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn GetDeferral(
            &self,
            value: windows_core::Ref<'_, ICoreWebView2Deferral>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2LaunchingExternalUriSchemeEventArgs_Vtbl {
        pub const fn new<Identity: ICoreWebView2LaunchingExternalUriSchemeEventArgs_Impl>() -> Self
        {
            unsafe extern "system" fn Uri<
                Identity: ICoreWebView2LaunchingExternalUriSchemeEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2LaunchingExternalUriSchemeEventArgs_Impl::Uri(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn InitiatingOrigin<
                Identity: ICoreWebView2LaunchingExternalUriSchemeEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2LaunchingExternalUriSchemeEventArgs_Impl::InitiatingOrigin(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsUserInitiated<
                Identity: ICoreWebView2LaunchingExternalUriSchemeEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2LaunchingExternalUriSchemeEventArgs_Impl::IsUserInitiated(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Cancel<
                Identity: ICoreWebView2LaunchingExternalUriSchemeEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2LaunchingExternalUriSchemeEventArgs_Impl::Cancel(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Cancel2<
                Identity: ICoreWebView2LaunchingExternalUriSchemeEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2LaunchingExternalUriSchemeEventArgs_Impl::Cancel2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn GetDeferral<
                Identity: ICoreWebView2LaunchingExternalUriSchemeEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2LaunchingExternalUriSchemeEventArgs_Impl::GetDeferral(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                Uri: Uri::<Identity>,
                InitiatingOrigin: InitiatingOrigin::<Identity>,
                IsUserInitiated: IsUserInitiated::<Identity>,
                Cancel: Cancel::<Identity>,
                Cancel2: Cancel2::<Identity>,
                GetDeferral: GetDeferral::<Identity>,
            }
        }
    }
    struct ICoreWebView2LaunchingExternalUriSchemeEventArgs_ImplVtbl<
        T: ICoreWebView2LaunchingExternalUriSchemeEventArgs_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2LaunchingExternalUriSchemeEventArgs_Impl>
        ICoreWebView2LaunchingExternalUriSchemeEventArgs_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2LaunchingExternalUriSchemeEventArgs_Vtbl =
            ICoreWebView2LaunchingExternalUriSchemeEventArgs_Vtbl::new::<T>();
    }
    impl ICoreWebView2LaunchingExternalUriSchemeEventArgs {
        pub fn new<'a, T: ICoreWebView2LaunchingExternalUriSchemeEventArgs_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2LaunchingExternalUriSchemeEventArgs_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2LaunchingExternalUriSchemeEventHandler,
        ICoreWebView2LaunchingExternalUriSchemeEventHandler_Vtbl
    );
    impl ICoreWebView2LaunchingExternalUriSchemeEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
            P1: windows_core::Param<ICoreWebView2LaunchingExternalUriSchemeEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2LaunchingExternalUriSchemeEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2LaunchingExternalUriSchemeEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2>,
            args: windows_core::Ref<'_, ICoreWebView2LaunchingExternalUriSchemeEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2LaunchingExternalUriSchemeEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2LaunchingExternalUriSchemeEventHandler_Impl>(
        ) -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2LaunchingExternalUriSchemeEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2LaunchingExternalUriSchemeEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2LaunchingExternalUriSchemeEventHandler_ImplVtbl<
        T: ICoreWebView2LaunchingExternalUriSchemeEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2LaunchingExternalUriSchemeEventHandler_Impl>
        ICoreWebView2LaunchingExternalUriSchemeEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2LaunchingExternalUriSchemeEventHandler_Vtbl =
            ICoreWebView2LaunchingExternalUriSchemeEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2LaunchingExternalUriSchemeEventHandler {
        pub fn new<'a, T: ICoreWebView2LaunchingExternalUriSchemeEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2LaunchingExternalUriSchemeEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2MoveFocusRequestedEventArgs,
        ICoreWebView2MoveFocusRequestedEventArgs_Vtbl
    );
    impl ICoreWebView2MoveFocusRequestedEventArgs {
        pub unsafe fn Reason(
            &self,
            reason: COREWEBVIEW2_MOVE_FOCUS_REASON,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Reason)(
                    windows_core::Interface::as_raw(self),
                    reason,
                )
                .ok()
            }
        }
        pub unsafe fn Handled(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Handled)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn Handled2(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Handled2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2MoveFocusRequestedEventArgs_Vtbl {
        pub Reason: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_MOVE_FOCUS_REASON,
        ) -> windows_core::HRESULT,
        pub Handled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub Handled2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2MoveFocusRequestedEventArgs_Impl {
        fn Reason(&self, reason: COREWEBVIEW2_MOVE_FOCUS_REASON) -> windows_core::Result<()>;
        fn Handled(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn Handled2(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
    }
    impl ICoreWebView2MoveFocusRequestedEventArgs_Vtbl {
        pub const fn new<Identity: ICoreWebView2MoveFocusRequestedEventArgs_Impl>() -> Self {
            unsafe extern "system" fn Reason<
                Identity: ICoreWebView2MoveFocusRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                reason: COREWEBVIEW2_MOVE_FOCUS_REASON,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2MoveFocusRequestedEventArgs_Impl::Reason(
                        this,
                        core::mem::transmute_copy(&reason),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Handled<
                Identity: ICoreWebView2MoveFocusRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2MoveFocusRequestedEventArgs_Impl::Handled(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Handled2<
                Identity: ICoreWebView2MoveFocusRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2MoveFocusRequestedEventArgs_Impl::Handled2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                Reason: Reason::<Identity>,
                Handled: Handled::<Identity>,
                Handled2: Handled2::<Identity>,
            }
        }
    }
    struct ICoreWebView2MoveFocusRequestedEventArgs_ImplVtbl<
        T: ICoreWebView2MoveFocusRequestedEventArgs_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2MoveFocusRequestedEventArgs_Impl>
        ICoreWebView2MoveFocusRequestedEventArgs_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2MoveFocusRequestedEventArgs_Vtbl =
            ICoreWebView2MoveFocusRequestedEventArgs_Vtbl::new::<T>();
    }
    impl ICoreWebView2MoveFocusRequestedEventArgs {
        pub fn new<'a, T: ICoreWebView2MoveFocusRequestedEventArgs_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2MoveFocusRequestedEventArgs_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2MoveFocusRequestedEventHandler,
        ICoreWebView2MoveFocusRequestedEventHandler_Vtbl
    );
    impl ICoreWebView2MoveFocusRequestedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Controller>,
            P1: windows_core::Param<ICoreWebView2MoveFocusRequestedEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2MoveFocusRequestedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2MoveFocusRequestedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2Controller>,
            args: windows_core::Ref<'_, ICoreWebView2MoveFocusRequestedEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2MoveFocusRequestedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2MoveFocusRequestedEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2MoveFocusRequestedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2MoveFocusRequestedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2MoveFocusRequestedEventHandler_ImplVtbl<
        T: ICoreWebView2MoveFocusRequestedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2MoveFocusRequestedEventHandler_Impl>
        ICoreWebView2MoveFocusRequestedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2MoveFocusRequestedEventHandler_Vtbl =
            ICoreWebView2MoveFocusRequestedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2MoveFocusRequestedEventHandler {
        pub fn new<'a, T: ICoreWebView2MoveFocusRequestedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2MoveFocusRequestedEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2NavigationCompletedEventArgs,
        ICoreWebView2NavigationCompletedEventArgs_Vtbl
    );
    impl ICoreWebView2NavigationCompletedEventArgs {
        pub unsafe fn IsSuccess(&self, issuccess: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsSuccess)(
                    windows_core::Interface::as_raw(self),
                    issuccess.into(),
                )
                .ok()
            }
        }
        pub unsafe fn WebErrorStatus(
            &self,
            weberrorstatus: COREWEBVIEW2_WEB_ERROR_STATUS,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).WebErrorStatus)(
                    windows_core::Interface::as_raw(self),
                    weberrorstatus,
                )
                .ok()
            }
        }
        pub unsafe fn NavigationId(&self, navigationid: u64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).NavigationId)(
                    windows_core::Interface::as_raw(self),
                    navigationid,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2NavigationCompletedEventArgs_Vtbl {
        pub IsSuccess: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub WebErrorStatus: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_WEB_ERROR_STATUS,
        ) -> windows_core::HRESULT,
        pub NavigationId:
            unsafe extern "system" fn(*mut core::ffi::c_void, u64) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2NavigationCompletedEventArgs_Impl {
        fn IsSuccess(&self, issuccess: windows_core::BOOL) -> windows_core::Result<()>;
        fn WebErrorStatus(
            &self,
            weberrorstatus: COREWEBVIEW2_WEB_ERROR_STATUS,
        ) -> windows_core::Result<()>;
        fn NavigationId(&self, navigationid: u64) -> windows_core::Result<()>;
    }
    impl ICoreWebView2NavigationCompletedEventArgs_Vtbl {
        pub const fn new<Identity: ICoreWebView2NavigationCompletedEventArgs_Impl>() -> Self {
            unsafe extern "system" fn IsSuccess<
                Identity: ICoreWebView2NavigationCompletedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                issuccess: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NavigationCompletedEventArgs_Impl::IsSuccess(
                        this,
                        core::mem::transmute_copy(&issuccess),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn WebErrorStatus<
                Identity: ICoreWebView2NavigationCompletedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                weberrorstatus: COREWEBVIEW2_WEB_ERROR_STATUS,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NavigationCompletedEventArgs_Impl::WebErrorStatus(
                        this,
                        core::mem::transmute_copy(&weberrorstatus),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn NavigationId<
                Identity: ICoreWebView2NavigationCompletedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                navigationid: u64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NavigationCompletedEventArgs_Impl::NavigationId(
                        this,
                        core::mem::transmute_copy(&navigationid),
                    )
                    .into()
                }
            }
            Self {
                IsSuccess: IsSuccess::<Identity>,
                WebErrorStatus: WebErrorStatus::<Identity>,
                NavigationId: NavigationId::<Identity>,
            }
        }
    }
    struct ICoreWebView2NavigationCompletedEventArgs_ImplVtbl<
        T: ICoreWebView2NavigationCompletedEventArgs_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2NavigationCompletedEventArgs_Impl>
        ICoreWebView2NavigationCompletedEventArgs_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2NavigationCompletedEventArgs_Vtbl =
            ICoreWebView2NavigationCompletedEventArgs_Vtbl::new::<T>();
    }
    impl ICoreWebView2NavigationCompletedEventArgs {
        pub fn new<'a, T: ICoreWebView2NavigationCompletedEventArgs_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2NavigationCompletedEventArgs_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2NavigationCompletedEventArgs2,
        ICoreWebView2NavigationCompletedEventArgs2_Vtbl
    );
    impl ICoreWebView2NavigationCompletedEventArgs2 {
        pub unsafe fn HttpStatusCode(&self, value: i32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).HttpStatusCode)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2NavigationCompletedEventArgs2_Vtbl {
        pub HttpStatusCode:
            unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2NavigationCompletedEventArgs2_Impl {
        fn HttpStatusCode(&self, value: i32) -> windows_core::Result<()>;
    }
    impl ICoreWebView2NavigationCompletedEventArgs2_Vtbl {
        pub const fn new<Identity: ICoreWebView2NavigationCompletedEventArgs2_Impl>() -> Self {
            unsafe extern "system" fn HttpStatusCode<
                Identity: ICoreWebView2NavigationCompletedEventArgs2_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: i32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NavigationCompletedEventArgs2_Impl::HttpStatusCode(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                HttpStatusCode: HttpStatusCode::<Identity>,
            }
        }
    }
    struct ICoreWebView2NavigationCompletedEventArgs2_ImplVtbl<
        T: ICoreWebView2NavigationCompletedEventArgs2_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2NavigationCompletedEventArgs2_Impl>
        ICoreWebView2NavigationCompletedEventArgs2_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2NavigationCompletedEventArgs2_Vtbl =
            ICoreWebView2NavigationCompletedEventArgs2_Vtbl::new::<T>();
    }
    impl ICoreWebView2NavigationCompletedEventArgs2 {
        pub fn new<'a, T: ICoreWebView2NavigationCompletedEventArgs2_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2NavigationCompletedEventArgs2_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2NavigationCompletedEventHandler,
        ICoreWebView2NavigationCompletedEventHandler_Vtbl
    );
    impl ICoreWebView2NavigationCompletedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
            P1: windows_core::Param<ICoreWebView2NavigationCompletedEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2NavigationCompletedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2NavigationCompletedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2>,
            args: windows_core::Ref<'_, ICoreWebView2NavigationCompletedEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2NavigationCompletedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2NavigationCompletedEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2NavigationCompletedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NavigationCompletedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2NavigationCompletedEventHandler_ImplVtbl<
        T: ICoreWebView2NavigationCompletedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2NavigationCompletedEventHandler_Impl>
        ICoreWebView2NavigationCompletedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2NavigationCompletedEventHandler_Vtbl =
            ICoreWebView2NavigationCompletedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2NavigationCompletedEventHandler {
        pub fn new<'a, T: ICoreWebView2NavigationCompletedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2NavigationCompletedEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2NavigationStartingEventArgs,
        ICoreWebView2NavigationStartingEventArgs_Vtbl
    );
    impl ICoreWebView2NavigationStartingEventArgs {
        pub unsafe fn Uri<P0>(&self, uri: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Uri)(
                    windows_core::Interface::as_raw(self),
                    uri.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn IsUserInitiated(&self, isuserinitiated: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsUserInitiated)(
                    windows_core::Interface::as_raw(self),
                    isuserinitiated.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsRedirected(&self, isredirected: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsRedirected)(
                    windows_core::Interface::as_raw(self),
                    isredirected.into(),
                )
                .ok()
            }
        }
        pub unsafe fn RequestHeaders<P0>(&self, requestheaders: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2HttpRequestHeaders>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).RequestHeaders)(
                    windows_core::Interface::as_raw(self),
                    requestheaders.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Cancel(&self, cancel: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Cancel)(
                    windows_core::Interface::as_raw(self),
                    cancel.into(),
                )
                .ok()
            }
        }
        pub unsafe fn Cancel2(&self, cancel: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Cancel2)(
                    windows_core::Interface::as_raw(self),
                    cancel.into(),
                )
                .ok()
            }
        }
        pub unsafe fn NavigationId(&self, navigationid: u64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).NavigationId)(
                    windows_core::Interface::as_raw(self),
                    navigationid,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2NavigationStartingEventArgs_Vtbl {
        pub Uri: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub IsUserInitiated: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub IsRedirected: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub RequestHeaders: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Cancel: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub Cancel2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub NavigationId:
            unsafe extern "system" fn(*mut core::ffi::c_void, u64) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2NavigationStartingEventArgs_Impl {
        fn Uri(&self, uri: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn IsUserInitiated(&self, isuserinitiated: windows_core::BOOL) -> windows_core::Result<()>;
        fn IsRedirected(&self, isredirected: windows_core::BOOL) -> windows_core::Result<()>;
        fn RequestHeaders(
            &self,
            requestheaders: windows_core::Ref<'_, ICoreWebView2HttpRequestHeaders>,
        ) -> windows_core::Result<()>;
        fn Cancel(&self, cancel: windows_core::BOOL) -> windows_core::Result<()>;
        fn Cancel2(&self, cancel: windows_core::BOOL) -> windows_core::Result<()>;
        fn NavigationId(&self, navigationid: u64) -> windows_core::Result<()>;
    }
    impl ICoreWebView2NavigationStartingEventArgs_Vtbl {
        pub const fn new<Identity: ICoreWebView2NavigationStartingEventArgs_Impl>() -> Self {
            unsafe extern "system" fn Uri<
                Identity: ICoreWebView2NavigationStartingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                uri: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NavigationStartingEventArgs_Impl::Uri(
                        this,
                        core::mem::transmute(&uri),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsUserInitiated<
                Identity: ICoreWebView2NavigationStartingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                isuserinitiated: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NavigationStartingEventArgs_Impl::IsUserInitiated(
                        this,
                        core::mem::transmute_copy(&isuserinitiated),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsRedirected<
                Identity: ICoreWebView2NavigationStartingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                isredirected: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NavigationStartingEventArgs_Impl::IsRedirected(
                        this,
                        core::mem::transmute_copy(&isredirected),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn RequestHeaders<
                Identity: ICoreWebView2NavigationStartingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                requestheaders: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NavigationStartingEventArgs_Impl::RequestHeaders(
                        this,
                        core::mem::transmute_copy(&requestheaders),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Cancel<
                Identity: ICoreWebView2NavigationStartingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                cancel: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NavigationStartingEventArgs_Impl::Cancel(
                        this,
                        core::mem::transmute_copy(&cancel),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Cancel2<
                Identity: ICoreWebView2NavigationStartingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                cancel: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NavigationStartingEventArgs_Impl::Cancel2(
                        this,
                        core::mem::transmute_copy(&cancel),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn NavigationId<
                Identity: ICoreWebView2NavigationStartingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                navigationid: u64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NavigationStartingEventArgs_Impl::NavigationId(
                        this,
                        core::mem::transmute_copy(&navigationid),
                    )
                    .into()
                }
            }
            Self {
                Uri: Uri::<Identity>,
                IsUserInitiated: IsUserInitiated::<Identity>,
                IsRedirected: IsRedirected::<Identity>,
                RequestHeaders: RequestHeaders::<Identity>,
                Cancel: Cancel::<Identity>,
                Cancel2: Cancel2::<Identity>,
                NavigationId: NavigationId::<Identity>,
            }
        }
    }
    struct ICoreWebView2NavigationStartingEventArgs_ImplVtbl<
        T: ICoreWebView2NavigationStartingEventArgs_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2NavigationStartingEventArgs_Impl>
        ICoreWebView2NavigationStartingEventArgs_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2NavigationStartingEventArgs_Vtbl =
            ICoreWebView2NavigationStartingEventArgs_Vtbl::new::<T>();
    }
    impl ICoreWebView2NavigationStartingEventArgs {
        pub fn new<'a, T: ICoreWebView2NavigationStartingEventArgs_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2NavigationStartingEventArgs_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2NavigationStartingEventArgs2,
        ICoreWebView2NavigationStartingEventArgs2_Vtbl
    );
    impl ICoreWebView2NavigationStartingEventArgs2 {
        pub unsafe fn AdditionalAllowedFrameAncestors<P0>(
            &self,
            value: P0,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).AdditionalAllowedFrameAncestors)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn AdditionalAllowedFrameAncestors2<P0>(
            &self,
            value: P0,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).AdditionalAllowedFrameAncestors2)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2NavigationStartingEventArgs2_Vtbl {
        pub AdditionalAllowedFrameAncestors: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        )
            -> windows_core::HRESULT,
        pub AdditionalAllowedFrameAncestors2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        )
            -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2NavigationStartingEventArgs2_Impl {
        fn AdditionalAllowedFrameAncestors(
            &self,
            value: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
        fn AdditionalAllowedFrameAncestors2(
            &self,
            value: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2NavigationStartingEventArgs2_Vtbl {
        pub const fn new<Identity: ICoreWebView2NavigationStartingEventArgs2_Impl>() -> Self {
            unsafe extern "system" fn AdditionalAllowedFrameAncestors<
                Identity: ICoreWebView2NavigationStartingEventArgs2_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NavigationStartingEventArgs2_Impl::AdditionalAllowedFrameAncestors(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn AdditionalAllowedFrameAncestors2<
                Identity: ICoreWebView2NavigationStartingEventArgs2_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NavigationStartingEventArgs2_Impl:: AdditionalAllowedFrameAncestors2 ( this , core::mem::transmute ( & value ) , ) . into ( )
                }
            }
            Self {
                AdditionalAllowedFrameAncestors: AdditionalAllowedFrameAncestors::<Identity>,
                AdditionalAllowedFrameAncestors2: AdditionalAllowedFrameAncestors2::<Identity>,
            }
        }
    }
    struct ICoreWebView2NavigationStartingEventArgs2_ImplVtbl<
        T: ICoreWebView2NavigationStartingEventArgs2_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2NavigationStartingEventArgs2_Impl>
        ICoreWebView2NavigationStartingEventArgs2_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2NavigationStartingEventArgs2_Vtbl =
            ICoreWebView2NavigationStartingEventArgs2_Vtbl::new::<T>();
    }
    impl ICoreWebView2NavigationStartingEventArgs2 {
        pub fn new<'a, T: ICoreWebView2NavigationStartingEventArgs2_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2NavigationStartingEventArgs2_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2NavigationStartingEventArgs3,
        ICoreWebView2NavigationStartingEventArgs3_Vtbl
    );
    impl ICoreWebView2NavigationStartingEventArgs3 {
        pub unsafe fn NavigationKind(
            &self,
            value: COREWEBVIEW2_NAVIGATION_KIND,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).NavigationKind)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2NavigationStartingEventArgs3_Vtbl {
        pub NavigationKind: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_NAVIGATION_KIND,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2NavigationStartingEventArgs3_Impl {
        fn NavigationKind(&self, value: COREWEBVIEW2_NAVIGATION_KIND) -> windows_core::Result<()>;
    }
    impl ICoreWebView2NavigationStartingEventArgs3_Vtbl {
        pub const fn new<Identity: ICoreWebView2NavigationStartingEventArgs3_Impl>() -> Self {
            unsafe extern "system" fn NavigationKind<
                Identity: ICoreWebView2NavigationStartingEventArgs3_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_NAVIGATION_KIND,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NavigationStartingEventArgs3_Impl::NavigationKind(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                NavigationKind: NavigationKind::<Identity>,
            }
        }
    }
    struct ICoreWebView2NavigationStartingEventArgs3_ImplVtbl<
        T: ICoreWebView2NavigationStartingEventArgs3_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2NavigationStartingEventArgs3_Impl>
        ICoreWebView2NavigationStartingEventArgs3_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2NavigationStartingEventArgs3_Vtbl =
            ICoreWebView2NavigationStartingEventArgs3_Vtbl::new::<T>();
    }
    impl ICoreWebView2NavigationStartingEventArgs3 {
        pub fn new<'a, T: ICoreWebView2NavigationStartingEventArgs3_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2NavigationStartingEventArgs3_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2NavigationStartingEventHandler,
        ICoreWebView2NavigationStartingEventHandler_Vtbl
    );
    impl ICoreWebView2NavigationStartingEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
            P1: windows_core::Param<ICoreWebView2NavigationStartingEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2NavigationStartingEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2NavigationStartingEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2>,
            args: windows_core::Ref<'_, ICoreWebView2NavigationStartingEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2NavigationStartingEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2NavigationStartingEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2NavigationStartingEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NavigationStartingEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2NavigationStartingEventHandler_ImplVtbl<
        T: ICoreWebView2NavigationStartingEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2NavigationStartingEventHandler_Impl>
        ICoreWebView2NavigationStartingEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2NavigationStartingEventHandler_Vtbl =
            ICoreWebView2NavigationStartingEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2NavigationStartingEventHandler {
        pub fn new<'a, T: ICoreWebView2NavigationStartingEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2NavigationStartingEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2NewBrowserVersionAvailableEventHandler,
        ICoreWebView2NewBrowserVersionAvailableEventHandler_Vtbl
    );
    impl ICoreWebView2NewBrowserVersionAvailableEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Environment>,
            P1: windows_core::Param<windows_core::IUnknown>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2NewBrowserVersionAvailableEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2NewBrowserVersionAvailableEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2Environment>,
            args: windows_core::Ref<'_, windows_core::IUnknown>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2NewBrowserVersionAvailableEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2NewBrowserVersionAvailableEventHandler_Impl>(
        ) -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2NewBrowserVersionAvailableEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NewBrowserVersionAvailableEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2NewBrowserVersionAvailableEventHandler_ImplVtbl<
        T: ICoreWebView2NewBrowserVersionAvailableEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2NewBrowserVersionAvailableEventHandler_Impl>
        ICoreWebView2NewBrowserVersionAvailableEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2NewBrowserVersionAvailableEventHandler_Vtbl =
            ICoreWebView2NewBrowserVersionAvailableEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2NewBrowserVersionAvailableEventHandler {
        pub fn new<'a, T: ICoreWebView2NewBrowserVersionAvailableEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2NewBrowserVersionAvailableEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2NewWindowRequestedEventArgs,
        ICoreWebView2NewWindowRequestedEventArgs_Vtbl
    );
    impl ICoreWebView2NewWindowRequestedEventArgs {
        pub unsafe fn Uri<P0>(&self, uri: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Uri)(
                    windows_core::Interface::as_raw(self),
                    uri.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn NewWindow<P0>(&self, newwindow: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).NewWindow)(
                    windows_core::Interface::as_raw(self),
                    newwindow.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn NewWindow2<P0>(&self, newwindow: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).NewWindow2)(
                    windows_core::Interface::as_raw(self),
                    newwindow.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Handled(&self, handled: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Handled)(
                    windows_core::Interface::as_raw(self),
                    handled.into(),
                )
                .ok()
            }
        }
        pub unsafe fn Handled2(&self, handled: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Handled2)(
                    windows_core::Interface::as_raw(self),
                    handled.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsUserInitiated(&self, isuserinitiated: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsUserInitiated)(
                    windows_core::Interface::as_raw(self),
                    isuserinitiated.into(),
                )
                .ok()
            }
        }
        pub unsafe fn GetDeferral<P0>(&self, deferral: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Deferral>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetDeferral)(
                    windows_core::Interface::as_raw(self),
                    deferral.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn WindowFeatures<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2WindowFeatures>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).WindowFeatures)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2NewWindowRequestedEventArgs_Vtbl {
        pub Uri: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub NewWindow: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub NewWindow2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Handled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub Handled2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub IsUserInitiated: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub GetDeferral: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub WindowFeatures: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2NewWindowRequestedEventArgs_Impl {
        fn Uri(&self, uri: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn NewWindow(
            &self,
            newwindow: windows_core::Ref<'_, ICoreWebView2>,
        ) -> windows_core::Result<()>;
        fn NewWindow2(
            &self,
            newwindow: windows_core::Ref<'_, ICoreWebView2>,
        ) -> windows_core::Result<()>;
        fn Handled(&self, handled: windows_core::BOOL) -> windows_core::Result<()>;
        fn Handled2(&self, handled: windows_core::BOOL) -> windows_core::Result<()>;
        fn IsUserInitiated(&self, isuserinitiated: windows_core::BOOL) -> windows_core::Result<()>;
        fn GetDeferral(
            &self,
            deferral: windows_core::Ref<'_, ICoreWebView2Deferral>,
        ) -> windows_core::Result<()>;
        fn WindowFeatures(
            &self,
            value: windows_core::Ref<'_, ICoreWebView2WindowFeatures>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2NewWindowRequestedEventArgs_Vtbl {
        pub const fn new<Identity: ICoreWebView2NewWindowRequestedEventArgs_Impl>() -> Self {
            unsafe extern "system" fn Uri<
                Identity: ICoreWebView2NewWindowRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                uri: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NewWindowRequestedEventArgs_Impl::Uri(
                        this,
                        core::mem::transmute(&uri),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn NewWindow<
                Identity: ICoreWebView2NewWindowRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                newwindow: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NewWindowRequestedEventArgs_Impl::NewWindow(
                        this,
                        core::mem::transmute_copy(&newwindow),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn NewWindow2<
                Identity: ICoreWebView2NewWindowRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                newwindow: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NewWindowRequestedEventArgs_Impl::NewWindow2(
                        this,
                        core::mem::transmute_copy(&newwindow),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Handled<
                Identity: ICoreWebView2NewWindowRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                handled: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NewWindowRequestedEventArgs_Impl::Handled(
                        this,
                        core::mem::transmute_copy(&handled),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Handled2<
                Identity: ICoreWebView2NewWindowRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                handled: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NewWindowRequestedEventArgs_Impl::Handled2(
                        this,
                        core::mem::transmute_copy(&handled),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsUserInitiated<
                Identity: ICoreWebView2NewWindowRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                isuserinitiated: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NewWindowRequestedEventArgs_Impl::IsUserInitiated(
                        this,
                        core::mem::transmute_copy(&isuserinitiated),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn GetDeferral<
                Identity: ICoreWebView2NewWindowRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                deferral: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NewWindowRequestedEventArgs_Impl::GetDeferral(
                        this,
                        core::mem::transmute_copy(&deferral),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn WindowFeatures<
                Identity: ICoreWebView2NewWindowRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NewWindowRequestedEventArgs_Impl::WindowFeatures(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                Uri: Uri::<Identity>,
                NewWindow: NewWindow::<Identity>,
                NewWindow2: NewWindow2::<Identity>,
                Handled: Handled::<Identity>,
                Handled2: Handled2::<Identity>,
                IsUserInitiated: IsUserInitiated::<Identity>,
                GetDeferral: GetDeferral::<Identity>,
                WindowFeatures: WindowFeatures::<Identity>,
            }
        }
    }
    struct ICoreWebView2NewWindowRequestedEventArgs_ImplVtbl<
        T: ICoreWebView2NewWindowRequestedEventArgs_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2NewWindowRequestedEventArgs_Impl>
        ICoreWebView2NewWindowRequestedEventArgs_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2NewWindowRequestedEventArgs_Vtbl =
            ICoreWebView2NewWindowRequestedEventArgs_Vtbl::new::<T>();
    }
    impl ICoreWebView2NewWindowRequestedEventArgs {
        pub fn new<'a, T: ICoreWebView2NewWindowRequestedEventArgs_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2NewWindowRequestedEventArgs_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2NewWindowRequestedEventArgs2,
        ICoreWebView2NewWindowRequestedEventArgs2_Vtbl
    );
    impl ICoreWebView2NewWindowRequestedEventArgs2 {
        pub unsafe fn Name<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Name)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2NewWindowRequestedEventArgs2_Vtbl {
        pub Name: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2NewWindowRequestedEventArgs2_Impl {
        fn Name(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
    }
    impl ICoreWebView2NewWindowRequestedEventArgs2_Vtbl {
        pub const fn new<Identity: ICoreWebView2NewWindowRequestedEventArgs2_Impl>() -> Self {
            unsafe extern "system" fn Name<
                Identity: ICoreWebView2NewWindowRequestedEventArgs2_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NewWindowRequestedEventArgs2_Impl::Name(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            Self {
                Name: Name::<Identity>,
            }
        }
    }
    struct ICoreWebView2NewWindowRequestedEventArgs2_ImplVtbl<
        T: ICoreWebView2NewWindowRequestedEventArgs2_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2NewWindowRequestedEventArgs2_Impl>
        ICoreWebView2NewWindowRequestedEventArgs2_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2NewWindowRequestedEventArgs2_Vtbl =
            ICoreWebView2NewWindowRequestedEventArgs2_Vtbl::new::<T>();
    }
    impl ICoreWebView2NewWindowRequestedEventArgs2 {
        pub fn new<'a, T: ICoreWebView2NewWindowRequestedEventArgs2_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2NewWindowRequestedEventArgs2_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2NewWindowRequestedEventArgs3,
        ICoreWebView2NewWindowRequestedEventArgs3_Vtbl
    );
    impl ICoreWebView2NewWindowRequestedEventArgs3 {
        pub unsafe fn OriginalSourceFrameInfo<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2FrameInfo>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).OriginalSourceFrameInfo)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2NewWindowRequestedEventArgs3_Vtbl {
        pub OriginalSourceFrameInfo: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2NewWindowRequestedEventArgs3_Impl {
        fn OriginalSourceFrameInfo(
            &self,
            value: windows_core::Ref<'_, ICoreWebView2FrameInfo>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2NewWindowRequestedEventArgs3_Vtbl {
        pub const fn new<Identity: ICoreWebView2NewWindowRequestedEventArgs3_Impl>() -> Self {
            unsafe extern "system" fn OriginalSourceFrameInfo<
                Identity: ICoreWebView2NewWindowRequestedEventArgs3_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NewWindowRequestedEventArgs3_Impl::OriginalSourceFrameInfo(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                OriginalSourceFrameInfo: OriginalSourceFrameInfo::<Identity>,
            }
        }
    }
    struct ICoreWebView2NewWindowRequestedEventArgs3_ImplVtbl<
        T: ICoreWebView2NewWindowRequestedEventArgs3_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2NewWindowRequestedEventArgs3_Impl>
        ICoreWebView2NewWindowRequestedEventArgs3_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2NewWindowRequestedEventArgs3_Vtbl =
            ICoreWebView2NewWindowRequestedEventArgs3_Vtbl::new::<T>();
    }
    impl ICoreWebView2NewWindowRequestedEventArgs3 {
        pub fn new<'a, T: ICoreWebView2NewWindowRequestedEventArgs3_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2NewWindowRequestedEventArgs3_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2NewWindowRequestedEventHandler,
        ICoreWebView2NewWindowRequestedEventHandler_Vtbl
    );
    impl ICoreWebView2NewWindowRequestedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
            P1: windows_core::Param<ICoreWebView2NewWindowRequestedEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2NewWindowRequestedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2NewWindowRequestedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2>,
            args: windows_core::Ref<'_, ICoreWebView2NewWindowRequestedEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2NewWindowRequestedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2NewWindowRequestedEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2NewWindowRequestedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NewWindowRequestedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2NewWindowRequestedEventHandler_ImplVtbl<
        T: ICoreWebView2NewWindowRequestedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2NewWindowRequestedEventHandler_Impl>
        ICoreWebView2NewWindowRequestedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2NewWindowRequestedEventHandler_Vtbl =
            ICoreWebView2NewWindowRequestedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2NewWindowRequestedEventHandler {
        pub fn new<'a, T: ICoreWebView2NewWindowRequestedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2NewWindowRequestedEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2NonClientRegionChangedEventArgs,
        ICoreWebView2NonClientRegionChangedEventArgs_Vtbl
    );
    impl ICoreWebView2NonClientRegionChangedEventArgs {
        pub unsafe fn RegionKind(
            &self,
            value: COREWEBVIEW2_NON_CLIENT_REGION_KIND,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).RegionKind)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2NonClientRegionChangedEventArgs_Vtbl {
        pub RegionKind: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_NON_CLIENT_REGION_KIND,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2NonClientRegionChangedEventArgs_Impl {
        fn RegionKind(
            &self,
            value: COREWEBVIEW2_NON_CLIENT_REGION_KIND,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2NonClientRegionChangedEventArgs_Vtbl {
        pub const fn new<Identity: ICoreWebView2NonClientRegionChangedEventArgs_Impl>() -> Self {
            unsafe extern "system" fn RegionKind<
                Identity: ICoreWebView2NonClientRegionChangedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_NON_CLIENT_REGION_KIND,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NonClientRegionChangedEventArgs_Impl::RegionKind(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                RegionKind: RegionKind::<Identity>,
            }
        }
    }
    struct ICoreWebView2NonClientRegionChangedEventArgs_ImplVtbl<
        T: ICoreWebView2NonClientRegionChangedEventArgs_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2NonClientRegionChangedEventArgs_Impl>
        ICoreWebView2NonClientRegionChangedEventArgs_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2NonClientRegionChangedEventArgs_Vtbl =
            ICoreWebView2NonClientRegionChangedEventArgs_Vtbl::new::<T>();
    }
    impl ICoreWebView2NonClientRegionChangedEventArgs {
        pub fn new<'a, T: ICoreWebView2NonClientRegionChangedEventArgs_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2NonClientRegionChangedEventArgs_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2NonClientRegionChangedEventHandler,
        ICoreWebView2NonClientRegionChangedEventHandler_Vtbl
    );
    impl ICoreWebView2NonClientRegionChangedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2CompositionController>,
            P1: windows_core::Param<ICoreWebView2NonClientRegionChangedEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2NonClientRegionChangedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2NonClientRegionChangedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2CompositionController>,
            args: windows_core::Ref<'_, ICoreWebView2NonClientRegionChangedEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2NonClientRegionChangedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2NonClientRegionChangedEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2NonClientRegionChangedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NonClientRegionChangedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2NonClientRegionChangedEventHandler_ImplVtbl<
        T: ICoreWebView2NonClientRegionChangedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2NonClientRegionChangedEventHandler_Impl>
        ICoreWebView2NonClientRegionChangedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2NonClientRegionChangedEventHandler_Vtbl =
            ICoreWebView2NonClientRegionChangedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2NonClientRegionChangedEventHandler {
        pub fn new<'a, T: ICoreWebView2NonClientRegionChangedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2NonClientRegionChangedEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Notification, ICoreWebView2Notification_Vtbl);
    impl ICoreWebView2Notification {
        pub unsafe fn add_CloseRequested<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2NotificationCloseRequestedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_CloseRequested)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_CloseRequested(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_CloseRequested)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn ReportShown(&self) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ReportShown)(
                    windows_core::Interface::as_raw(self),
                )
                .ok()
            }
        }
        pub unsafe fn ReportClicked(&self) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ReportClicked)(
                    windows_core::Interface::as_raw(self),
                )
                .ok()
            }
        }
        pub unsafe fn ReportClosed(&self) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ReportClosed)(
                    windows_core::Interface::as_raw(self),
                )
                .ok()
            }
        }
        pub unsafe fn Body<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Body)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Direction(
            &self,
            value: COREWEBVIEW2_TEXT_DIRECTION_KIND,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Direction)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn Language<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Language)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Tag<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Tag)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn IconUri<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).IconUri)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Title<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Title)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn BadgeUri<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).BadgeUri)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn BodyImageUri<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).BodyImageUri)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn ShouldRenotify(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ShouldRenotify)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn RequiresInteraction(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).RequiresInteraction)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsSilent(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsSilent)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn Timestamp(&self, value: f64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Timestamp)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn GetVibrationPattern(
            &self,
            count: u32,
            vibrationpattern: u64,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).GetVibrationPattern)(
                    windows_core::Interface::as_raw(self),
                    count,
                    vibrationpattern,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Notification_Vtbl {
        pub add_CloseRequested: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_CloseRequested:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub ReportShown: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub ReportClicked:
            unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub ReportClosed:
            unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub Body: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub Direction: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_TEXT_DIRECTION_KIND,
        ) -> windows_core::HRESULT,
        pub Language: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub Tag: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub IconUri: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub Title: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub BadgeUri: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub BodyImageUri: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub ShouldRenotify: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub RequiresInteraction: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub IsSilent: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub Timestamp:
            unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
        pub GetVibrationPattern:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32, u64) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Notification_Impl {
        fn add_CloseRequested(
            &self,
            eventhandler: windows_core::Ref<
                '_,
                ICoreWebView2NotificationCloseRequestedEventHandler,
            >,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_CloseRequested(&self, token: i64) -> windows_core::Result<()>;
        fn ReportShown(&self) -> windows_core::Result<()>;
        fn ReportClicked(&self) -> windows_core::Result<()>;
        fn ReportClosed(&self) -> windows_core::Result<()>;
        fn Body(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn Direction(&self, value: COREWEBVIEW2_TEXT_DIRECTION_KIND) -> windows_core::Result<()>;
        fn Language(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn Tag(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn IconUri(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn Title(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn BadgeUri(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn BodyImageUri(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn ShouldRenotify(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn RequiresInteraction(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn IsSilent(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn Timestamp(&self, value: f64) -> windows_core::Result<()>;
        fn GetVibrationPattern(
            &self,
            count: u32,
            vibrationpattern: u64,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Notification_Vtbl {
        pub const fn new<Identity: ICoreWebView2Notification_Impl>() -> Self {
            unsafe extern "system" fn add_CloseRequested<
                Identity: ICoreWebView2Notification_Impl,
            >(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Notification_Impl::add_CloseRequested(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_CloseRequested<
                Identity: ICoreWebView2Notification_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Notification_Impl::remove_CloseRequested(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ReportShown<Identity: ICoreWebView2Notification_Impl>(
                this: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Notification_Impl::ReportShown(this).into()
                }
            }
            unsafe extern "system" fn ReportClicked<Identity: ICoreWebView2Notification_Impl>(
                this: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Notification_Impl::ReportClicked(this).into()
                }
            }
            unsafe extern "system" fn ReportClosed<Identity: ICoreWebView2Notification_Impl>(
                this: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Notification_Impl::ReportClosed(this).into()
                }
            }
            unsafe extern "system" fn Body<Identity: ICoreWebView2Notification_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Notification_Impl::Body(this, core::mem::transmute(&value)).into()
                }
            }
            unsafe extern "system" fn Direction<Identity: ICoreWebView2Notification_Impl>(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_TEXT_DIRECTION_KIND,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Notification_Impl::Direction(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Language<Identity: ICoreWebView2Notification_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Notification_Impl::Language(this, core::mem::transmute(&value))
                        .into()
                }
            }
            unsafe extern "system" fn Tag<Identity: ICoreWebView2Notification_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Notification_Impl::Tag(this, core::mem::transmute(&value)).into()
                }
            }
            unsafe extern "system" fn IconUri<Identity: ICoreWebView2Notification_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Notification_Impl::IconUri(this, core::mem::transmute(&value))
                        .into()
                }
            }
            unsafe extern "system" fn Title<Identity: ICoreWebView2Notification_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Notification_Impl::Title(this, core::mem::transmute(&value)).into()
                }
            }
            unsafe extern "system" fn BadgeUri<Identity: ICoreWebView2Notification_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Notification_Impl::BadgeUri(this, core::mem::transmute(&value))
                        .into()
                }
            }
            unsafe extern "system" fn BodyImageUri<Identity: ICoreWebView2Notification_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Notification_Impl::BodyImageUri(this, core::mem::transmute(&value))
                        .into()
                }
            }
            unsafe extern "system" fn ShouldRenotify<Identity: ICoreWebView2Notification_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Notification_Impl::ShouldRenotify(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn RequiresInteraction<
                Identity: ICoreWebView2Notification_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Notification_Impl::RequiresInteraction(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsSilent<Identity: ICoreWebView2Notification_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Notification_Impl::IsSilent(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Timestamp<Identity: ICoreWebView2Notification_Impl>(
                this: *mut core::ffi::c_void,
                value: f64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Notification_Impl::Timestamp(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn GetVibrationPattern<
                Identity: ICoreWebView2Notification_Impl,
            >(
                this: *mut core::ffi::c_void,
                count: u32,
                vibrationpattern: u64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Notification_Impl::GetVibrationPattern(
                        this,
                        core::mem::transmute_copy(&count),
                        core::mem::transmute_copy(&vibrationpattern),
                    )
                    .into()
                }
            }
            Self {
                add_CloseRequested: add_CloseRequested::<Identity>,
                remove_CloseRequested: remove_CloseRequested::<Identity>,
                ReportShown: ReportShown::<Identity>,
                ReportClicked: ReportClicked::<Identity>,
                ReportClosed: ReportClosed::<Identity>,
                Body: Body::<Identity>,
                Direction: Direction::<Identity>,
                Language: Language::<Identity>,
                Tag: Tag::<Identity>,
                IconUri: IconUri::<Identity>,
                Title: Title::<Identity>,
                BadgeUri: BadgeUri::<Identity>,
                BodyImageUri: BodyImageUri::<Identity>,
                ShouldRenotify: ShouldRenotify::<Identity>,
                RequiresInteraction: RequiresInteraction::<Identity>,
                IsSilent: IsSilent::<Identity>,
                Timestamp: Timestamp::<Identity>,
                GetVibrationPattern: GetVibrationPattern::<Identity>,
            }
        }
    }
    struct ICoreWebView2Notification_ImplVtbl<T: ICoreWebView2Notification_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Notification_Impl> ICoreWebView2Notification_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Notification_Vtbl = ICoreWebView2Notification_Vtbl::new::<T>();
    }
    impl ICoreWebView2Notification {
        pub fn new<'a, T: ICoreWebView2Notification_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Notification_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2NotificationCloseRequestedEventHandler,
        ICoreWebView2NotificationCloseRequestedEventHandler_Vtbl
    );
    impl ICoreWebView2NotificationCloseRequestedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Notification>,
            P1: windows_core::Param<windows_core::IUnknown>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2NotificationCloseRequestedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2NotificationCloseRequestedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2Notification>,
            args: windows_core::Ref<'_, windows_core::IUnknown>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2NotificationCloseRequestedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2NotificationCloseRequestedEventHandler_Impl>(
        ) -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2NotificationCloseRequestedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NotificationCloseRequestedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2NotificationCloseRequestedEventHandler_ImplVtbl<
        T: ICoreWebView2NotificationCloseRequestedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2NotificationCloseRequestedEventHandler_Impl>
        ICoreWebView2NotificationCloseRequestedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2NotificationCloseRequestedEventHandler_Vtbl =
            ICoreWebView2NotificationCloseRequestedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2NotificationCloseRequestedEventHandler {
        pub fn new<'a, T: ICoreWebView2NotificationCloseRequestedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2NotificationCloseRequestedEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2NotificationReceivedEventArgs,
        ICoreWebView2NotificationReceivedEventArgs_Vtbl
    );
    impl ICoreWebView2NotificationReceivedEventArgs {
        pub unsafe fn SenderOrigin<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).SenderOrigin)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Notification<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Notification>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Notification)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Handled(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Handled)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn Handled2(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Handled2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn GetDeferral<P0>(&self, deferral: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Deferral>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetDeferral)(
                    windows_core::Interface::as_raw(self),
                    deferral.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2NotificationReceivedEventArgs_Vtbl {
        pub SenderOrigin: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub Notification: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Handled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub Handled2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub GetDeferral: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2NotificationReceivedEventArgs_Impl {
        fn SenderOrigin(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn Notification(
            &self,
            value: windows_core::Ref<'_, ICoreWebView2Notification>,
        ) -> windows_core::Result<()>;
        fn Handled(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn Handled2(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn GetDeferral(
            &self,
            deferral: windows_core::Ref<'_, ICoreWebView2Deferral>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2NotificationReceivedEventArgs_Vtbl {
        pub const fn new<Identity: ICoreWebView2NotificationReceivedEventArgs_Impl>() -> Self {
            unsafe extern "system" fn SenderOrigin<
                Identity: ICoreWebView2NotificationReceivedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NotificationReceivedEventArgs_Impl::SenderOrigin(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Notification<
                Identity: ICoreWebView2NotificationReceivedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NotificationReceivedEventArgs_Impl::Notification(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Handled<
                Identity: ICoreWebView2NotificationReceivedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NotificationReceivedEventArgs_Impl::Handled(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Handled2<
                Identity: ICoreWebView2NotificationReceivedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NotificationReceivedEventArgs_Impl::Handled2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn GetDeferral<
                Identity: ICoreWebView2NotificationReceivedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                deferral: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NotificationReceivedEventArgs_Impl::GetDeferral(
                        this,
                        core::mem::transmute_copy(&deferral),
                    )
                    .into()
                }
            }
            Self {
                SenderOrigin: SenderOrigin::<Identity>,
                Notification: Notification::<Identity>,
                Handled: Handled::<Identity>,
                Handled2: Handled2::<Identity>,
                GetDeferral: GetDeferral::<Identity>,
            }
        }
    }
    struct ICoreWebView2NotificationReceivedEventArgs_ImplVtbl<
        T: ICoreWebView2NotificationReceivedEventArgs_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2NotificationReceivedEventArgs_Impl>
        ICoreWebView2NotificationReceivedEventArgs_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2NotificationReceivedEventArgs_Vtbl =
            ICoreWebView2NotificationReceivedEventArgs_Vtbl::new::<T>();
    }
    impl ICoreWebView2NotificationReceivedEventArgs {
        pub fn new<'a, T: ICoreWebView2NotificationReceivedEventArgs_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2NotificationReceivedEventArgs_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2NotificationReceivedEventHandler,
        ICoreWebView2NotificationReceivedEventHandler_Vtbl
    );
    impl ICoreWebView2NotificationReceivedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
            P1: windows_core::Param<ICoreWebView2NotificationReceivedEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2NotificationReceivedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2NotificationReceivedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2>,
            args: windows_core::Ref<'_, ICoreWebView2NotificationReceivedEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2NotificationReceivedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2NotificationReceivedEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2NotificationReceivedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2NotificationReceivedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2NotificationReceivedEventHandler_ImplVtbl<
        T: ICoreWebView2NotificationReceivedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2NotificationReceivedEventHandler_Impl>
        ICoreWebView2NotificationReceivedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2NotificationReceivedEventHandler_Vtbl =
            ICoreWebView2NotificationReceivedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2NotificationReceivedEventHandler {
        pub fn new<'a, T: ICoreWebView2NotificationReceivedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2NotificationReceivedEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ObjectCollection,
        ICoreWebView2ObjectCollection_Vtbl
    );
    impl ICoreWebView2ObjectCollection {
        pub unsafe fn RemoveValueAtIndex(&self, index: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).RemoveValueAtIndex)(
                    windows_core::Interface::as_raw(self),
                    index,
                )
                .ok()
            }
        }
        pub unsafe fn InsertValueAtIndex<P1>(
            &self,
            index: u32,
            value: P1,
        ) -> windows_core::Result<()>
        where
            P1: windows_core::Param<windows_core::IUnknown>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).InsertValueAtIndex)(
                    windows_core::Interface::as_raw(self),
                    index,
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ObjectCollection_Vtbl {
        pub RemoveValueAtIndex:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub InsertValueAtIndex: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ObjectCollection_Impl {
        fn RemoveValueAtIndex(&self, index: u32) -> windows_core::Result<()>;
        fn InsertValueAtIndex(
            &self,
            index: u32,
            value: windows_core::Ref<'_, windows_core::IUnknown>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ObjectCollection_Vtbl {
        pub const fn new<Identity: ICoreWebView2ObjectCollection_Impl>() -> Self {
            unsafe extern "system" fn RemoveValueAtIndex<
                Identity: ICoreWebView2ObjectCollection_Impl,
            >(
                this: *mut core::ffi::c_void,
                index: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ObjectCollection_Impl::RemoveValueAtIndex(
                        this,
                        core::mem::transmute_copy(&index),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn InsertValueAtIndex<
                Identity: ICoreWebView2ObjectCollection_Impl,
            >(
                this: *mut core::ffi::c_void,
                index: u32,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ObjectCollection_Impl::InsertValueAtIndex(
                        this,
                        core::mem::transmute_copy(&index),
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                RemoveValueAtIndex: RemoveValueAtIndex::<Identity>,
                InsertValueAtIndex: InsertValueAtIndex::<Identity>,
            }
        }
    }
    struct ICoreWebView2ObjectCollection_ImplVtbl<T: ICoreWebView2ObjectCollection_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2ObjectCollection_Impl> ICoreWebView2ObjectCollection_ImplVtbl<T> {
        const VTABLE: ICoreWebView2ObjectCollection_Vtbl =
            ICoreWebView2ObjectCollection_Vtbl::new::<T>();
    }
    impl ICoreWebView2ObjectCollection {
        pub fn new<'a, T: ICoreWebView2ObjectCollection_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ObjectCollection_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ObjectCollectionView,
        ICoreWebView2ObjectCollectionView_Vtbl
    );
    impl ICoreWebView2ObjectCollectionView {
        pub unsafe fn Count(&self, value: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Count)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn GetValueAtIndex<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
        where
            P1: windows_core::Param<windows_core::IUnknown>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetValueAtIndex)(
                    windows_core::Interface::as_raw(self),
                    index,
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ObjectCollectionView_Vtbl {
        pub Count: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub GetValueAtIndex: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ObjectCollectionView_Impl {
        fn Count(&self, value: u32) -> windows_core::Result<()>;
        fn GetValueAtIndex(
            &self,
            index: u32,
            value: windows_core::Ref<'_, windows_core::IUnknown>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ObjectCollectionView_Vtbl {
        pub const fn new<Identity: ICoreWebView2ObjectCollectionView_Impl>() -> Self {
            unsafe extern "system" fn Count<Identity: ICoreWebView2ObjectCollectionView_Impl>(
                this: *mut core::ffi::c_void,
                value: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ObjectCollectionView_Impl::Count(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn GetValueAtIndex<
                Identity: ICoreWebView2ObjectCollectionView_Impl,
            >(
                this: *mut core::ffi::c_void,
                index: u32,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ObjectCollectionView_Impl::GetValueAtIndex(
                        this,
                        core::mem::transmute_copy(&index),
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                Count: Count::<Identity>,
                GetValueAtIndex: GetValueAtIndex::<Identity>,
            }
        }
    }
    struct ICoreWebView2ObjectCollectionView_ImplVtbl<T: ICoreWebView2ObjectCollectionView_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2ObjectCollectionView_Impl> ICoreWebView2ObjectCollectionView_ImplVtbl<T> {
        const VTABLE: ICoreWebView2ObjectCollectionView_Vtbl =
            ICoreWebView2ObjectCollectionView_Vtbl::new::<T>();
    }
    impl ICoreWebView2ObjectCollectionView {
        pub fn new<'a, T: ICoreWebView2ObjectCollectionView_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ObjectCollectionView_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2PermissionRequestedEventArgs,
        ICoreWebView2PermissionRequestedEventArgs_Vtbl
    );
    impl ICoreWebView2PermissionRequestedEventArgs {
        pub unsafe fn Uri<P0>(&self, uri: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Uri)(
                    windows_core::Interface::as_raw(self),
                    uri.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn PermissionKind(
            &self,
            permissionkind: COREWEBVIEW2_PERMISSION_KIND,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PermissionKind)(
                    windows_core::Interface::as_raw(self),
                    permissionkind,
                )
                .ok()
            }
        }
        pub unsafe fn IsUserInitiated(&self, isuserinitiated: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsUserInitiated)(
                    windows_core::Interface::as_raw(self),
                    isuserinitiated.into(),
                )
                .ok()
            }
        }
        pub unsafe fn State(
            &self,
            state: COREWEBVIEW2_PERMISSION_STATE,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).State)(
                    windows_core::Interface::as_raw(self),
                    state,
                )
                .ok()
            }
        }
        pub unsafe fn State2(
            &self,
            state: COREWEBVIEW2_PERMISSION_STATE,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).State2)(
                    windows_core::Interface::as_raw(self),
                    state,
                )
                .ok()
            }
        }
        pub unsafe fn GetDeferral<P0>(&self, deferral: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Deferral>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetDeferral)(
                    windows_core::Interface::as_raw(self),
                    deferral.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2PermissionRequestedEventArgs_Vtbl {
        pub Uri: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub PermissionKind: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_PERMISSION_KIND,
        ) -> windows_core::HRESULT,
        pub IsUserInitiated: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub State: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_PERMISSION_STATE,
        ) -> windows_core::HRESULT,
        pub State2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_PERMISSION_STATE,
        ) -> windows_core::HRESULT,
        pub GetDeferral: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2PermissionRequestedEventArgs_Impl {
        fn Uri(&self, uri: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn PermissionKind(
            &self,
            permissionkind: COREWEBVIEW2_PERMISSION_KIND,
        ) -> windows_core::Result<()>;
        fn IsUserInitiated(&self, isuserinitiated: windows_core::BOOL) -> windows_core::Result<()>;
        fn State(&self, state: COREWEBVIEW2_PERMISSION_STATE) -> windows_core::Result<()>;
        fn State2(&self, state: COREWEBVIEW2_PERMISSION_STATE) -> windows_core::Result<()>;
        fn GetDeferral(
            &self,
            deferral: windows_core::Ref<'_, ICoreWebView2Deferral>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2PermissionRequestedEventArgs_Vtbl {
        pub const fn new<Identity: ICoreWebView2PermissionRequestedEventArgs_Impl>() -> Self {
            unsafe extern "system" fn Uri<
                Identity: ICoreWebView2PermissionRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                uri: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PermissionRequestedEventArgs_Impl::Uri(
                        this,
                        core::mem::transmute(&uri),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PermissionKind<
                Identity: ICoreWebView2PermissionRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                permissionkind: COREWEBVIEW2_PERMISSION_KIND,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PermissionRequestedEventArgs_Impl::PermissionKind(
                        this,
                        core::mem::transmute_copy(&permissionkind),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsUserInitiated<
                Identity: ICoreWebView2PermissionRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                isuserinitiated: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PermissionRequestedEventArgs_Impl::IsUserInitiated(
                        this,
                        core::mem::transmute_copy(&isuserinitiated),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn State<
                Identity: ICoreWebView2PermissionRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                state: COREWEBVIEW2_PERMISSION_STATE,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PermissionRequestedEventArgs_Impl::State(
                        this,
                        core::mem::transmute_copy(&state),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn State2<
                Identity: ICoreWebView2PermissionRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                state: COREWEBVIEW2_PERMISSION_STATE,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PermissionRequestedEventArgs_Impl::State2(
                        this,
                        core::mem::transmute_copy(&state),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn GetDeferral<
                Identity: ICoreWebView2PermissionRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                deferral: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PermissionRequestedEventArgs_Impl::GetDeferral(
                        this,
                        core::mem::transmute_copy(&deferral),
                    )
                    .into()
                }
            }
            Self {
                Uri: Uri::<Identity>,
                PermissionKind: PermissionKind::<Identity>,
                IsUserInitiated: IsUserInitiated::<Identity>,
                State: State::<Identity>,
                State2: State2::<Identity>,
                GetDeferral: GetDeferral::<Identity>,
            }
        }
    }
    struct ICoreWebView2PermissionRequestedEventArgs_ImplVtbl<
        T: ICoreWebView2PermissionRequestedEventArgs_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2PermissionRequestedEventArgs_Impl>
        ICoreWebView2PermissionRequestedEventArgs_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2PermissionRequestedEventArgs_Vtbl =
            ICoreWebView2PermissionRequestedEventArgs_Vtbl::new::<T>();
    }
    impl ICoreWebView2PermissionRequestedEventArgs {
        pub fn new<'a, T: ICoreWebView2PermissionRequestedEventArgs_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2PermissionRequestedEventArgs_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2PermissionRequestedEventArgs2,
        ICoreWebView2PermissionRequestedEventArgs2_Vtbl
    );
    impl ICoreWebView2PermissionRequestedEventArgs2 {
        pub unsafe fn Handled(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Handled)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn Handled2(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Handled2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2PermissionRequestedEventArgs2_Vtbl {
        pub Handled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub Handled2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2PermissionRequestedEventArgs2_Impl {
        fn Handled(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn Handled2(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
    }
    impl ICoreWebView2PermissionRequestedEventArgs2_Vtbl {
        pub const fn new<Identity: ICoreWebView2PermissionRequestedEventArgs2_Impl>() -> Self {
            unsafe extern "system" fn Handled<
                Identity: ICoreWebView2PermissionRequestedEventArgs2_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PermissionRequestedEventArgs2_Impl::Handled(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Handled2<
                Identity: ICoreWebView2PermissionRequestedEventArgs2_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PermissionRequestedEventArgs2_Impl::Handled2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                Handled: Handled::<Identity>,
                Handled2: Handled2::<Identity>,
            }
        }
    }
    struct ICoreWebView2PermissionRequestedEventArgs2_ImplVtbl<
        T: ICoreWebView2PermissionRequestedEventArgs2_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2PermissionRequestedEventArgs2_Impl>
        ICoreWebView2PermissionRequestedEventArgs2_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2PermissionRequestedEventArgs2_Vtbl =
            ICoreWebView2PermissionRequestedEventArgs2_Vtbl::new::<T>();
    }
    impl ICoreWebView2PermissionRequestedEventArgs2 {
        pub fn new<'a, T: ICoreWebView2PermissionRequestedEventArgs2_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2PermissionRequestedEventArgs2_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2PermissionRequestedEventArgs3,
        ICoreWebView2PermissionRequestedEventArgs3_Vtbl
    );
    impl ICoreWebView2PermissionRequestedEventArgs3 {
        pub unsafe fn SavesInProfile(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).SavesInProfile)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn SavesInProfile2(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).SavesInProfile2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2PermissionRequestedEventArgs3_Vtbl {
        pub SavesInProfile: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub SavesInProfile2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2PermissionRequestedEventArgs3_Impl {
        fn SavesInProfile(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn SavesInProfile2(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
    }
    impl ICoreWebView2PermissionRequestedEventArgs3_Vtbl {
        pub const fn new<Identity: ICoreWebView2PermissionRequestedEventArgs3_Impl>() -> Self {
            unsafe extern "system" fn SavesInProfile<
                Identity: ICoreWebView2PermissionRequestedEventArgs3_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PermissionRequestedEventArgs3_Impl::SavesInProfile(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn SavesInProfile2<
                Identity: ICoreWebView2PermissionRequestedEventArgs3_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PermissionRequestedEventArgs3_Impl::SavesInProfile2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                SavesInProfile: SavesInProfile::<Identity>,
                SavesInProfile2: SavesInProfile2::<Identity>,
            }
        }
    }
    struct ICoreWebView2PermissionRequestedEventArgs3_ImplVtbl<
        T: ICoreWebView2PermissionRequestedEventArgs3_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2PermissionRequestedEventArgs3_Impl>
        ICoreWebView2PermissionRequestedEventArgs3_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2PermissionRequestedEventArgs3_Vtbl =
            ICoreWebView2PermissionRequestedEventArgs3_Vtbl::new::<T>();
    }
    impl ICoreWebView2PermissionRequestedEventArgs3 {
        pub fn new<'a, T: ICoreWebView2PermissionRequestedEventArgs3_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2PermissionRequestedEventArgs3_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2PermissionRequestedEventHandler,
        ICoreWebView2PermissionRequestedEventHandler_Vtbl
    );
    impl ICoreWebView2PermissionRequestedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
            P1: windows_core::Param<ICoreWebView2PermissionRequestedEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2PermissionRequestedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2PermissionRequestedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2>,
            args: windows_core::Ref<'_, ICoreWebView2PermissionRequestedEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2PermissionRequestedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2PermissionRequestedEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2PermissionRequestedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PermissionRequestedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2PermissionRequestedEventHandler_ImplVtbl<
        T: ICoreWebView2PermissionRequestedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2PermissionRequestedEventHandler_Impl>
        ICoreWebView2PermissionRequestedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2PermissionRequestedEventHandler_Vtbl =
            ICoreWebView2PermissionRequestedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2PermissionRequestedEventHandler {
        pub fn new<'a, T: ICoreWebView2PermissionRequestedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2PermissionRequestedEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2PermissionSetting,
        ICoreWebView2PermissionSetting_Vtbl
    );
    impl ICoreWebView2PermissionSetting {
        pub unsafe fn PermissionKind(
            &self,
            value: COREWEBVIEW2_PERMISSION_KIND,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PermissionKind)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn PermissionOrigin<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).PermissionOrigin)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn PermissionState(
            &self,
            value: COREWEBVIEW2_PERMISSION_STATE,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PermissionState)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2PermissionSetting_Vtbl {
        pub PermissionKind: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_PERMISSION_KIND,
        ) -> windows_core::HRESULT,
        pub PermissionOrigin: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub PermissionState: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_PERMISSION_STATE,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2PermissionSetting_Impl {
        fn PermissionKind(&self, value: COREWEBVIEW2_PERMISSION_KIND) -> windows_core::Result<()>;
        fn PermissionOrigin(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn PermissionState(&self, value: COREWEBVIEW2_PERMISSION_STATE)
            -> windows_core::Result<()>;
    }
    impl ICoreWebView2PermissionSetting_Vtbl {
        pub const fn new<Identity: ICoreWebView2PermissionSetting_Impl>() -> Self {
            unsafe extern "system" fn PermissionKind<
                Identity: ICoreWebView2PermissionSetting_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_PERMISSION_KIND,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PermissionSetting_Impl::PermissionKind(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PermissionOrigin<
                Identity: ICoreWebView2PermissionSetting_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PermissionSetting_Impl::PermissionOrigin(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PermissionState<
                Identity: ICoreWebView2PermissionSetting_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_PERMISSION_STATE,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PermissionSetting_Impl::PermissionState(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                PermissionKind: PermissionKind::<Identity>,
                PermissionOrigin: PermissionOrigin::<Identity>,
                PermissionState: PermissionState::<Identity>,
            }
        }
    }
    struct ICoreWebView2PermissionSetting_ImplVtbl<T: ICoreWebView2PermissionSetting_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2PermissionSetting_Impl> ICoreWebView2PermissionSetting_ImplVtbl<T> {
        const VTABLE: ICoreWebView2PermissionSetting_Vtbl =
            ICoreWebView2PermissionSetting_Vtbl::new::<T>();
    }
    impl ICoreWebView2PermissionSetting {
        pub fn new<'a, T: ICoreWebView2PermissionSetting_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2PermissionSetting_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2PermissionSettingCollectionView,
        ICoreWebView2PermissionSettingCollectionView_Vtbl
    );
    impl ICoreWebView2PermissionSettingCollectionView {
        pub unsafe fn GetValueAtIndex<P1>(
            &self,
            index: u32,
            permissionsetting: P1,
        ) -> windows_core::Result<()>
        where
            P1: windows_core::Param<ICoreWebView2PermissionSetting>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetValueAtIndex)(
                    windows_core::Interface::as_raw(self),
                    index,
                    permissionsetting.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Count(&self, value: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Count)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2PermissionSettingCollectionView_Vtbl {
        pub GetValueAtIndex: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Count: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2PermissionSettingCollectionView_Impl {
        fn GetValueAtIndex(
            &self,
            index: u32,
            permissionsetting: windows_core::Ref<'_, ICoreWebView2PermissionSetting>,
        ) -> windows_core::Result<()>;
        fn Count(&self, value: u32) -> windows_core::Result<()>;
    }
    impl ICoreWebView2PermissionSettingCollectionView_Vtbl {
        pub const fn new<Identity: ICoreWebView2PermissionSettingCollectionView_Impl>() -> Self {
            unsafe extern "system" fn GetValueAtIndex<
                Identity: ICoreWebView2PermissionSettingCollectionView_Impl,
            >(
                this: *mut core::ffi::c_void,
                index: u32,
                permissionsetting: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PermissionSettingCollectionView_Impl::GetValueAtIndex(
                        this,
                        core::mem::transmute_copy(&index),
                        core::mem::transmute_copy(&permissionsetting),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Count<
                Identity: ICoreWebView2PermissionSettingCollectionView_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PermissionSettingCollectionView_Impl::Count(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                GetValueAtIndex: GetValueAtIndex::<Identity>,
                Count: Count::<Identity>,
            }
        }
    }
    struct ICoreWebView2PermissionSettingCollectionView_ImplVtbl<
        T: ICoreWebView2PermissionSettingCollectionView_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2PermissionSettingCollectionView_Impl>
        ICoreWebView2PermissionSettingCollectionView_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2PermissionSettingCollectionView_Vtbl =
            ICoreWebView2PermissionSettingCollectionView_Vtbl::new::<T>();
    }
    impl ICoreWebView2PermissionSettingCollectionView {
        pub fn new<'a, T: ICoreWebView2PermissionSettingCollectionView_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2PermissionSettingCollectionView_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2PointerInfo, ICoreWebView2PointerInfo_Vtbl);
    impl ICoreWebView2PointerInfo {
        pub unsafe fn PointerKind(&self, pointerkind: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PointerKind)(
                    windows_core::Interface::as_raw(self),
                    pointerkind,
                )
                .ok()
            }
        }
        pub unsafe fn PointerKind2(&self, pointerkind: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PointerKind2)(
                    windows_core::Interface::as_raw(self),
                    pointerkind,
                )
                .ok()
            }
        }
        pub unsafe fn PointerId(&self, pointerid: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PointerId)(
                    windows_core::Interface::as_raw(self),
                    pointerid,
                )
                .ok()
            }
        }
        pub unsafe fn PointerId2(&self, pointerid: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PointerId2)(
                    windows_core::Interface::as_raw(self),
                    pointerid,
                )
                .ok()
            }
        }
        pub unsafe fn FrameId(&self, frameid: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).FrameId)(
                    windows_core::Interface::as_raw(self),
                    frameid,
                )
                .ok()
            }
        }
        pub unsafe fn FrameId2(&self, frameid: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).FrameId2)(
                    windows_core::Interface::as_raw(self),
                    frameid,
                )
                .ok()
            }
        }
        pub unsafe fn PointerFlags(&self, pointerflags: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PointerFlags)(
                    windows_core::Interface::as_raw(self),
                    pointerflags,
                )
                .ok()
            }
        }
        pub unsafe fn PointerFlags2(&self, pointerflags: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PointerFlags2)(
                    windows_core::Interface::as_raw(self),
                    pointerflags,
                )
                .ok()
            }
        }
        pub unsafe fn Time(&self, time: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Time)(
                    windows_core::Interface::as_raw(self),
                    time,
                )
                .ok()
            }
        }
        pub unsafe fn Time2(&self, time: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Time2)(
                    windows_core::Interface::as_raw(self),
                    time,
                )
                .ok()
            }
        }
        pub unsafe fn HistoryCount(&self, historycount: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).HistoryCount)(
                    windows_core::Interface::as_raw(self),
                    historycount,
                )
                .ok()
            }
        }
        pub unsafe fn HistoryCount2(&self, historycount: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).HistoryCount2)(
                    windows_core::Interface::as_raw(self),
                    historycount,
                )
                .ok()
            }
        }
        pub unsafe fn InputData(&self, inputdata: i32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).InputData)(
                    windows_core::Interface::as_raw(self),
                    inputdata,
                )
                .ok()
            }
        }
        pub unsafe fn InputData2(&self, inputdata: i32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).InputData2)(
                    windows_core::Interface::as_raw(self),
                    inputdata,
                )
                .ok()
            }
        }
        pub unsafe fn KeyStates(&self, keystates: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).KeyStates)(
                    windows_core::Interface::as_raw(self),
                    keystates,
                )
                .ok()
            }
        }
        pub unsafe fn KeyStates2(&self, keystates: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).KeyStates2)(
                    windows_core::Interface::as_raw(self),
                    keystates,
                )
                .ok()
            }
        }
        pub unsafe fn PerformanceCount(&self, performancecount: u64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PerformanceCount)(
                    windows_core::Interface::as_raw(self),
                    performancecount,
                )
                .ok()
            }
        }
        pub unsafe fn PerformanceCount2(&self, performancecount: u64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PerformanceCount2)(
                    windows_core::Interface::as_raw(self),
                    performancecount,
                )
                .ok()
            }
        }
        pub unsafe fn ButtonChangeKind(&self, buttonchangekind: i32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ButtonChangeKind)(
                    windows_core::Interface::as_raw(self),
                    buttonchangekind,
                )
                .ok()
            }
        }
        pub unsafe fn ButtonChangeKind2(&self, buttonchangekind: i32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ButtonChangeKind2)(
                    windows_core::Interface::as_raw(self),
                    buttonchangekind,
                )
                .ok()
            }
        }
        pub unsafe fn PenFlags(&self, penflags: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PenFlags)(
                    windows_core::Interface::as_raw(self),
                    penflags,
                )
                .ok()
            }
        }
        pub unsafe fn PenFlags2(&self, penflags: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PenFlags2)(
                    windows_core::Interface::as_raw(self),
                    penflags,
                )
                .ok()
            }
        }
        pub unsafe fn PenMask(&self, penmask: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PenMask)(
                    windows_core::Interface::as_raw(self),
                    penmask,
                )
                .ok()
            }
        }
        pub unsafe fn PenMask2(&self, penmask: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PenMask2)(
                    windows_core::Interface::as_raw(self),
                    penmask,
                )
                .ok()
            }
        }
        pub unsafe fn PenPressure(&self, penpressure: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PenPressure)(
                    windows_core::Interface::as_raw(self),
                    penpressure,
                )
                .ok()
            }
        }
        pub unsafe fn PenPressure2(&self, penpressure: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PenPressure2)(
                    windows_core::Interface::as_raw(self),
                    penpressure,
                )
                .ok()
            }
        }
        pub unsafe fn PenRotation(&self, penrotation: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PenRotation)(
                    windows_core::Interface::as_raw(self),
                    penrotation,
                )
                .ok()
            }
        }
        pub unsafe fn PenRotation2(&self, penrotation: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PenRotation2)(
                    windows_core::Interface::as_raw(self),
                    penrotation,
                )
                .ok()
            }
        }
        pub unsafe fn PenTiltX(&self, pentiltx: i32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PenTiltX)(
                    windows_core::Interface::as_raw(self),
                    pentiltx,
                )
                .ok()
            }
        }
        pub unsafe fn PenTiltX2(&self, pentiltx: i32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PenTiltX2)(
                    windows_core::Interface::as_raw(self),
                    pentiltx,
                )
                .ok()
            }
        }
        pub unsafe fn PenTiltY(&self, pentilty: i32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PenTiltY)(
                    windows_core::Interface::as_raw(self),
                    pentilty,
                )
                .ok()
            }
        }
        pub unsafe fn PenTiltY2(&self, pentilty: i32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PenTiltY2)(
                    windows_core::Interface::as_raw(self),
                    pentilty,
                )
                .ok()
            }
        }
        pub unsafe fn TouchFlags(&self, touchflags: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).TouchFlags)(
                    windows_core::Interface::as_raw(self),
                    touchflags,
                )
                .ok()
            }
        }
        pub unsafe fn TouchFlags2(&self, touchflags: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).TouchFlags2)(
                    windows_core::Interface::as_raw(self),
                    touchflags,
                )
                .ok()
            }
        }
        pub unsafe fn TouchMask(&self, touchmask: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).TouchMask)(
                    windows_core::Interface::as_raw(self),
                    touchmask,
                )
                .ok()
            }
        }
        pub unsafe fn TouchMask2(&self, touchmask: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).TouchMask2)(
                    windows_core::Interface::as_raw(self),
                    touchmask,
                )
                .ok()
            }
        }
        pub unsafe fn TouchOrientation(&self, touchorientation: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).TouchOrientation)(
                    windows_core::Interface::as_raw(self),
                    touchorientation,
                )
                .ok()
            }
        }
        pub unsafe fn TouchOrientation2(&self, touchorientation: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).TouchOrientation2)(
                    windows_core::Interface::as_raw(self),
                    touchorientation,
                )
                .ok()
            }
        }
        pub unsafe fn TouchPressure(&self, touchpressure: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).TouchPressure)(
                    windows_core::Interface::as_raw(self),
                    touchpressure,
                )
                .ok()
            }
        }
        pub unsafe fn TouchPressure2(&self, touchpressure: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).TouchPressure2)(
                    windows_core::Interface::as_raw(self),
                    touchpressure,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2PointerInfo_Vtbl {
        pub PointerKind:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub PointerKind2:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub PointerId:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub PointerId2:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub FrameId:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub FrameId2:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub PointerFlags:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub PointerFlags2:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        PointerDeviceRect: usize,
        PointerDeviceRect2: usize,
        DisplayRect: usize,
        DisplayRect2: usize,
        PixelLocation: usize,
        PixelLocation2: usize,
        HimetricLocation: usize,
        HimetricLocation2: usize,
        PixelLocationRaw: usize,
        PixelLocationRaw2: usize,
        HimetricLocationRaw: usize,
        HimetricLocationRaw2: usize,
        pub Time: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub Time2: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub HistoryCount:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub HistoryCount2:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub InputData:
            unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
        pub InputData2:
            unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
        pub KeyStates:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub KeyStates2:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub PerformanceCount:
            unsafe extern "system" fn(*mut core::ffi::c_void, u64) -> windows_core::HRESULT,
        pub PerformanceCount2:
            unsafe extern "system" fn(*mut core::ffi::c_void, u64) -> windows_core::HRESULT,
        pub ButtonChangeKind:
            unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
        pub ButtonChangeKind2:
            unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
        pub PenFlags:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub PenFlags2:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub PenMask:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub PenMask2:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub PenPressure:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub PenPressure2:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub PenRotation:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub PenRotation2:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub PenTiltX:
            unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
        pub PenTiltX2:
            unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
        pub PenTiltY:
            unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
        pub PenTiltY2:
            unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
        pub TouchFlags:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub TouchFlags2:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub TouchMask:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub TouchMask2:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        TouchContact: usize,
        TouchContact2: usize,
        TouchContactRaw: usize,
        TouchContactRaw2: usize,
        pub TouchOrientation:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub TouchOrientation2:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub TouchPressure:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub TouchPressure2:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2PointerInfo_Impl {
        fn PointerKind(&self, pointerkind: u32) -> windows_core::Result<()>;
        fn PointerKind2(&self, pointerkind: u32) -> windows_core::Result<()>;
        fn PointerId(&self, pointerid: u32) -> windows_core::Result<()>;
        fn PointerId2(&self, pointerid: u32) -> windows_core::Result<()>;
        fn FrameId(&self, frameid: u32) -> windows_core::Result<()>;
        fn FrameId2(&self, frameid: u32) -> windows_core::Result<()>;
        fn PointerFlags(&self, pointerflags: u32) -> windows_core::Result<()>;
        fn PointerFlags2(&self, pointerflags: u32) -> windows_core::Result<()>;
        fn Time(&self, time: u32) -> windows_core::Result<()>;
        fn Time2(&self, time: u32) -> windows_core::Result<()>;
        fn HistoryCount(&self, historycount: u32) -> windows_core::Result<()>;
        fn HistoryCount2(&self, historycount: u32) -> windows_core::Result<()>;
        fn InputData(&self, inputdata: i32) -> windows_core::Result<()>;
        fn InputData2(&self, inputdata: i32) -> windows_core::Result<()>;
        fn KeyStates(&self, keystates: u32) -> windows_core::Result<()>;
        fn KeyStates2(&self, keystates: u32) -> windows_core::Result<()>;
        fn PerformanceCount(&self, performancecount: u64) -> windows_core::Result<()>;
        fn PerformanceCount2(&self, performancecount: u64) -> windows_core::Result<()>;
        fn ButtonChangeKind(&self, buttonchangekind: i32) -> windows_core::Result<()>;
        fn ButtonChangeKind2(&self, buttonchangekind: i32) -> windows_core::Result<()>;
        fn PenFlags(&self, penflags: u32) -> windows_core::Result<()>;
        fn PenFlags2(&self, penflags: u32) -> windows_core::Result<()>;
        fn PenMask(&self, penmask: u32) -> windows_core::Result<()>;
        fn PenMask2(&self, penmask: u32) -> windows_core::Result<()>;
        fn PenPressure(&self, penpressure: u32) -> windows_core::Result<()>;
        fn PenPressure2(&self, penpressure: u32) -> windows_core::Result<()>;
        fn PenRotation(&self, penrotation: u32) -> windows_core::Result<()>;
        fn PenRotation2(&self, penrotation: u32) -> windows_core::Result<()>;
        fn PenTiltX(&self, pentiltx: i32) -> windows_core::Result<()>;
        fn PenTiltX2(&self, pentiltx: i32) -> windows_core::Result<()>;
        fn PenTiltY(&self, pentilty: i32) -> windows_core::Result<()>;
        fn PenTiltY2(&self, pentilty: i32) -> windows_core::Result<()>;
        fn TouchFlags(&self, touchflags: u32) -> windows_core::Result<()>;
        fn TouchFlags2(&self, touchflags: u32) -> windows_core::Result<()>;
        fn TouchMask(&self, touchmask: u32) -> windows_core::Result<()>;
        fn TouchMask2(&self, touchmask: u32) -> windows_core::Result<()>;
        fn TouchOrientation(&self, touchorientation: u32) -> windows_core::Result<()>;
        fn TouchOrientation2(&self, touchorientation: u32) -> windows_core::Result<()>;
        fn TouchPressure(&self, touchpressure: u32) -> windows_core::Result<()>;
        fn TouchPressure2(&self, touchpressure: u32) -> windows_core::Result<()>;
    }
    impl ICoreWebView2PointerInfo_Vtbl {
        pub const fn new<Identity: ICoreWebView2PointerInfo_Impl>() -> Self {
            unsafe extern "system" fn PointerKind<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                pointerkind: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::PointerKind(
                        this,
                        core::mem::transmute_copy(&pointerkind),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PointerKind2<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                pointerkind: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::PointerKind2(
                        this,
                        core::mem::transmute_copy(&pointerkind),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PointerId<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                pointerid: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::PointerId(
                        this,
                        core::mem::transmute_copy(&pointerid),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PointerId2<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                pointerid: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::PointerId2(
                        this,
                        core::mem::transmute_copy(&pointerid),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn FrameId<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                frameid: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::FrameId(
                        this,
                        core::mem::transmute_copy(&frameid),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn FrameId2<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                frameid: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::FrameId2(
                        this,
                        core::mem::transmute_copy(&frameid),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PointerFlags<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                pointerflags: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::PointerFlags(
                        this,
                        core::mem::transmute_copy(&pointerflags),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PointerFlags2<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                pointerflags: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::PointerFlags2(
                        this,
                        core::mem::transmute_copy(&pointerflags),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Time<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                time: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::Time(this, core::mem::transmute_copy(&time))
                        .into()
                }
            }
            unsafe extern "system" fn Time2<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                time: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::Time2(this, core::mem::transmute_copy(&time))
                        .into()
                }
            }
            unsafe extern "system" fn HistoryCount<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                historycount: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::HistoryCount(
                        this,
                        core::mem::transmute_copy(&historycount),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn HistoryCount2<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                historycount: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::HistoryCount2(
                        this,
                        core::mem::transmute_copy(&historycount),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn InputData<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                inputdata: i32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::InputData(
                        this,
                        core::mem::transmute_copy(&inputdata),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn InputData2<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                inputdata: i32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::InputData2(
                        this,
                        core::mem::transmute_copy(&inputdata),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn KeyStates<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                keystates: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::KeyStates(
                        this,
                        core::mem::transmute_copy(&keystates),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn KeyStates2<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                keystates: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::KeyStates2(
                        this,
                        core::mem::transmute_copy(&keystates),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PerformanceCount<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                performancecount: u64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::PerformanceCount(
                        this,
                        core::mem::transmute_copy(&performancecount),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PerformanceCount2<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                performancecount: u64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::PerformanceCount2(
                        this,
                        core::mem::transmute_copy(&performancecount),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ButtonChangeKind<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                buttonchangekind: i32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::ButtonChangeKind(
                        this,
                        core::mem::transmute_copy(&buttonchangekind),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ButtonChangeKind2<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                buttonchangekind: i32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::ButtonChangeKind2(
                        this,
                        core::mem::transmute_copy(&buttonchangekind),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PenFlags<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                penflags: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::PenFlags(
                        this,
                        core::mem::transmute_copy(&penflags),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PenFlags2<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                penflags: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::PenFlags2(
                        this,
                        core::mem::transmute_copy(&penflags),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PenMask<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                penmask: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::PenMask(
                        this,
                        core::mem::transmute_copy(&penmask),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PenMask2<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                penmask: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::PenMask2(
                        this,
                        core::mem::transmute_copy(&penmask),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PenPressure<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                penpressure: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::PenPressure(
                        this,
                        core::mem::transmute_copy(&penpressure),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PenPressure2<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                penpressure: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::PenPressure2(
                        this,
                        core::mem::transmute_copy(&penpressure),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PenRotation<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                penrotation: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::PenRotation(
                        this,
                        core::mem::transmute_copy(&penrotation),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PenRotation2<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                penrotation: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::PenRotation2(
                        this,
                        core::mem::transmute_copy(&penrotation),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PenTiltX<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                pentiltx: i32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::PenTiltX(
                        this,
                        core::mem::transmute_copy(&pentiltx),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PenTiltX2<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                pentiltx: i32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::PenTiltX2(
                        this,
                        core::mem::transmute_copy(&pentiltx),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PenTiltY<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                pentilty: i32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::PenTiltY(
                        this,
                        core::mem::transmute_copy(&pentilty),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PenTiltY2<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                pentilty: i32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::PenTiltY2(
                        this,
                        core::mem::transmute_copy(&pentilty),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn TouchFlags<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                touchflags: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::TouchFlags(
                        this,
                        core::mem::transmute_copy(&touchflags),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn TouchFlags2<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                touchflags: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::TouchFlags2(
                        this,
                        core::mem::transmute_copy(&touchflags),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn TouchMask<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                touchmask: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::TouchMask(
                        this,
                        core::mem::transmute_copy(&touchmask),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn TouchMask2<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                touchmask: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::TouchMask2(
                        this,
                        core::mem::transmute_copy(&touchmask),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn TouchOrientation<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                touchorientation: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::TouchOrientation(
                        this,
                        core::mem::transmute_copy(&touchorientation),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn TouchOrientation2<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                touchorientation: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::TouchOrientation2(
                        this,
                        core::mem::transmute_copy(&touchorientation),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn TouchPressure<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                touchpressure: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::TouchPressure(
                        this,
                        core::mem::transmute_copy(&touchpressure),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn TouchPressure2<Identity: ICoreWebView2PointerInfo_Impl>(
                this: *mut core::ffi::c_void,
                touchpressure: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PointerInfo_Impl::TouchPressure2(
                        this,
                        core::mem::transmute_copy(&touchpressure),
                    )
                    .into()
                }
            }
            Self {
                PointerKind: PointerKind::<Identity>,
                PointerKind2: PointerKind2::<Identity>,
                PointerId: PointerId::<Identity>,
                PointerId2: PointerId2::<Identity>,
                FrameId: FrameId::<Identity>,
                FrameId2: FrameId2::<Identity>,
                PointerFlags: PointerFlags::<Identity>,
                PointerFlags2: PointerFlags2::<Identity>,
                PointerDeviceRect: 0,
                PointerDeviceRect2: 0,
                DisplayRect: 0,
                DisplayRect2: 0,
                PixelLocation: 0,
                PixelLocation2: 0,
                HimetricLocation: 0,
                HimetricLocation2: 0,
                PixelLocationRaw: 0,
                PixelLocationRaw2: 0,
                HimetricLocationRaw: 0,
                HimetricLocationRaw2: 0,
                Time: Time::<Identity>,
                Time2: Time2::<Identity>,
                HistoryCount: HistoryCount::<Identity>,
                HistoryCount2: HistoryCount2::<Identity>,
                InputData: InputData::<Identity>,
                InputData2: InputData2::<Identity>,
                KeyStates: KeyStates::<Identity>,
                KeyStates2: KeyStates2::<Identity>,
                PerformanceCount: PerformanceCount::<Identity>,
                PerformanceCount2: PerformanceCount2::<Identity>,
                ButtonChangeKind: ButtonChangeKind::<Identity>,
                ButtonChangeKind2: ButtonChangeKind2::<Identity>,
                PenFlags: PenFlags::<Identity>,
                PenFlags2: PenFlags2::<Identity>,
                PenMask: PenMask::<Identity>,
                PenMask2: PenMask2::<Identity>,
                PenPressure: PenPressure::<Identity>,
                PenPressure2: PenPressure2::<Identity>,
                PenRotation: PenRotation::<Identity>,
                PenRotation2: PenRotation2::<Identity>,
                PenTiltX: PenTiltX::<Identity>,
                PenTiltX2: PenTiltX2::<Identity>,
                PenTiltY: PenTiltY::<Identity>,
                PenTiltY2: PenTiltY2::<Identity>,
                TouchFlags: TouchFlags::<Identity>,
                TouchFlags2: TouchFlags2::<Identity>,
                TouchMask: TouchMask::<Identity>,
                TouchMask2: TouchMask2::<Identity>,
                TouchContact: 0,
                TouchContact2: 0,
                TouchContactRaw: 0,
                TouchContactRaw2: 0,
                TouchOrientation: TouchOrientation::<Identity>,
                TouchOrientation2: TouchOrientation2::<Identity>,
                TouchPressure: TouchPressure::<Identity>,
                TouchPressure2: TouchPressure2::<Identity>,
            }
        }
    }
    struct ICoreWebView2PointerInfo_ImplVtbl<T: ICoreWebView2PointerInfo_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2PointerInfo_Impl> ICoreWebView2PointerInfo_ImplVtbl<T> {
        const VTABLE: ICoreWebView2PointerInfo_Vtbl = ICoreWebView2PointerInfo_Vtbl::new::<T>();
    }
    impl ICoreWebView2PointerInfo {
        pub fn new<'a, T: ICoreWebView2PointerInfo_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2PointerInfo_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2PrintCompletedHandler,
        ICoreWebView2PrintCompletedHandler_Vtbl
    );
    impl ICoreWebView2PrintCompletedHandler {
        pub unsafe fn Invoke(
            &self,
            errorcode: windows_core::HRESULT,
            result: COREWEBVIEW2_PRINT_STATUS,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    errorcode,
                    result,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2PrintCompletedHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::HRESULT,
            COREWEBVIEW2_PRINT_STATUS,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2PrintCompletedHandler_Impl {
        fn Invoke(
            &self,
            errorcode: windows_core::HRESULT,
            result: COREWEBVIEW2_PRINT_STATUS,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2PrintCompletedHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2PrintCompletedHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<Identity: ICoreWebView2PrintCompletedHandler_Impl>(
                this: *mut core::ffi::c_void,
                errorcode: windows_core::HRESULT,
                result: COREWEBVIEW2_PRINT_STATUS,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintCompletedHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&errorcode),
                        core::mem::transmute_copy(&result),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2PrintCompletedHandler_ImplVtbl<T: ICoreWebView2PrintCompletedHandler_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2PrintCompletedHandler_Impl> ICoreWebView2PrintCompletedHandler_ImplVtbl<T> {
        const VTABLE: ICoreWebView2PrintCompletedHandler_Vtbl =
            ICoreWebView2PrintCompletedHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2PrintCompletedHandler {
        pub fn new<'a, T: ICoreWebView2PrintCompletedHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2PrintCompletedHandler_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2PrintSettings,
        ICoreWebView2PrintSettings_Vtbl
    );
    impl ICoreWebView2PrintSettings {
        pub unsafe fn Orientation(
            &self,
            orientation: COREWEBVIEW2_PRINT_ORIENTATION,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Orientation)(
                    windows_core::Interface::as_raw(self),
                    orientation,
                )
                .ok()
            }
        }
        pub unsafe fn Orientation2(
            &self,
            orientation: COREWEBVIEW2_PRINT_ORIENTATION,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Orientation2)(
                    windows_core::Interface::as_raw(self),
                    orientation,
                )
                .ok()
            }
        }
        pub unsafe fn ScaleFactor(&self, scalefactor: f64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ScaleFactor)(
                    windows_core::Interface::as_raw(self),
                    scalefactor,
                )
                .ok()
            }
        }
        pub unsafe fn ScaleFactor2(&self, scalefactor: f64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ScaleFactor2)(
                    windows_core::Interface::as_raw(self),
                    scalefactor,
                )
                .ok()
            }
        }
        pub unsafe fn PageWidth(&self, pagewidth: f64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PageWidth)(
                    windows_core::Interface::as_raw(self),
                    pagewidth,
                )
                .ok()
            }
        }
        pub unsafe fn PageWidth2(&self, pagewidth: f64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PageWidth2)(
                    windows_core::Interface::as_raw(self),
                    pagewidth,
                )
                .ok()
            }
        }
        pub unsafe fn PageHeight(&self, pageheight: f64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PageHeight)(
                    windows_core::Interface::as_raw(self),
                    pageheight,
                )
                .ok()
            }
        }
        pub unsafe fn PageHeight2(&self, pageheight: f64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PageHeight2)(
                    windows_core::Interface::as_raw(self),
                    pageheight,
                )
                .ok()
            }
        }
        pub unsafe fn MarginTop(&self, margintop: f64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).MarginTop)(
                    windows_core::Interface::as_raw(self),
                    margintop,
                )
                .ok()
            }
        }
        pub unsafe fn MarginTop2(&self, margintop: f64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).MarginTop2)(
                    windows_core::Interface::as_raw(self),
                    margintop,
                )
                .ok()
            }
        }
        pub unsafe fn MarginBottom(&self, marginbottom: f64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).MarginBottom)(
                    windows_core::Interface::as_raw(self),
                    marginbottom,
                )
                .ok()
            }
        }
        pub unsafe fn MarginBottom2(&self, marginbottom: f64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).MarginBottom2)(
                    windows_core::Interface::as_raw(self),
                    marginbottom,
                )
                .ok()
            }
        }
        pub unsafe fn MarginLeft(&self, marginleft: f64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).MarginLeft)(
                    windows_core::Interface::as_raw(self),
                    marginleft,
                )
                .ok()
            }
        }
        pub unsafe fn MarginLeft2(&self, marginleft: f64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).MarginLeft2)(
                    windows_core::Interface::as_raw(self),
                    marginleft,
                )
                .ok()
            }
        }
        pub unsafe fn MarginRight(&self, marginright: f64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).MarginRight)(
                    windows_core::Interface::as_raw(self),
                    marginright,
                )
                .ok()
            }
        }
        pub unsafe fn MarginRight2(&self, marginright: f64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).MarginRight2)(
                    windows_core::Interface::as_raw(self),
                    marginright,
                )
                .ok()
            }
        }
        pub unsafe fn ShouldPrintBackgrounds(
            &self,
            shouldprintbackgrounds: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ShouldPrintBackgrounds)(
                    windows_core::Interface::as_raw(self),
                    shouldprintbackgrounds.into(),
                )
                .ok()
            }
        }
        pub unsafe fn ShouldPrintBackgrounds2(
            &self,
            shouldprintbackgrounds: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ShouldPrintBackgrounds2)(
                    windows_core::Interface::as_raw(self),
                    shouldprintbackgrounds.into(),
                )
                .ok()
            }
        }
        pub unsafe fn ShouldPrintSelectionOnly(
            &self,
            shouldprintselectiononly: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ShouldPrintSelectionOnly)(
                    windows_core::Interface::as_raw(self),
                    shouldprintselectiononly.into(),
                )
                .ok()
            }
        }
        pub unsafe fn ShouldPrintSelectionOnly2(
            &self,
            shouldprintselectiononly: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ShouldPrintSelectionOnly2)(
                    windows_core::Interface::as_raw(self),
                    shouldprintselectiononly.into(),
                )
                .ok()
            }
        }
        pub unsafe fn ShouldPrintHeaderAndFooter(
            &self,
            shouldprintheaderandfooter: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ShouldPrintHeaderAndFooter)(
                    windows_core::Interface::as_raw(self),
                    shouldprintheaderandfooter.into(),
                )
                .ok()
            }
        }
        pub unsafe fn ShouldPrintHeaderAndFooter2(
            &self,
            shouldprintheaderandfooter: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ShouldPrintHeaderAndFooter2)(
                    windows_core::Interface::as_raw(self),
                    shouldprintheaderandfooter.into(),
                )
                .ok()
            }
        }
        pub unsafe fn HeaderTitle<P0>(&self, headertitle: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).HeaderTitle)(
                    windows_core::Interface::as_raw(self),
                    headertitle.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn HeaderTitle2<P0>(&self, headertitle: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).HeaderTitle2)(
                    windows_core::Interface::as_raw(self),
                    headertitle.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn FooterUri<P0>(&self, footeruri: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).FooterUri)(
                    windows_core::Interface::as_raw(self),
                    footeruri.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn FooterUri2<P0>(&self, footeruri: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).FooterUri2)(
                    windows_core::Interface::as_raw(self),
                    footeruri.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2PrintSettings_Vtbl {
        pub Orientation: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_PRINT_ORIENTATION,
        ) -> windows_core::HRESULT,
        pub Orientation2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_PRINT_ORIENTATION,
        ) -> windows_core::HRESULT,
        pub ScaleFactor:
            unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
        pub ScaleFactor2:
            unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
        pub PageWidth:
            unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
        pub PageWidth2:
            unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
        pub PageHeight:
            unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
        pub PageHeight2:
            unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
        pub MarginTop:
            unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
        pub MarginTop2:
            unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
        pub MarginBottom:
            unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
        pub MarginBottom2:
            unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
        pub MarginLeft:
            unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
        pub MarginLeft2:
            unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
        pub MarginRight:
            unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
        pub MarginRight2:
            unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
        pub ShouldPrintBackgrounds: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub ShouldPrintBackgrounds2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub ShouldPrintSelectionOnly: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub ShouldPrintSelectionOnly2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub ShouldPrintHeaderAndFooter: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub ShouldPrintHeaderAndFooter2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        )
            -> windows_core::HRESULT,
        pub HeaderTitle: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub HeaderTitle2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub FooterUri: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub FooterUri2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2PrintSettings_Impl {
        fn Orientation(
            &self,
            orientation: COREWEBVIEW2_PRINT_ORIENTATION,
        ) -> windows_core::Result<()>;
        fn Orientation2(
            &self,
            orientation: COREWEBVIEW2_PRINT_ORIENTATION,
        ) -> windows_core::Result<()>;
        fn ScaleFactor(&self, scalefactor: f64) -> windows_core::Result<()>;
        fn ScaleFactor2(&self, scalefactor: f64) -> windows_core::Result<()>;
        fn PageWidth(&self, pagewidth: f64) -> windows_core::Result<()>;
        fn PageWidth2(&self, pagewidth: f64) -> windows_core::Result<()>;
        fn PageHeight(&self, pageheight: f64) -> windows_core::Result<()>;
        fn PageHeight2(&self, pageheight: f64) -> windows_core::Result<()>;
        fn MarginTop(&self, margintop: f64) -> windows_core::Result<()>;
        fn MarginTop2(&self, margintop: f64) -> windows_core::Result<()>;
        fn MarginBottom(&self, marginbottom: f64) -> windows_core::Result<()>;
        fn MarginBottom2(&self, marginbottom: f64) -> windows_core::Result<()>;
        fn MarginLeft(&self, marginleft: f64) -> windows_core::Result<()>;
        fn MarginLeft2(&self, marginleft: f64) -> windows_core::Result<()>;
        fn MarginRight(&self, marginright: f64) -> windows_core::Result<()>;
        fn MarginRight2(&self, marginright: f64) -> windows_core::Result<()>;
        fn ShouldPrintBackgrounds(
            &self,
            shouldprintbackgrounds: windows_core::BOOL,
        ) -> windows_core::Result<()>;
        fn ShouldPrintBackgrounds2(
            &self,
            shouldprintbackgrounds: windows_core::BOOL,
        ) -> windows_core::Result<()>;
        fn ShouldPrintSelectionOnly(
            &self,
            shouldprintselectiononly: windows_core::BOOL,
        ) -> windows_core::Result<()>;
        fn ShouldPrintSelectionOnly2(
            &self,
            shouldprintselectiononly: windows_core::BOOL,
        ) -> windows_core::Result<()>;
        fn ShouldPrintHeaderAndFooter(
            &self,
            shouldprintheaderandfooter: windows_core::BOOL,
        ) -> windows_core::Result<()>;
        fn ShouldPrintHeaderAndFooter2(
            &self,
            shouldprintheaderandfooter: windows_core::BOOL,
        ) -> windows_core::Result<()>;
        fn HeaderTitle(&self, headertitle: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn HeaderTitle2(&self, headertitle: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn FooterUri(&self, footeruri: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn FooterUri2(&self, footeruri: &windows_core::PCWSTR) -> windows_core::Result<()>;
    }
    impl ICoreWebView2PrintSettings_Vtbl {
        pub const fn new<Identity: ICoreWebView2PrintSettings_Impl>() -> Self {
            unsafe extern "system" fn Orientation<Identity: ICoreWebView2PrintSettings_Impl>(
                this: *mut core::ffi::c_void,
                orientation: COREWEBVIEW2_PRINT_ORIENTATION,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings_Impl::Orientation(
                        this,
                        core::mem::transmute_copy(&orientation),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Orientation2<Identity: ICoreWebView2PrintSettings_Impl>(
                this: *mut core::ffi::c_void,
                orientation: COREWEBVIEW2_PRINT_ORIENTATION,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings_Impl::Orientation2(
                        this,
                        core::mem::transmute_copy(&orientation),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ScaleFactor<Identity: ICoreWebView2PrintSettings_Impl>(
                this: *mut core::ffi::c_void,
                scalefactor: f64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings_Impl::ScaleFactor(
                        this,
                        core::mem::transmute_copy(&scalefactor),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ScaleFactor2<Identity: ICoreWebView2PrintSettings_Impl>(
                this: *mut core::ffi::c_void,
                scalefactor: f64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings_Impl::ScaleFactor2(
                        this,
                        core::mem::transmute_copy(&scalefactor),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PageWidth<Identity: ICoreWebView2PrintSettings_Impl>(
                this: *mut core::ffi::c_void,
                pagewidth: f64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings_Impl::PageWidth(
                        this,
                        core::mem::transmute_copy(&pagewidth),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PageWidth2<Identity: ICoreWebView2PrintSettings_Impl>(
                this: *mut core::ffi::c_void,
                pagewidth: f64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings_Impl::PageWidth2(
                        this,
                        core::mem::transmute_copy(&pagewidth),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PageHeight<Identity: ICoreWebView2PrintSettings_Impl>(
                this: *mut core::ffi::c_void,
                pageheight: f64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings_Impl::PageHeight(
                        this,
                        core::mem::transmute_copy(&pageheight),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PageHeight2<Identity: ICoreWebView2PrintSettings_Impl>(
                this: *mut core::ffi::c_void,
                pageheight: f64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings_Impl::PageHeight2(
                        this,
                        core::mem::transmute_copy(&pageheight),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn MarginTop<Identity: ICoreWebView2PrintSettings_Impl>(
                this: *mut core::ffi::c_void,
                margintop: f64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings_Impl::MarginTop(
                        this,
                        core::mem::transmute_copy(&margintop),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn MarginTop2<Identity: ICoreWebView2PrintSettings_Impl>(
                this: *mut core::ffi::c_void,
                margintop: f64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings_Impl::MarginTop2(
                        this,
                        core::mem::transmute_copy(&margintop),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn MarginBottom<Identity: ICoreWebView2PrintSettings_Impl>(
                this: *mut core::ffi::c_void,
                marginbottom: f64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings_Impl::MarginBottom(
                        this,
                        core::mem::transmute_copy(&marginbottom),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn MarginBottom2<Identity: ICoreWebView2PrintSettings_Impl>(
                this: *mut core::ffi::c_void,
                marginbottom: f64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings_Impl::MarginBottom2(
                        this,
                        core::mem::transmute_copy(&marginbottom),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn MarginLeft<Identity: ICoreWebView2PrintSettings_Impl>(
                this: *mut core::ffi::c_void,
                marginleft: f64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings_Impl::MarginLeft(
                        this,
                        core::mem::transmute_copy(&marginleft),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn MarginLeft2<Identity: ICoreWebView2PrintSettings_Impl>(
                this: *mut core::ffi::c_void,
                marginleft: f64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings_Impl::MarginLeft2(
                        this,
                        core::mem::transmute_copy(&marginleft),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn MarginRight<Identity: ICoreWebView2PrintSettings_Impl>(
                this: *mut core::ffi::c_void,
                marginright: f64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings_Impl::MarginRight(
                        this,
                        core::mem::transmute_copy(&marginright),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn MarginRight2<Identity: ICoreWebView2PrintSettings_Impl>(
                this: *mut core::ffi::c_void,
                marginright: f64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings_Impl::MarginRight2(
                        this,
                        core::mem::transmute_copy(&marginright),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ShouldPrintBackgrounds<
                Identity: ICoreWebView2PrintSettings_Impl,
            >(
                this: *mut core::ffi::c_void,
                shouldprintbackgrounds: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings_Impl::ShouldPrintBackgrounds(
                        this,
                        core::mem::transmute_copy(&shouldprintbackgrounds),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ShouldPrintBackgrounds2<
                Identity: ICoreWebView2PrintSettings_Impl,
            >(
                this: *mut core::ffi::c_void,
                shouldprintbackgrounds: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings_Impl::ShouldPrintBackgrounds2(
                        this,
                        core::mem::transmute_copy(&shouldprintbackgrounds),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ShouldPrintSelectionOnly<
                Identity: ICoreWebView2PrintSettings_Impl,
            >(
                this: *mut core::ffi::c_void,
                shouldprintselectiononly: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings_Impl::ShouldPrintSelectionOnly(
                        this,
                        core::mem::transmute_copy(&shouldprintselectiononly),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ShouldPrintSelectionOnly2<
                Identity: ICoreWebView2PrintSettings_Impl,
            >(
                this: *mut core::ffi::c_void,
                shouldprintselectiononly: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings_Impl::ShouldPrintSelectionOnly2(
                        this,
                        core::mem::transmute_copy(&shouldprintselectiononly),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ShouldPrintHeaderAndFooter<
                Identity: ICoreWebView2PrintSettings_Impl,
            >(
                this: *mut core::ffi::c_void,
                shouldprintheaderandfooter: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings_Impl::ShouldPrintHeaderAndFooter(
                        this,
                        core::mem::transmute_copy(&shouldprintheaderandfooter),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ShouldPrintHeaderAndFooter2<
                Identity: ICoreWebView2PrintSettings_Impl,
            >(
                this: *mut core::ffi::c_void,
                shouldprintheaderandfooter: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings_Impl::ShouldPrintHeaderAndFooter2(
                        this,
                        core::mem::transmute_copy(&shouldprintheaderandfooter),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn HeaderTitle<Identity: ICoreWebView2PrintSettings_Impl>(
                this: *mut core::ffi::c_void,
                headertitle: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings_Impl::HeaderTitle(
                        this,
                        core::mem::transmute(&headertitle),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn HeaderTitle2<Identity: ICoreWebView2PrintSettings_Impl>(
                this: *mut core::ffi::c_void,
                headertitle: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings_Impl::HeaderTitle2(
                        this,
                        core::mem::transmute(&headertitle),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn FooterUri<Identity: ICoreWebView2PrintSettings_Impl>(
                this: *mut core::ffi::c_void,
                footeruri: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings_Impl::FooterUri(
                        this,
                        core::mem::transmute(&footeruri),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn FooterUri2<Identity: ICoreWebView2PrintSettings_Impl>(
                this: *mut core::ffi::c_void,
                footeruri: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings_Impl::FooterUri2(
                        this,
                        core::mem::transmute(&footeruri),
                    )
                    .into()
                }
            }
            Self {
                Orientation: Orientation::<Identity>,
                Orientation2: Orientation2::<Identity>,
                ScaleFactor: ScaleFactor::<Identity>,
                ScaleFactor2: ScaleFactor2::<Identity>,
                PageWidth: PageWidth::<Identity>,
                PageWidth2: PageWidth2::<Identity>,
                PageHeight: PageHeight::<Identity>,
                PageHeight2: PageHeight2::<Identity>,
                MarginTop: MarginTop::<Identity>,
                MarginTop2: MarginTop2::<Identity>,
                MarginBottom: MarginBottom::<Identity>,
                MarginBottom2: MarginBottom2::<Identity>,
                MarginLeft: MarginLeft::<Identity>,
                MarginLeft2: MarginLeft2::<Identity>,
                MarginRight: MarginRight::<Identity>,
                MarginRight2: MarginRight2::<Identity>,
                ShouldPrintBackgrounds: ShouldPrintBackgrounds::<Identity>,
                ShouldPrintBackgrounds2: ShouldPrintBackgrounds2::<Identity>,
                ShouldPrintSelectionOnly: ShouldPrintSelectionOnly::<Identity>,
                ShouldPrintSelectionOnly2: ShouldPrintSelectionOnly2::<Identity>,
                ShouldPrintHeaderAndFooter: ShouldPrintHeaderAndFooter::<Identity>,
                ShouldPrintHeaderAndFooter2: ShouldPrintHeaderAndFooter2::<Identity>,
                HeaderTitle: HeaderTitle::<Identity>,
                HeaderTitle2: HeaderTitle2::<Identity>,
                FooterUri: FooterUri::<Identity>,
                FooterUri2: FooterUri2::<Identity>,
            }
        }
    }
    struct ICoreWebView2PrintSettings_ImplVtbl<T: ICoreWebView2PrintSettings_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2PrintSettings_Impl> ICoreWebView2PrintSettings_ImplVtbl<T> {
        const VTABLE: ICoreWebView2PrintSettings_Vtbl = ICoreWebView2PrintSettings_Vtbl::new::<T>();
    }
    impl ICoreWebView2PrintSettings {
        pub fn new<'a, T: ICoreWebView2PrintSettings_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2PrintSettings_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2PrintSettings2,
        ICoreWebView2PrintSettings2_Vtbl
    );
    impl ICoreWebView2PrintSettings2 {
        pub unsafe fn PageRanges<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).PageRanges)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn PageRanges2<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).PageRanges2)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn PagesPerSide(&self, value: i32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PagesPerSide)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn PagesPerSide2(&self, value: i32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PagesPerSide2)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn Copies(&self, value: i32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Copies)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn Copies2(&self, value: i32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Copies2)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn Collation(
            &self,
            value: COREWEBVIEW2_PRINT_COLLATION,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Collation)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn Collation2(
            &self,
            value: COREWEBVIEW2_PRINT_COLLATION,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Collation2)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn ColorMode(
            &self,
            value: COREWEBVIEW2_PRINT_COLOR_MODE,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ColorMode)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn ColorMode2(
            &self,
            value: COREWEBVIEW2_PRINT_COLOR_MODE,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ColorMode2)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn Duplex(&self, value: COREWEBVIEW2_PRINT_DUPLEX) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Duplex)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn Duplex2(&self, value: COREWEBVIEW2_PRINT_DUPLEX) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Duplex2)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn MediaSize(
            &self,
            value: COREWEBVIEW2_PRINT_MEDIA_SIZE,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).MediaSize)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn MediaSize2(
            &self,
            value: COREWEBVIEW2_PRINT_MEDIA_SIZE,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).MediaSize2)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn PrinterName<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).PrinterName)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn PrinterName2<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).PrinterName2)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2PrintSettings2_Vtbl {
        pub PageRanges: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub PageRanges2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub PagesPerSide:
            unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
        pub PagesPerSide2:
            unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
        pub Copies: unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
        pub Copies2:
            unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
        pub Collation: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_PRINT_COLLATION,
        ) -> windows_core::HRESULT,
        pub Collation2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_PRINT_COLLATION,
        ) -> windows_core::HRESULT,
        pub ColorMode: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_PRINT_COLOR_MODE,
        ) -> windows_core::HRESULT,
        pub ColorMode2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_PRINT_COLOR_MODE,
        ) -> windows_core::HRESULT,
        pub Duplex: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_PRINT_DUPLEX,
        ) -> windows_core::HRESULT,
        pub Duplex2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_PRINT_DUPLEX,
        ) -> windows_core::HRESULT,
        pub MediaSize: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_PRINT_MEDIA_SIZE,
        ) -> windows_core::HRESULT,
        pub MediaSize2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_PRINT_MEDIA_SIZE,
        ) -> windows_core::HRESULT,
        pub PrinterName: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub PrinterName2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2PrintSettings2_Impl {
        fn PageRanges(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn PageRanges2(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn PagesPerSide(&self, value: i32) -> windows_core::Result<()>;
        fn PagesPerSide2(&self, value: i32) -> windows_core::Result<()>;
        fn Copies(&self, value: i32) -> windows_core::Result<()>;
        fn Copies2(&self, value: i32) -> windows_core::Result<()>;
        fn Collation(&self, value: COREWEBVIEW2_PRINT_COLLATION) -> windows_core::Result<()>;
        fn Collation2(&self, value: COREWEBVIEW2_PRINT_COLLATION) -> windows_core::Result<()>;
        fn ColorMode(&self, value: COREWEBVIEW2_PRINT_COLOR_MODE) -> windows_core::Result<()>;
        fn ColorMode2(&self, value: COREWEBVIEW2_PRINT_COLOR_MODE) -> windows_core::Result<()>;
        fn Duplex(&self, value: COREWEBVIEW2_PRINT_DUPLEX) -> windows_core::Result<()>;
        fn Duplex2(&self, value: COREWEBVIEW2_PRINT_DUPLEX) -> windows_core::Result<()>;
        fn MediaSize(&self, value: COREWEBVIEW2_PRINT_MEDIA_SIZE) -> windows_core::Result<()>;
        fn MediaSize2(&self, value: COREWEBVIEW2_PRINT_MEDIA_SIZE) -> windows_core::Result<()>;
        fn PrinterName(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn PrinterName2(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
    }
    impl ICoreWebView2PrintSettings2_Vtbl {
        pub const fn new<Identity: ICoreWebView2PrintSettings2_Impl>() -> Self {
            unsafe extern "system" fn PageRanges<Identity: ICoreWebView2PrintSettings2_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings2_Impl::PageRanges(this, core::mem::transmute(&value))
                        .into()
                }
            }
            unsafe extern "system" fn PageRanges2<Identity: ICoreWebView2PrintSettings2_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings2_Impl::PageRanges2(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PagesPerSide<Identity: ICoreWebView2PrintSettings2_Impl>(
                this: *mut core::ffi::c_void,
                value: i32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings2_Impl::PagesPerSide(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PagesPerSide2<Identity: ICoreWebView2PrintSettings2_Impl>(
                this: *mut core::ffi::c_void,
                value: i32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings2_Impl::PagesPerSide2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Copies<Identity: ICoreWebView2PrintSettings2_Impl>(
                this: *mut core::ffi::c_void,
                value: i32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings2_Impl::Copies(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Copies2<Identity: ICoreWebView2PrintSettings2_Impl>(
                this: *mut core::ffi::c_void,
                value: i32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings2_Impl::Copies2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Collation<Identity: ICoreWebView2PrintSettings2_Impl>(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_PRINT_COLLATION,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings2_Impl::Collation(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Collation2<Identity: ICoreWebView2PrintSettings2_Impl>(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_PRINT_COLLATION,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings2_Impl::Collation2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ColorMode<Identity: ICoreWebView2PrintSettings2_Impl>(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_PRINT_COLOR_MODE,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings2_Impl::ColorMode(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ColorMode2<Identity: ICoreWebView2PrintSettings2_Impl>(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_PRINT_COLOR_MODE,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings2_Impl::ColorMode2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Duplex<Identity: ICoreWebView2PrintSettings2_Impl>(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_PRINT_DUPLEX,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings2_Impl::Duplex(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Duplex2<Identity: ICoreWebView2PrintSettings2_Impl>(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_PRINT_DUPLEX,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings2_Impl::Duplex2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn MediaSize<Identity: ICoreWebView2PrintSettings2_Impl>(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_PRINT_MEDIA_SIZE,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings2_Impl::MediaSize(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn MediaSize2<Identity: ICoreWebView2PrintSettings2_Impl>(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_PRINT_MEDIA_SIZE,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings2_Impl::MediaSize2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PrinterName<Identity: ICoreWebView2PrintSettings2_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings2_Impl::PrinterName(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PrinterName2<Identity: ICoreWebView2PrintSettings2_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintSettings2_Impl::PrinterName2(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            Self {
                PageRanges: PageRanges::<Identity>,
                PageRanges2: PageRanges2::<Identity>,
                PagesPerSide: PagesPerSide::<Identity>,
                PagesPerSide2: PagesPerSide2::<Identity>,
                Copies: Copies::<Identity>,
                Copies2: Copies2::<Identity>,
                Collation: Collation::<Identity>,
                Collation2: Collation2::<Identity>,
                ColorMode: ColorMode::<Identity>,
                ColorMode2: ColorMode2::<Identity>,
                Duplex: Duplex::<Identity>,
                Duplex2: Duplex2::<Identity>,
                MediaSize: MediaSize::<Identity>,
                MediaSize2: MediaSize2::<Identity>,
                PrinterName: PrinterName::<Identity>,
                PrinterName2: PrinterName2::<Identity>,
            }
        }
    }
    struct ICoreWebView2PrintSettings2_ImplVtbl<T: ICoreWebView2PrintSettings2_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2PrintSettings2_Impl> ICoreWebView2PrintSettings2_ImplVtbl<T> {
        const VTABLE: ICoreWebView2PrintSettings2_Vtbl =
            ICoreWebView2PrintSettings2_Vtbl::new::<T>();
    }
    impl ICoreWebView2PrintSettings2 {
        pub fn new<'a, T: ICoreWebView2PrintSettings2_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2PrintSettings2_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2PrintToPdfCompletedHandler,
        ICoreWebView2PrintToPdfCompletedHandler_Vtbl
    );
    impl ICoreWebView2PrintToPdfCompletedHandler {
        pub unsafe fn Invoke(
            &self,
            errorcode: windows_core::HRESULT,
            result: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    errorcode,
                    result.into(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2PrintToPdfCompletedHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::HRESULT,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2PrintToPdfCompletedHandler_Impl {
        fn Invoke(
            &self,
            errorcode: windows_core::HRESULT,
            result: windows_core::BOOL,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2PrintToPdfCompletedHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2PrintToPdfCompletedHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2PrintToPdfCompletedHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                errorcode: windows_core::HRESULT,
                result: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2PrintToPdfCompletedHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&errorcode),
                        core::mem::transmute_copy(&result),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2PrintToPdfCompletedHandler_ImplVtbl<
        T: ICoreWebView2PrintToPdfCompletedHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2PrintToPdfCompletedHandler_Impl>
        ICoreWebView2PrintToPdfCompletedHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2PrintToPdfCompletedHandler_Vtbl =
            ICoreWebView2PrintToPdfCompletedHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2PrintToPdfCompletedHandler {
        pub fn new<'a, T: ICoreWebView2PrintToPdfCompletedHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2PrintToPdfCompletedHandler_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2PrintToPdfStreamCompletedHandler,
        ICoreWebView2PrintToPdfStreamCompletedHandler_Vtbl
    );
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2PrintToPdfStreamCompletedHandler_Vtbl {
        Invoke: usize,
    }
    pub trait ICoreWebView2PrintToPdfStreamCompletedHandler_Impl {}
    impl ICoreWebView2PrintToPdfStreamCompletedHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2PrintToPdfStreamCompletedHandler_Impl>() -> Self {
            Self { Invoke: 0 }
        }
    }
    struct ICoreWebView2PrintToPdfStreamCompletedHandler_ImplVtbl<
        T: ICoreWebView2PrintToPdfStreamCompletedHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2PrintToPdfStreamCompletedHandler_Impl>
        ICoreWebView2PrintToPdfStreamCompletedHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2PrintToPdfStreamCompletedHandler_Vtbl =
            ICoreWebView2PrintToPdfStreamCompletedHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2PrintToPdfStreamCompletedHandler {
        pub fn new<'a, T: ICoreWebView2PrintToPdfStreamCompletedHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2PrintToPdfStreamCompletedHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ProcessExtendedInfo,
        ICoreWebView2ProcessExtendedInfo_Vtbl
    );
    impl ICoreWebView2ProcessExtendedInfo {
        pub unsafe fn ProcessInfo<P0>(&self, processinfo: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2ProcessInfo>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ProcessInfo)(
                    windows_core::Interface::as_raw(self),
                    processinfo.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn AssociatedFrameInfos<P0>(&self, frames: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2FrameInfoCollection>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).AssociatedFrameInfos)(
                    windows_core::Interface::as_raw(self),
                    frames.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ProcessExtendedInfo_Vtbl {
        pub ProcessInfo: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub AssociatedFrameInfos: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ProcessExtendedInfo_Impl {
        fn ProcessInfo(
            &self,
            processinfo: windows_core::Ref<'_, ICoreWebView2ProcessInfo>,
        ) -> windows_core::Result<()>;
        fn AssociatedFrameInfos(
            &self,
            frames: windows_core::Ref<'_, ICoreWebView2FrameInfoCollection>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ProcessExtendedInfo_Vtbl {
        pub const fn new<Identity: ICoreWebView2ProcessExtendedInfo_Impl>() -> Self {
            unsafe extern "system" fn ProcessInfo<
                Identity: ICoreWebView2ProcessExtendedInfo_Impl,
            >(
                this: *mut core::ffi::c_void,
                processinfo: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ProcessExtendedInfo_Impl::ProcessInfo(
                        this,
                        core::mem::transmute_copy(&processinfo),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn AssociatedFrameInfos<
                Identity: ICoreWebView2ProcessExtendedInfo_Impl,
            >(
                this: *mut core::ffi::c_void,
                frames: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ProcessExtendedInfo_Impl::AssociatedFrameInfos(
                        this,
                        core::mem::transmute_copy(&frames),
                    )
                    .into()
                }
            }
            Self {
                ProcessInfo: ProcessInfo::<Identity>,
                AssociatedFrameInfos: AssociatedFrameInfos::<Identity>,
            }
        }
    }
    struct ICoreWebView2ProcessExtendedInfo_ImplVtbl<T: ICoreWebView2ProcessExtendedInfo_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2ProcessExtendedInfo_Impl> ICoreWebView2ProcessExtendedInfo_ImplVtbl<T> {
        const VTABLE: ICoreWebView2ProcessExtendedInfo_Vtbl =
            ICoreWebView2ProcessExtendedInfo_Vtbl::new::<T>();
    }
    impl ICoreWebView2ProcessExtendedInfo {
        pub fn new<'a, T: ICoreWebView2ProcessExtendedInfo_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ProcessExtendedInfo_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ProcessExtendedInfoCollection,
        ICoreWebView2ProcessExtendedInfoCollection_Vtbl
    );
    impl ICoreWebView2ProcessExtendedInfoCollection {
        pub unsafe fn Count(&self, value: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Count)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn GetValueAtIndex<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
        where
            P1: windows_core::Param<ICoreWebView2ProcessExtendedInfo>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetValueAtIndex)(
                    windows_core::Interface::as_raw(self),
                    index,
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ProcessExtendedInfoCollection_Vtbl {
        pub Count: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub GetValueAtIndex: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ProcessExtendedInfoCollection_Impl {
        fn Count(&self, value: u32) -> windows_core::Result<()>;
        fn GetValueAtIndex(
            &self,
            index: u32,
            value: windows_core::Ref<'_, ICoreWebView2ProcessExtendedInfo>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ProcessExtendedInfoCollection_Vtbl {
        pub const fn new<Identity: ICoreWebView2ProcessExtendedInfoCollection_Impl>() -> Self {
            unsafe extern "system" fn Count<
                Identity: ICoreWebView2ProcessExtendedInfoCollection_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ProcessExtendedInfoCollection_Impl::Count(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn GetValueAtIndex<
                Identity: ICoreWebView2ProcessExtendedInfoCollection_Impl,
            >(
                this: *mut core::ffi::c_void,
                index: u32,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ProcessExtendedInfoCollection_Impl::GetValueAtIndex(
                        this,
                        core::mem::transmute_copy(&index),
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                Count: Count::<Identity>,
                GetValueAtIndex: GetValueAtIndex::<Identity>,
            }
        }
    }
    struct ICoreWebView2ProcessExtendedInfoCollection_ImplVtbl<
        T: ICoreWebView2ProcessExtendedInfoCollection_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2ProcessExtendedInfoCollection_Impl>
        ICoreWebView2ProcessExtendedInfoCollection_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2ProcessExtendedInfoCollection_Vtbl =
            ICoreWebView2ProcessExtendedInfoCollection_Vtbl::new::<T>();
    }
    impl ICoreWebView2ProcessExtendedInfoCollection {
        pub fn new<'a, T: ICoreWebView2ProcessExtendedInfoCollection_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ProcessExtendedInfoCollection_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ProcessFailedEventArgs,
        ICoreWebView2ProcessFailedEventArgs_Vtbl
    );
    impl ICoreWebView2ProcessFailedEventArgs {
        pub unsafe fn ProcessFailedKind(
            &self,
            value: COREWEBVIEW2_PROCESS_FAILED_KIND,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ProcessFailedKind)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ProcessFailedEventArgs_Vtbl {
        pub ProcessFailedKind: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_PROCESS_FAILED_KIND,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ProcessFailedEventArgs_Impl {
        fn ProcessFailedKind(
            &self,
            value: COREWEBVIEW2_PROCESS_FAILED_KIND,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ProcessFailedEventArgs_Vtbl {
        pub const fn new<Identity: ICoreWebView2ProcessFailedEventArgs_Impl>() -> Self {
            unsafe extern "system" fn ProcessFailedKind<
                Identity: ICoreWebView2ProcessFailedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_PROCESS_FAILED_KIND,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ProcessFailedEventArgs_Impl::ProcessFailedKind(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                ProcessFailedKind: ProcessFailedKind::<Identity>,
            }
        }
    }
    struct ICoreWebView2ProcessFailedEventArgs_ImplVtbl<T: ICoreWebView2ProcessFailedEventArgs_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2ProcessFailedEventArgs_Impl> ICoreWebView2ProcessFailedEventArgs_ImplVtbl<T> {
        const VTABLE: ICoreWebView2ProcessFailedEventArgs_Vtbl =
            ICoreWebView2ProcessFailedEventArgs_Vtbl::new::<T>();
    }
    impl ICoreWebView2ProcessFailedEventArgs {
        pub fn new<'a, T: ICoreWebView2ProcessFailedEventArgs_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ProcessFailedEventArgs_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ProcessFailedEventArgs2,
        ICoreWebView2ProcessFailedEventArgs2_Vtbl
    );
    impl ICoreWebView2ProcessFailedEventArgs2 {
        pub unsafe fn Reason(
            &self,
            reason: COREWEBVIEW2_PROCESS_FAILED_REASON,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Reason)(
                    windows_core::Interface::as_raw(self),
                    reason,
                )
                .ok()
            }
        }
        pub unsafe fn ExitCode(&self, exitcode: i32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ExitCode)(
                    windows_core::Interface::as_raw(self),
                    exitcode,
                )
                .ok()
            }
        }
        pub unsafe fn ProcessDescription<P0>(
            &self,
            processdescription: P0,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ProcessDescription)(
                    windows_core::Interface::as_raw(self),
                    processdescription.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn FrameInfosForFailedProcess<P0>(&self, frames: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2FrameInfoCollection>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).FrameInfosForFailedProcess)(
                    windows_core::Interface::as_raw(self),
                    frames.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ProcessFailedEventArgs2_Vtbl {
        pub Reason: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_PROCESS_FAILED_REASON,
        ) -> windows_core::HRESULT,
        pub ExitCode:
            unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
        pub ProcessDescription: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub FrameInfosForFailedProcess: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ProcessFailedEventArgs2_Impl {
        fn Reason(&self, reason: COREWEBVIEW2_PROCESS_FAILED_REASON) -> windows_core::Result<()>;
        fn ExitCode(&self, exitcode: i32) -> windows_core::Result<()>;
        fn ProcessDescription(
            &self,
            processdescription: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
        fn FrameInfosForFailedProcess(
            &self,
            frames: windows_core::Ref<'_, ICoreWebView2FrameInfoCollection>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ProcessFailedEventArgs2_Vtbl {
        pub const fn new<Identity: ICoreWebView2ProcessFailedEventArgs2_Impl>() -> Self {
            unsafe extern "system" fn Reason<
                Identity: ICoreWebView2ProcessFailedEventArgs2_Impl,
            >(
                this: *mut core::ffi::c_void,
                reason: COREWEBVIEW2_PROCESS_FAILED_REASON,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ProcessFailedEventArgs2_Impl::Reason(
                        this,
                        core::mem::transmute_copy(&reason),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ExitCode<
                Identity: ICoreWebView2ProcessFailedEventArgs2_Impl,
            >(
                this: *mut core::ffi::c_void,
                exitcode: i32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ProcessFailedEventArgs2_Impl::ExitCode(
                        this,
                        core::mem::transmute_copy(&exitcode),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ProcessDescription<
                Identity: ICoreWebView2ProcessFailedEventArgs2_Impl,
            >(
                this: *mut core::ffi::c_void,
                processdescription: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ProcessFailedEventArgs2_Impl::ProcessDescription(
                        this,
                        core::mem::transmute(&processdescription),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn FrameInfosForFailedProcess<
                Identity: ICoreWebView2ProcessFailedEventArgs2_Impl,
            >(
                this: *mut core::ffi::c_void,
                frames: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ProcessFailedEventArgs2_Impl::FrameInfosForFailedProcess(
                        this,
                        core::mem::transmute_copy(&frames),
                    )
                    .into()
                }
            }
            Self {
                Reason: Reason::<Identity>,
                ExitCode: ExitCode::<Identity>,
                ProcessDescription: ProcessDescription::<Identity>,
                FrameInfosForFailedProcess: FrameInfosForFailedProcess::<Identity>,
            }
        }
    }
    struct ICoreWebView2ProcessFailedEventArgs2_ImplVtbl<T: ICoreWebView2ProcessFailedEventArgs2_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2ProcessFailedEventArgs2_Impl>
        ICoreWebView2ProcessFailedEventArgs2_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2ProcessFailedEventArgs2_Vtbl =
            ICoreWebView2ProcessFailedEventArgs2_Vtbl::new::<T>();
    }
    impl ICoreWebView2ProcessFailedEventArgs2 {
        pub fn new<'a, T: ICoreWebView2ProcessFailedEventArgs2_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ProcessFailedEventArgs2_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ProcessFailedEventArgs3,
        ICoreWebView2ProcessFailedEventArgs3_Vtbl
    );
    impl ICoreWebView2ProcessFailedEventArgs3 {
        pub unsafe fn FailureSourceModulePath<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).FailureSourceModulePath)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ProcessFailedEventArgs3_Vtbl {
        pub FailureSourceModulePath: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ProcessFailedEventArgs3_Impl {
        fn FailureSourceModulePath(&self, value: &windows_core::PCWSTR)
            -> windows_core::Result<()>;
    }
    impl ICoreWebView2ProcessFailedEventArgs3_Vtbl {
        pub const fn new<Identity: ICoreWebView2ProcessFailedEventArgs3_Impl>() -> Self {
            unsafe extern "system" fn FailureSourceModulePath<
                Identity: ICoreWebView2ProcessFailedEventArgs3_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ProcessFailedEventArgs3_Impl::FailureSourceModulePath(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            Self {
                FailureSourceModulePath: FailureSourceModulePath::<Identity>,
            }
        }
    }
    struct ICoreWebView2ProcessFailedEventArgs3_ImplVtbl<T: ICoreWebView2ProcessFailedEventArgs3_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2ProcessFailedEventArgs3_Impl>
        ICoreWebView2ProcessFailedEventArgs3_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2ProcessFailedEventArgs3_Vtbl =
            ICoreWebView2ProcessFailedEventArgs3_Vtbl::new::<T>();
    }
    impl ICoreWebView2ProcessFailedEventArgs3 {
        pub fn new<'a, T: ICoreWebView2ProcessFailedEventArgs3_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ProcessFailedEventArgs3_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ProcessFailedEventHandler,
        ICoreWebView2ProcessFailedEventHandler_Vtbl
    );
    impl ICoreWebView2ProcessFailedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
            P1: windows_core::Param<ICoreWebView2ProcessFailedEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ProcessFailedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ProcessFailedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2>,
            args: windows_core::Ref<'_, ICoreWebView2ProcessFailedEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ProcessFailedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2ProcessFailedEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2ProcessFailedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ProcessFailedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2ProcessFailedEventHandler_ImplVtbl<
        T: ICoreWebView2ProcessFailedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2ProcessFailedEventHandler_Impl>
        ICoreWebView2ProcessFailedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2ProcessFailedEventHandler_Vtbl =
            ICoreWebView2ProcessFailedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2ProcessFailedEventHandler {
        pub fn new<'a, T: ICoreWebView2ProcessFailedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ProcessFailedEventHandler_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2ProcessInfo, ICoreWebView2ProcessInfo_Vtbl);
    impl ICoreWebView2ProcessInfo {
        pub unsafe fn ProcessId(&self, value: i32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ProcessId)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn Kind(&self, kind: COREWEBVIEW2_PROCESS_KIND) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Kind)(
                    windows_core::Interface::as_raw(self),
                    kind,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ProcessInfo_Vtbl {
        pub ProcessId:
            unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
        pub Kind: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_PROCESS_KIND,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ProcessInfo_Impl {
        fn ProcessId(&self, value: i32) -> windows_core::Result<()>;
        fn Kind(&self, kind: COREWEBVIEW2_PROCESS_KIND) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ProcessInfo_Vtbl {
        pub const fn new<Identity: ICoreWebView2ProcessInfo_Impl>() -> Self {
            unsafe extern "system" fn ProcessId<Identity: ICoreWebView2ProcessInfo_Impl>(
                this: *mut core::ffi::c_void,
                value: i32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ProcessInfo_Impl::ProcessId(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Kind<Identity: ICoreWebView2ProcessInfo_Impl>(
                this: *mut core::ffi::c_void,
                kind: COREWEBVIEW2_PROCESS_KIND,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ProcessInfo_Impl::Kind(this, core::mem::transmute_copy(&kind))
                        .into()
                }
            }
            Self {
                ProcessId: ProcessId::<Identity>,
                Kind: Kind::<Identity>,
            }
        }
    }
    struct ICoreWebView2ProcessInfo_ImplVtbl<T: ICoreWebView2ProcessInfo_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2ProcessInfo_Impl> ICoreWebView2ProcessInfo_ImplVtbl<T> {
        const VTABLE: ICoreWebView2ProcessInfo_Vtbl = ICoreWebView2ProcessInfo_Vtbl::new::<T>();
    }
    impl ICoreWebView2ProcessInfo {
        pub fn new<'a, T: ICoreWebView2ProcessInfo_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ProcessInfo_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ProcessInfoCollection,
        ICoreWebView2ProcessInfoCollection_Vtbl
    );
    impl ICoreWebView2ProcessInfoCollection {
        pub unsafe fn Count(&self, value: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Count)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn GetValueAtIndex<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
        where
            P1: windows_core::Param<ICoreWebView2ProcessInfo>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetValueAtIndex)(
                    windows_core::Interface::as_raw(self),
                    index,
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ProcessInfoCollection_Vtbl {
        pub Count: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub GetValueAtIndex: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ProcessInfoCollection_Impl {
        fn Count(&self, value: u32) -> windows_core::Result<()>;
        fn GetValueAtIndex(
            &self,
            index: u32,
            value: windows_core::Ref<'_, ICoreWebView2ProcessInfo>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ProcessInfoCollection_Vtbl {
        pub const fn new<Identity: ICoreWebView2ProcessInfoCollection_Impl>() -> Self {
            unsafe extern "system" fn Count<Identity: ICoreWebView2ProcessInfoCollection_Impl>(
                this: *mut core::ffi::c_void,
                value: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ProcessInfoCollection_Impl::Count(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn GetValueAtIndex<
                Identity: ICoreWebView2ProcessInfoCollection_Impl,
            >(
                this: *mut core::ffi::c_void,
                index: u32,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ProcessInfoCollection_Impl::GetValueAtIndex(
                        this,
                        core::mem::transmute_copy(&index),
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                Count: Count::<Identity>,
                GetValueAtIndex: GetValueAtIndex::<Identity>,
            }
        }
    }
    struct ICoreWebView2ProcessInfoCollection_ImplVtbl<T: ICoreWebView2ProcessInfoCollection_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2ProcessInfoCollection_Impl> ICoreWebView2ProcessInfoCollection_ImplVtbl<T> {
        const VTABLE: ICoreWebView2ProcessInfoCollection_Vtbl =
            ICoreWebView2ProcessInfoCollection_Vtbl::new::<T>();
    }
    impl ICoreWebView2ProcessInfoCollection {
        pub fn new<'a, T: ICoreWebView2ProcessInfoCollection_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ProcessInfoCollection_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ProcessInfosChangedEventHandler,
        ICoreWebView2ProcessInfosChangedEventHandler_Vtbl
    );
    impl ICoreWebView2ProcessInfosChangedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Environment>,
            P1: windows_core::Param<windows_core::IUnknown>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ProcessInfosChangedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ProcessInfosChangedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2Environment>,
            args: windows_core::Ref<'_, windows_core::IUnknown>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ProcessInfosChangedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2ProcessInfosChangedEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2ProcessInfosChangedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ProcessInfosChangedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2ProcessInfosChangedEventHandler_ImplVtbl<
        T: ICoreWebView2ProcessInfosChangedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2ProcessInfosChangedEventHandler_Impl>
        ICoreWebView2ProcessInfosChangedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2ProcessInfosChangedEventHandler_Vtbl =
            ICoreWebView2ProcessInfosChangedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2ProcessInfosChangedEventHandler {
        pub fn new<'a, T: ICoreWebView2ProcessInfosChangedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ProcessInfosChangedEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Profile, ICoreWebView2Profile_Vtbl);
    impl ICoreWebView2Profile {
        pub unsafe fn ProfileName<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ProfileName)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn IsInPrivateModeEnabled(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsInPrivateModeEnabled)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn ProfilePath<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ProfilePath)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn DefaultDownloadFolderPath<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).DefaultDownloadFolderPath)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn DefaultDownloadFolderPath2<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).DefaultDownloadFolderPath2)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn PreferredColorScheme(
            &self,
            value: COREWEBVIEW2_PREFERRED_COLOR_SCHEME,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PreferredColorScheme)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn PreferredColorScheme2(
            &self,
            value: COREWEBVIEW2_PREFERRED_COLOR_SCHEME,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PreferredColorScheme2)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Profile_Vtbl {
        pub ProfileName: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub IsInPrivateModeEnabled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub ProfilePath: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub DefaultDownloadFolderPath: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub DefaultDownloadFolderPath2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub PreferredColorScheme: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_PREFERRED_COLOR_SCHEME,
        ) -> windows_core::HRESULT,
        pub PreferredColorScheme2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_PREFERRED_COLOR_SCHEME,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Profile_Impl {
        fn ProfileName(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn IsInPrivateModeEnabled(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn ProfilePath(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn DefaultDownloadFolderPath(
            &self,
            value: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
        fn DefaultDownloadFolderPath2(
            &self,
            value: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
        fn PreferredColorScheme(
            &self,
            value: COREWEBVIEW2_PREFERRED_COLOR_SCHEME,
        ) -> windows_core::Result<()>;
        fn PreferredColorScheme2(
            &self,
            value: COREWEBVIEW2_PREFERRED_COLOR_SCHEME,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Profile_Vtbl {
        pub const fn new<Identity: ICoreWebView2Profile_Impl>() -> Self {
            unsafe extern "system" fn ProfileName<Identity: ICoreWebView2Profile_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Profile_Impl::ProfileName(this, core::mem::transmute(&value))
                        .into()
                }
            }
            unsafe extern "system" fn IsInPrivateModeEnabled<
                Identity: ICoreWebView2Profile_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Profile_Impl::IsInPrivateModeEnabled(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ProfilePath<Identity: ICoreWebView2Profile_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Profile_Impl::ProfilePath(this, core::mem::transmute(&value))
                        .into()
                }
            }
            unsafe extern "system" fn DefaultDownloadFolderPath<
                Identity: ICoreWebView2Profile_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Profile_Impl::DefaultDownloadFolderPath(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn DefaultDownloadFolderPath2<
                Identity: ICoreWebView2Profile_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Profile_Impl::DefaultDownloadFolderPath2(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PreferredColorScheme<Identity: ICoreWebView2Profile_Impl>(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_PREFERRED_COLOR_SCHEME,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Profile_Impl::PreferredColorScheme(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PreferredColorScheme2<Identity: ICoreWebView2Profile_Impl>(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_PREFERRED_COLOR_SCHEME,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Profile_Impl::PreferredColorScheme2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                ProfileName: ProfileName::<Identity>,
                IsInPrivateModeEnabled: IsInPrivateModeEnabled::<Identity>,
                ProfilePath: ProfilePath::<Identity>,
                DefaultDownloadFolderPath: DefaultDownloadFolderPath::<Identity>,
                DefaultDownloadFolderPath2: DefaultDownloadFolderPath2::<Identity>,
                PreferredColorScheme: PreferredColorScheme::<Identity>,
                PreferredColorScheme2: PreferredColorScheme2::<Identity>,
            }
        }
    }
    struct ICoreWebView2Profile_ImplVtbl<T: ICoreWebView2Profile_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Profile_Impl> ICoreWebView2Profile_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Profile_Vtbl = ICoreWebView2Profile_Vtbl::new::<T>();
    }
    impl ICoreWebView2Profile {
        pub fn new<'a, T: ICoreWebView2Profile_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Profile_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Profile2, ICoreWebView2Profile2_Vtbl);
    impl ICoreWebView2Profile2 {
        pub unsafe fn ClearBrowsingData<P1>(
            &self,
            datakinds: COREWEBVIEW2_BROWSING_DATA_KINDS,
            handler: P1,
        ) -> windows_core::Result<()>
        where
            P1: windows_core::Param<ICoreWebView2ClearBrowsingDataCompletedHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ClearBrowsingData)(
                    windows_core::Interface::as_raw(self),
                    datakinds,
                    handler.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn ClearBrowsingDataInTimeRange<P3>(
            &self,
            datakinds: COREWEBVIEW2_BROWSING_DATA_KINDS,
            starttime: f64,
            endtime: f64,
            handler: P3,
        ) -> windows_core::Result<()>
        where
            P3: windows_core::Param<ICoreWebView2ClearBrowsingDataCompletedHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ClearBrowsingDataInTimeRange)(
                    windows_core::Interface::as_raw(self),
                    datakinds,
                    starttime,
                    endtime,
                    handler.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn ClearBrowsingDataAll<P0>(&self, handler: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2ClearBrowsingDataCompletedHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ClearBrowsingDataAll)(
                    windows_core::Interface::as_raw(self),
                    handler.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Profile2_Vtbl {
        pub ClearBrowsingData: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_BROWSING_DATA_KINDS,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub ClearBrowsingDataInTimeRange: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_BROWSING_DATA_KINDS,
            f64,
            f64,
            *mut core::ffi::c_void,
        )
            -> windows_core::HRESULT,
        pub ClearBrowsingDataAll: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Profile2_Impl {
        fn ClearBrowsingData(
            &self,
            datakinds: COREWEBVIEW2_BROWSING_DATA_KINDS,
            handler: windows_core::Ref<'_, ICoreWebView2ClearBrowsingDataCompletedHandler>,
        ) -> windows_core::Result<()>;
        fn ClearBrowsingDataInTimeRange(
            &self,
            datakinds: COREWEBVIEW2_BROWSING_DATA_KINDS,
            starttime: f64,
            endtime: f64,
            handler: windows_core::Ref<'_, ICoreWebView2ClearBrowsingDataCompletedHandler>,
        ) -> windows_core::Result<()>;
        fn ClearBrowsingDataAll(
            &self,
            handler: windows_core::Ref<'_, ICoreWebView2ClearBrowsingDataCompletedHandler>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Profile2_Vtbl {
        pub const fn new<Identity: ICoreWebView2Profile2_Impl>() -> Self {
            unsafe extern "system" fn ClearBrowsingData<Identity: ICoreWebView2Profile2_Impl>(
                this: *mut core::ffi::c_void,
                datakinds: COREWEBVIEW2_BROWSING_DATA_KINDS,
                handler: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Profile2_Impl::ClearBrowsingData(
                        this,
                        core::mem::transmute_copy(&datakinds),
                        core::mem::transmute_copy(&handler),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ClearBrowsingDataInTimeRange<
                Identity: ICoreWebView2Profile2_Impl,
            >(
                this: *mut core::ffi::c_void,
                datakinds: COREWEBVIEW2_BROWSING_DATA_KINDS,
                starttime: f64,
                endtime: f64,
                handler: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Profile2_Impl::ClearBrowsingDataInTimeRange(
                        this,
                        core::mem::transmute_copy(&datakinds),
                        core::mem::transmute_copy(&starttime),
                        core::mem::transmute_copy(&endtime),
                        core::mem::transmute_copy(&handler),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ClearBrowsingDataAll<Identity: ICoreWebView2Profile2_Impl>(
                this: *mut core::ffi::c_void,
                handler: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Profile2_Impl::ClearBrowsingDataAll(
                        this,
                        core::mem::transmute_copy(&handler),
                    )
                    .into()
                }
            }
            Self {
                ClearBrowsingData: ClearBrowsingData::<Identity>,
                ClearBrowsingDataInTimeRange: ClearBrowsingDataInTimeRange::<Identity>,
                ClearBrowsingDataAll: ClearBrowsingDataAll::<Identity>,
            }
        }
    }
    struct ICoreWebView2Profile2_ImplVtbl<T: ICoreWebView2Profile2_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Profile2_Impl> ICoreWebView2Profile2_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Profile2_Vtbl = ICoreWebView2Profile2_Vtbl::new::<T>();
    }
    impl ICoreWebView2Profile2 {
        pub fn new<'a, T: ICoreWebView2Profile2_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Profile2_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Profile3, ICoreWebView2Profile3_Vtbl);
    impl ICoreWebView2Profile3 {
        pub unsafe fn PreferredTrackingPreventionLevel(
            &self,
            value: COREWEBVIEW2_TRACKING_PREVENTION_LEVEL,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PreferredTrackingPreventionLevel)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn PreferredTrackingPreventionLevel2(
            &self,
            value: COREWEBVIEW2_TRACKING_PREVENTION_LEVEL,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).PreferredTrackingPreventionLevel2)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Profile3_Vtbl {
        pub PreferredTrackingPreventionLevel: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_TRACKING_PREVENTION_LEVEL,
        )
            -> windows_core::HRESULT,
        pub PreferredTrackingPreventionLevel2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_TRACKING_PREVENTION_LEVEL,
        )
            -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Profile3_Impl {
        fn PreferredTrackingPreventionLevel(
            &self,
            value: COREWEBVIEW2_TRACKING_PREVENTION_LEVEL,
        ) -> windows_core::Result<()>;
        fn PreferredTrackingPreventionLevel2(
            &self,
            value: COREWEBVIEW2_TRACKING_PREVENTION_LEVEL,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Profile3_Vtbl {
        pub const fn new<Identity: ICoreWebView2Profile3_Impl>() -> Self {
            unsafe extern "system" fn PreferredTrackingPreventionLevel<
                Identity: ICoreWebView2Profile3_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_TRACKING_PREVENTION_LEVEL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Profile3_Impl::PreferredTrackingPreventionLevel(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PreferredTrackingPreventionLevel2<
                Identity: ICoreWebView2Profile3_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_TRACKING_PREVENTION_LEVEL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Profile3_Impl::PreferredTrackingPreventionLevel2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                PreferredTrackingPreventionLevel: PreferredTrackingPreventionLevel::<Identity>,
                PreferredTrackingPreventionLevel2: PreferredTrackingPreventionLevel2::<Identity>,
            }
        }
    }
    struct ICoreWebView2Profile3_ImplVtbl<T: ICoreWebView2Profile3_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Profile3_Impl> ICoreWebView2Profile3_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Profile3_Vtbl = ICoreWebView2Profile3_Vtbl::new::<T>();
    }
    impl ICoreWebView2Profile3 {
        pub fn new<'a, T: ICoreWebView2Profile3_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Profile3_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Profile4, ICoreWebView2Profile4_Vtbl);
    impl ICoreWebView2Profile4 {
        pub unsafe fn SetPermissionState<P1, P3>(
            &self,
            permissionkind: COREWEBVIEW2_PERMISSION_KIND,
            origin: P1,
            state: COREWEBVIEW2_PERMISSION_STATE,
            handler: P3,
        ) -> windows_core::Result<()>
        where
            P1: windows_core::Param<windows_core::PCWSTR>,
            P3: windows_core::Param<ICoreWebView2SetPermissionStateCompletedHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).SetPermissionState)(
                    windows_core::Interface::as_raw(self),
                    permissionkind,
                    origin.param().abi(),
                    state,
                    handler.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn GetNonDefaultPermissionSettings<P0>(
            &self,
            handler: P0,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2GetNonDefaultPermissionSettingsCompletedHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetNonDefaultPermissionSettings)(
                    windows_core::Interface::as_raw(self),
                    handler.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Profile4_Vtbl {
        pub SetPermissionState: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_PERMISSION_KIND,
            windows_core::PCWSTR,
            COREWEBVIEW2_PERMISSION_STATE,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub GetNonDefaultPermissionSettings: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        )
            -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Profile4_Impl {
        fn SetPermissionState(
            &self,
            permissionkind: COREWEBVIEW2_PERMISSION_KIND,
            origin: &windows_core::PCWSTR,
            state: COREWEBVIEW2_PERMISSION_STATE,
            handler: windows_core::Ref<'_, ICoreWebView2SetPermissionStateCompletedHandler>,
        ) -> windows_core::Result<()>;
        fn GetNonDefaultPermissionSettings(
            &self,
            handler: windows_core::Ref<
                '_,
                ICoreWebView2GetNonDefaultPermissionSettingsCompletedHandler,
            >,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Profile4_Vtbl {
        pub const fn new<Identity: ICoreWebView2Profile4_Impl>() -> Self {
            unsafe extern "system" fn SetPermissionState<Identity: ICoreWebView2Profile4_Impl>(
                this: *mut core::ffi::c_void,
                permissionkind: COREWEBVIEW2_PERMISSION_KIND,
                origin: windows_core::PCWSTR,
                state: COREWEBVIEW2_PERMISSION_STATE,
                handler: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Profile4_Impl::SetPermissionState(
                        this,
                        core::mem::transmute_copy(&permissionkind),
                        core::mem::transmute(&origin),
                        core::mem::transmute_copy(&state),
                        core::mem::transmute_copy(&handler),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn GetNonDefaultPermissionSettings<
                Identity: ICoreWebView2Profile4_Impl,
            >(
                this: *mut core::ffi::c_void,
                handler: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Profile4_Impl::GetNonDefaultPermissionSettings(
                        this,
                        core::mem::transmute_copy(&handler),
                    )
                    .into()
                }
            }
            Self {
                SetPermissionState: SetPermissionState::<Identity>,
                GetNonDefaultPermissionSettings: GetNonDefaultPermissionSettings::<Identity>,
            }
        }
    }
    struct ICoreWebView2Profile4_ImplVtbl<T: ICoreWebView2Profile4_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Profile4_Impl> ICoreWebView2Profile4_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Profile4_Vtbl = ICoreWebView2Profile4_Vtbl::new::<T>();
    }
    impl ICoreWebView2Profile4 {
        pub fn new<'a, T: ICoreWebView2Profile4_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Profile4_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Profile5, ICoreWebView2Profile5_Vtbl);
    impl ICoreWebView2Profile5 {
        pub unsafe fn CookieManager<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2CookieManager>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).CookieManager)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Profile5_Vtbl {
        pub CookieManager: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Profile5_Impl {
        fn CookieManager(
            &self,
            value: windows_core::Ref<'_, ICoreWebView2CookieManager>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Profile5_Vtbl {
        pub const fn new<Identity: ICoreWebView2Profile5_Impl>() -> Self {
            unsafe extern "system" fn CookieManager<Identity: ICoreWebView2Profile5_Impl>(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Profile5_Impl::CookieManager(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                CookieManager: CookieManager::<Identity>,
            }
        }
    }
    struct ICoreWebView2Profile5_ImplVtbl<T: ICoreWebView2Profile5_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Profile5_Impl> ICoreWebView2Profile5_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Profile5_Vtbl = ICoreWebView2Profile5_Vtbl::new::<T>();
    }
    impl ICoreWebView2Profile5 {
        pub fn new<'a, T: ICoreWebView2Profile5_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Profile5_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Profile6, ICoreWebView2Profile6_Vtbl);
    impl ICoreWebView2Profile6 {
        pub unsafe fn IsPasswordAutosaveEnabled(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsPasswordAutosaveEnabled)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsPasswordAutosaveEnabled2(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsPasswordAutosaveEnabled2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsGeneralAutofillEnabled(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsGeneralAutofillEnabled)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsGeneralAutofillEnabled2(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsGeneralAutofillEnabled2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Profile6_Vtbl {
        pub IsPasswordAutosaveEnabled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub IsPasswordAutosaveEnabled2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub IsGeneralAutofillEnabled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub IsGeneralAutofillEnabled2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Profile6_Impl {
        fn IsPasswordAutosaveEnabled(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn IsPasswordAutosaveEnabled2(&self, value: windows_core::BOOL)
            -> windows_core::Result<()>;
        fn IsGeneralAutofillEnabled(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn IsGeneralAutofillEnabled2(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Profile6_Vtbl {
        pub const fn new<Identity: ICoreWebView2Profile6_Impl>() -> Self {
            unsafe extern "system" fn IsPasswordAutosaveEnabled<
                Identity: ICoreWebView2Profile6_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Profile6_Impl::IsPasswordAutosaveEnabled(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsPasswordAutosaveEnabled2<
                Identity: ICoreWebView2Profile6_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Profile6_Impl::IsPasswordAutosaveEnabled2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsGeneralAutofillEnabled<
                Identity: ICoreWebView2Profile6_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Profile6_Impl::IsGeneralAutofillEnabled(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsGeneralAutofillEnabled2<
                Identity: ICoreWebView2Profile6_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Profile6_Impl::IsGeneralAutofillEnabled2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                IsPasswordAutosaveEnabled: IsPasswordAutosaveEnabled::<Identity>,
                IsPasswordAutosaveEnabled2: IsPasswordAutosaveEnabled2::<Identity>,
                IsGeneralAutofillEnabled: IsGeneralAutofillEnabled::<Identity>,
                IsGeneralAutofillEnabled2: IsGeneralAutofillEnabled2::<Identity>,
            }
        }
    }
    struct ICoreWebView2Profile6_ImplVtbl<T: ICoreWebView2Profile6_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Profile6_Impl> ICoreWebView2Profile6_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Profile6_Vtbl = ICoreWebView2Profile6_Vtbl::new::<T>();
    }
    impl ICoreWebView2Profile6 {
        pub fn new<'a, T: ICoreWebView2Profile6_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Profile6_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Profile7, ICoreWebView2Profile7_Vtbl);
    impl ICoreWebView2Profile7 {
        pub unsafe fn AddBrowserExtension<P0, P1>(
            &self,
            extensionfolderpath: P0,
            handler: P1,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
            P1: windows_core::Param<ICoreWebView2ProfileAddBrowserExtensionCompletedHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).AddBrowserExtension)(
                    windows_core::Interface::as_raw(self),
                    extensionfolderpath.param().abi(),
                    handler.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn GetBrowserExtensions<P0>(&self, handler: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2ProfileGetBrowserExtensionsCompletedHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetBrowserExtensions)(
                    windows_core::Interface::as_raw(self),
                    handler.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Profile7_Vtbl {
        pub AddBrowserExtension: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub GetBrowserExtensions: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Profile7_Impl {
        fn AddBrowserExtension(
            &self,
            extensionfolderpath: &windows_core::PCWSTR,
            handler: windows_core::Ref<'_, ICoreWebView2ProfileAddBrowserExtensionCompletedHandler>,
        ) -> windows_core::Result<()>;
        fn GetBrowserExtensions(
            &self,
            handler: windows_core::Ref<
                '_,
                ICoreWebView2ProfileGetBrowserExtensionsCompletedHandler,
            >,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Profile7_Vtbl {
        pub const fn new<Identity: ICoreWebView2Profile7_Impl>() -> Self {
            unsafe extern "system" fn AddBrowserExtension<Identity: ICoreWebView2Profile7_Impl>(
                this: *mut core::ffi::c_void,
                extensionfolderpath: windows_core::PCWSTR,
                handler: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Profile7_Impl::AddBrowserExtension(
                        this,
                        core::mem::transmute(&extensionfolderpath),
                        core::mem::transmute_copy(&handler),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn GetBrowserExtensions<Identity: ICoreWebView2Profile7_Impl>(
                this: *mut core::ffi::c_void,
                handler: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Profile7_Impl::GetBrowserExtensions(
                        this,
                        core::mem::transmute_copy(&handler),
                    )
                    .into()
                }
            }
            Self {
                AddBrowserExtension: AddBrowserExtension::<Identity>,
                GetBrowserExtensions: GetBrowserExtensions::<Identity>,
            }
        }
    }
    struct ICoreWebView2Profile7_ImplVtbl<T: ICoreWebView2Profile7_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Profile7_Impl> ICoreWebView2Profile7_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Profile7_Vtbl = ICoreWebView2Profile7_Vtbl::new::<T>();
    }
    impl ICoreWebView2Profile7 {
        pub fn new<'a, T: ICoreWebView2Profile7_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Profile7_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Profile8, ICoreWebView2Profile8_Vtbl);
    impl ICoreWebView2Profile8 {
        pub unsafe fn Delete(&self) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Delete)(windows_core::Interface::as_raw(
                    self,
                ))
                .ok()
            }
        }
        pub unsafe fn add_Deleted<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2ProfileDeletedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_Deleted)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_Deleted(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_Deleted)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Profile8_Vtbl {
        pub Delete: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub add_Deleted: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_Deleted:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Profile8_Impl {
        fn Delete(&self) -> windows_core::Result<()>;
        fn add_Deleted(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2ProfileDeletedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_Deleted(&self, token: i64) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Profile8_Vtbl {
        pub const fn new<Identity: ICoreWebView2Profile8_Impl>() -> Self {
            unsafe extern "system" fn Delete<Identity: ICoreWebView2Profile8_Impl>(
                this: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Profile8_Impl::Delete(this).into()
                }
            }
            unsafe extern "system" fn add_Deleted<Identity: ICoreWebView2Profile8_Impl>(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Profile8_Impl::add_Deleted(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_Deleted<Identity: ICoreWebView2Profile8_Impl>(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Profile8_Impl::remove_Deleted(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            Self {
                Delete: Delete::<Identity>,
                add_Deleted: add_Deleted::<Identity>,
                remove_Deleted: remove_Deleted::<Identity>,
            }
        }
    }
    struct ICoreWebView2Profile8_ImplVtbl<T: ICoreWebView2Profile8_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Profile8_Impl> ICoreWebView2Profile8_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Profile8_Vtbl = ICoreWebView2Profile8_Vtbl::new::<T>();
    }
    impl ICoreWebView2Profile8 {
        pub fn new<'a, T: ICoreWebView2Profile8_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Profile8_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ProfileAddBrowserExtensionCompletedHandler,
        ICoreWebView2ProfileAddBrowserExtensionCompletedHandler_Vtbl
    );
    impl ICoreWebView2ProfileAddBrowserExtensionCompletedHandler {
        pub unsafe fn Invoke<P1>(
            &self,
            errorcode: windows_core::HRESULT,
            result: P1,
        ) -> windows_core::Result<()>
        where
            P1: windows_core::Param<ICoreWebView2BrowserExtension>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    errorcode,
                    result.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ProfileAddBrowserExtensionCompletedHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::HRESULT,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ProfileAddBrowserExtensionCompletedHandler_Impl {
        fn Invoke(
            &self,
            errorcode: windows_core::HRESULT,
            result: windows_core::Ref<'_, ICoreWebView2BrowserExtension>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ProfileAddBrowserExtensionCompletedHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2ProfileAddBrowserExtensionCompletedHandler_Impl>(
        ) -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2ProfileAddBrowserExtensionCompletedHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                errorcode: windows_core::HRESULT,
                result: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ProfileAddBrowserExtensionCompletedHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&errorcode),
                        core::mem::transmute_copy(&result),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2ProfileAddBrowserExtensionCompletedHandler_ImplVtbl<
        T: ICoreWebView2ProfileAddBrowserExtensionCompletedHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2ProfileAddBrowserExtensionCompletedHandler_Impl>
        ICoreWebView2ProfileAddBrowserExtensionCompletedHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2ProfileAddBrowserExtensionCompletedHandler_Vtbl =
            ICoreWebView2ProfileAddBrowserExtensionCompletedHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2ProfileAddBrowserExtensionCompletedHandler {
        pub fn new<'a, T: ICoreWebView2ProfileAddBrowserExtensionCompletedHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable:
                    &ICoreWebView2ProfileAddBrowserExtensionCompletedHandler_ImplVtbl::<T>::VTABLE
                        as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ProfileDeletedEventHandler,
        ICoreWebView2ProfileDeletedEventHandler_Vtbl
    );
    impl ICoreWebView2ProfileDeletedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Profile>,
            P1: windows_core::Param<windows_core::IUnknown>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ProfileDeletedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ProfileDeletedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2Profile>,
            args: windows_core::Ref<'_, windows_core::IUnknown>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ProfileDeletedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2ProfileDeletedEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2ProfileDeletedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ProfileDeletedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2ProfileDeletedEventHandler_ImplVtbl<
        T: ICoreWebView2ProfileDeletedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2ProfileDeletedEventHandler_Impl>
        ICoreWebView2ProfileDeletedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2ProfileDeletedEventHandler_Vtbl =
            ICoreWebView2ProfileDeletedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2ProfileDeletedEventHandler {
        pub fn new<'a, T: ICoreWebView2ProfileDeletedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ProfileDeletedEventHandler_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ProfileGetBrowserExtensionsCompletedHandler,
        ICoreWebView2ProfileGetBrowserExtensionsCompletedHandler_Vtbl
    );
    impl ICoreWebView2ProfileGetBrowserExtensionsCompletedHandler {
        pub unsafe fn Invoke<P1>(
            &self,
            errorcode: windows_core::HRESULT,
            result: P1,
        ) -> windows_core::Result<()>
        where
            P1: windows_core::Param<ICoreWebView2BrowserExtensionList>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    errorcode,
                    result.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ProfileGetBrowserExtensionsCompletedHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::HRESULT,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ProfileGetBrowserExtensionsCompletedHandler_Impl {
        fn Invoke(
            &self,
            errorcode: windows_core::HRESULT,
            result: windows_core::Ref<'_, ICoreWebView2BrowserExtensionList>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ProfileGetBrowserExtensionsCompletedHandler_Vtbl {
        pub const fn new<
            Identity: ICoreWebView2ProfileGetBrowserExtensionsCompletedHandler_Impl,
        >() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2ProfileGetBrowserExtensionsCompletedHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                errorcode: windows_core::HRESULT,
                result: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ProfileGetBrowserExtensionsCompletedHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&errorcode),
                        core::mem::transmute_copy(&result),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2ProfileGetBrowserExtensionsCompletedHandler_ImplVtbl<
        T: ICoreWebView2ProfileGetBrowserExtensionsCompletedHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2ProfileGetBrowserExtensionsCompletedHandler_Impl>
        ICoreWebView2ProfileGetBrowserExtensionsCompletedHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2ProfileGetBrowserExtensionsCompletedHandler_Vtbl =
            ICoreWebView2ProfileGetBrowserExtensionsCompletedHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2ProfileGetBrowserExtensionsCompletedHandler {
        pub fn new<'a, T: ICoreWebView2ProfileGetBrowserExtensionsCompletedHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable:
                    &ICoreWebView2ProfileGetBrowserExtensionsCompletedHandler_ImplVtbl::<T>::VTABLE
                        as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2RasterizationScaleChangedEventHandler,
        ICoreWebView2RasterizationScaleChangedEventHandler_Vtbl
    );
    impl ICoreWebView2RasterizationScaleChangedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Controller>,
            P1: windows_core::Param<windows_core::IUnknown>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2RasterizationScaleChangedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2RasterizationScaleChangedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2Controller>,
            args: windows_core::Ref<'_, windows_core::IUnknown>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2RasterizationScaleChangedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2RasterizationScaleChangedEventHandler_Impl>() -> Self
        {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2RasterizationScaleChangedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2RasterizationScaleChangedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2RasterizationScaleChangedEventHandler_ImplVtbl<
        T: ICoreWebView2RasterizationScaleChangedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2RasterizationScaleChangedEventHandler_Impl>
        ICoreWebView2RasterizationScaleChangedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2RasterizationScaleChangedEventHandler_Vtbl =
            ICoreWebView2RasterizationScaleChangedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2RasterizationScaleChangedEventHandler {
        pub fn new<'a, T: ICoreWebView2RasterizationScaleChangedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2RasterizationScaleChangedEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2RegionRectCollectionView,
        ICoreWebView2RegionRectCollectionView_Vtbl
    );
    impl ICoreWebView2RegionRectCollectionView {
        pub unsafe fn Count(&self, value: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Count)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2RegionRectCollectionView_Vtbl {
        pub Count: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        GetValueAtIndex: usize,
    }
    pub trait ICoreWebView2RegionRectCollectionView_Impl {
        fn Count(&self, value: u32) -> windows_core::Result<()>;
    }
    impl ICoreWebView2RegionRectCollectionView_Vtbl {
        pub const fn new<Identity: ICoreWebView2RegionRectCollectionView_Impl>() -> Self {
            unsafe extern "system" fn Count<
                Identity: ICoreWebView2RegionRectCollectionView_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2RegionRectCollectionView_Impl::Count(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                Count: Count::<Identity>,
                GetValueAtIndex: 0,
            }
        }
    }
    struct ICoreWebView2RegionRectCollectionView_ImplVtbl<T: ICoreWebView2RegionRectCollectionView_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2RegionRectCollectionView_Impl>
        ICoreWebView2RegionRectCollectionView_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2RegionRectCollectionView_Vtbl =
            ICoreWebView2RegionRectCollectionView_Vtbl::new::<T>();
    }
    impl ICoreWebView2RegionRectCollectionView {
        pub fn new<'a, T: ICoreWebView2RegionRectCollectionView_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2RegionRectCollectionView_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2SaveAsUIShowingEventArgs,
        ICoreWebView2SaveAsUIShowingEventArgs_Vtbl
    );
    impl ICoreWebView2SaveAsUIShowingEventArgs {
        pub unsafe fn ContentMimeType<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ContentMimeType)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Cancel(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Cancel)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn Cancel2(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Cancel2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn SuppressDefaultDialog(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).SuppressDefaultDialog)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn SuppressDefaultDialog2(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).SuppressDefaultDialog2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn GetDeferral<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Deferral>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetDeferral)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn SaveAsFilePath<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).SaveAsFilePath)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn SaveAsFilePath2<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).SaveAsFilePath2)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn AllowReplace(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).AllowReplace)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn AllowReplace2(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).AllowReplace2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn Kind(&self, value: COREWEBVIEW2_SAVE_AS_KIND) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Kind)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn Kind2(&self, value: COREWEBVIEW2_SAVE_AS_KIND) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Kind2)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2SaveAsUIShowingEventArgs_Vtbl {
        pub ContentMimeType: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub Cancel: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub Cancel2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub SuppressDefaultDialog: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub SuppressDefaultDialog2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub GetDeferral: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub SaveAsFilePath: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub SaveAsFilePath2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub AllowReplace: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub AllowReplace2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub Kind: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_SAVE_AS_KIND,
        ) -> windows_core::HRESULT,
        pub Kind2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_SAVE_AS_KIND,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2SaveAsUIShowingEventArgs_Impl {
        fn ContentMimeType(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn Cancel(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn Cancel2(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn SuppressDefaultDialog(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn SuppressDefaultDialog2(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn GetDeferral(
            &self,
            value: windows_core::Ref<'_, ICoreWebView2Deferral>,
        ) -> windows_core::Result<()>;
        fn SaveAsFilePath(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn SaveAsFilePath2(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn AllowReplace(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn AllowReplace2(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn Kind(&self, value: COREWEBVIEW2_SAVE_AS_KIND) -> windows_core::Result<()>;
        fn Kind2(&self, value: COREWEBVIEW2_SAVE_AS_KIND) -> windows_core::Result<()>;
    }
    impl ICoreWebView2SaveAsUIShowingEventArgs_Vtbl {
        pub const fn new<Identity: ICoreWebView2SaveAsUIShowingEventArgs_Impl>() -> Self {
            unsafe extern "system" fn ContentMimeType<
                Identity: ICoreWebView2SaveAsUIShowingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2SaveAsUIShowingEventArgs_Impl::ContentMimeType(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Cancel<
                Identity: ICoreWebView2SaveAsUIShowingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2SaveAsUIShowingEventArgs_Impl::Cancel(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Cancel2<
                Identity: ICoreWebView2SaveAsUIShowingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2SaveAsUIShowingEventArgs_Impl::Cancel2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn SuppressDefaultDialog<
                Identity: ICoreWebView2SaveAsUIShowingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2SaveAsUIShowingEventArgs_Impl::SuppressDefaultDialog(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn SuppressDefaultDialog2<
                Identity: ICoreWebView2SaveAsUIShowingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2SaveAsUIShowingEventArgs_Impl::SuppressDefaultDialog2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn GetDeferral<
                Identity: ICoreWebView2SaveAsUIShowingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2SaveAsUIShowingEventArgs_Impl::GetDeferral(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn SaveAsFilePath<
                Identity: ICoreWebView2SaveAsUIShowingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2SaveAsUIShowingEventArgs_Impl::SaveAsFilePath(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn SaveAsFilePath2<
                Identity: ICoreWebView2SaveAsUIShowingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2SaveAsUIShowingEventArgs_Impl::SaveAsFilePath2(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn AllowReplace<
                Identity: ICoreWebView2SaveAsUIShowingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2SaveAsUIShowingEventArgs_Impl::AllowReplace(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn AllowReplace2<
                Identity: ICoreWebView2SaveAsUIShowingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2SaveAsUIShowingEventArgs_Impl::AllowReplace2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Kind<Identity: ICoreWebView2SaveAsUIShowingEventArgs_Impl>(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_SAVE_AS_KIND,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2SaveAsUIShowingEventArgs_Impl::Kind(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Kind2<
                Identity: ICoreWebView2SaveAsUIShowingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_SAVE_AS_KIND,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2SaveAsUIShowingEventArgs_Impl::Kind2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                ContentMimeType: ContentMimeType::<Identity>,
                Cancel: Cancel::<Identity>,
                Cancel2: Cancel2::<Identity>,
                SuppressDefaultDialog: SuppressDefaultDialog::<Identity>,
                SuppressDefaultDialog2: SuppressDefaultDialog2::<Identity>,
                GetDeferral: GetDeferral::<Identity>,
                SaveAsFilePath: SaveAsFilePath::<Identity>,
                SaveAsFilePath2: SaveAsFilePath2::<Identity>,
                AllowReplace: AllowReplace::<Identity>,
                AllowReplace2: AllowReplace2::<Identity>,
                Kind: Kind::<Identity>,
                Kind2: Kind2::<Identity>,
            }
        }
    }
    struct ICoreWebView2SaveAsUIShowingEventArgs_ImplVtbl<T: ICoreWebView2SaveAsUIShowingEventArgs_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2SaveAsUIShowingEventArgs_Impl>
        ICoreWebView2SaveAsUIShowingEventArgs_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2SaveAsUIShowingEventArgs_Vtbl =
            ICoreWebView2SaveAsUIShowingEventArgs_Vtbl::new::<T>();
    }
    impl ICoreWebView2SaveAsUIShowingEventArgs {
        pub fn new<'a, T: ICoreWebView2SaveAsUIShowingEventArgs_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2SaveAsUIShowingEventArgs_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2SaveAsUIShowingEventHandler,
        ICoreWebView2SaveAsUIShowingEventHandler_Vtbl
    );
    impl ICoreWebView2SaveAsUIShowingEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
            P1: windows_core::Param<ICoreWebView2SaveAsUIShowingEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2SaveAsUIShowingEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2SaveAsUIShowingEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2>,
            args: windows_core::Ref<'_, ICoreWebView2SaveAsUIShowingEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2SaveAsUIShowingEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2SaveAsUIShowingEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2SaveAsUIShowingEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2SaveAsUIShowingEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2SaveAsUIShowingEventHandler_ImplVtbl<
        T: ICoreWebView2SaveAsUIShowingEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2SaveAsUIShowingEventHandler_Impl>
        ICoreWebView2SaveAsUIShowingEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2SaveAsUIShowingEventHandler_Vtbl =
            ICoreWebView2SaveAsUIShowingEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2SaveAsUIShowingEventHandler {
        pub fn new<'a, T: ICoreWebView2SaveAsUIShowingEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2SaveAsUIShowingEventHandler_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2SaveFileSecurityCheckStartingEventArgs,
        ICoreWebView2SaveFileSecurityCheckStartingEventArgs_Vtbl
    );
    impl ICoreWebView2SaveFileSecurityCheckStartingEventArgs {
        pub unsafe fn CancelSave(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).CancelSave)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn CancelSave2(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).CancelSave2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn DocumentOriginUri<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).DocumentOriginUri)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn FileExtension<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).FileExtension)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn FilePath<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).FilePath)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn SuppressDefaultPolicy(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).SuppressDefaultPolicy)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn SuppressDefaultPolicy2(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).SuppressDefaultPolicy2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn GetDeferral<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Deferral>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetDeferral)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2SaveFileSecurityCheckStartingEventArgs_Vtbl {
        pub CancelSave: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub CancelSave2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub DocumentOriginUri: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub FileExtension: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub FilePath: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub SuppressDefaultPolicy: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub SuppressDefaultPolicy2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub GetDeferral: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2SaveFileSecurityCheckStartingEventArgs_Impl {
        fn CancelSave(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn CancelSave2(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn DocumentOriginUri(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn FileExtension(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn FilePath(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn SuppressDefaultPolicy(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn SuppressDefaultPolicy2(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn GetDeferral(
            &self,
            value: windows_core::Ref<'_, ICoreWebView2Deferral>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2SaveFileSecurityCheckStartingEventArgs_Vtbl {
        pub const fn new<Identity: ICoreWebView2SaveFileSecurityCheckStartingEventArgs_Impl>(
        ) -> Self {
            unsafe extern "system" fn CancelSave<
                Identity: ICoreWebView2SaveFileSecurityCheckStartingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2SaveFileSecurityCheckStartingEventArgs_Impl::CancelSave(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn CancelSave2<
                Identity: ICoreWebView2SaveFileSecurityCheckStartingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2SaveFileSecurityCheckStartingEventArgs_Impl::CancelSave2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn DocumentOriginUri<
                Identity: ICoreWebView2SaveFileSecurityCheckStartingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2SaveFileSecurityCheckStartingEventArgs_Impl::DocumentOriginUri(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn FileExtension<
                Identity: ICoreWebView2SaveFileSecurityCheckStartingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2SaveFileSecurityCheckStartingEventArgs_Impl::FileExtension(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn FilePath<
                Identity: ICoreWebView2SaveFileSecurityCheckStartingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2SaveFileSecurityCheckStartingEventArgs_Impl::FilePath(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn SuppressDefaultPolicy<
                Identity: ICoreWebView2SaveFileSecurityCheckStartingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2SaveFileSecurityCheckStartingEventArgs_Impl::SuppressDefaultPolicy(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn SuppressDefaultPolicy2<
                Identity: ICoreWebView2SaveFileSecurityCheckStartingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2SaveFileSecurityCheckStartingEventArgs_Impl:: SuppressDefaultPolicy2 ( this , core::mem::transmute_copy ( & value ) , ) . into ( )
                }
            }
            unsafe extern "system" fn GetDeferral<
                Identity: ICoreWebView2SaveFileSecurityCheckStartingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2SaveFileSecurityCheckStartingEventArgs_Impl::GetDeferral(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                CancelSave: CancelSave::<Identity>,
                CancelSave2: CancelSave2::<Identity>,
                DocumentOriginUri: DocumentOriginUri::<Identity>,
                FileExtension: FileExtension::<Identity>,
                FilePath: FilePath::<Identity>,
                SuppressDefaultPolicy: SuppressDefaultPolicy::<Identity>,
                SuppressDefaultPolicy2: SuppressDefaultPolicy2::<Identity>,
                GetDeferral: GetDeferral::<Identity>,
            }
        }
    }
    struct ICoreWebView2SaveFileSecurityCheckStartingEventArgs_ImplVtbl<
        T: ICoreWebView2SaveFileSecurityCheckStartingEventArgs_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2SaveFileSecurityCheckStartingEventArgs_Impl>
        ICoreWebView2SaveFileSecurityCheckStartingEventArgs_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2SaveFileSecurityCheckStartingEventArgs_Vtbl =
            ICoreWebView2SaveFileSecurityCheckStartingEventArgs_Vtbl::new::<T>();
    }
    impl ICoreWebView2SaveFileSecurityCheckStartingEventArgs {
        pub fn new<'a, T: ICoreWebView2SaveFileSecurityCheckStartingEventArgs_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2SaveFileSecurityCheckStartingEventArgs_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2SaveFileSecurityCheckStartingEventHandler,
        ICoreWebView2SaveFileSecurityCheckStartingEventHandler_Vtbl
    );
    impl ICoreWebView2SaveFileSecurityCheckStartingEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
            P1: windows_core::Param<ICoreWebView2SaveFileSecurityCheckStartingEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2SaveFileSecurityCheckStartingEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2SaveFileSecurityCheckStartingEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2>,
            args: windows_core::Ref<'_, ICoreWebView2SaveFileSecurityCheckStartingEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2SaveFileSecurityCheckStartingEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2SaveFileSecurityCheckStartingEventHandler_Impl>(
        ) -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2SaveFileSecurityCheckStartingEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2SaveFileSecurityCheckStartingEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2SaveFileSecurityCheckStartingEventHandler_ImplVtbl<
        T: ICoreWebView2SaveFileSecurityCheckStartingEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2SaveFileSecurityCheckStartingEventHandler_Impl>
        ICoreWebView2SaveFileSecurityCheckStartingEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2SaveFileSecurityCheckStartingEventHandler_Vtbl =
            ICoreWebView2SaveFileSecurityCheckStartingEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2SaveFileSecurityCheckStartingEventHandler {
        pub fn new<'a, T: ICoreWebView2SaveFileSecurityCheckStartingEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable:
                    &ICoreWebView2SaveFileSecurityCheckStartingEventHandler_ImplVtbl::<T>::VTABLE
                        as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ScreenCaptureStartingEventArgs,
        ICoreWebView2ScreenCaptureStartingEventArgs_Vtbl
    );
    impl ICoreWebView2ScreenCaptureStartingEventArgs {
        pub unsafe fn Cancel(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Cancel)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn Cancel2(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Cancel2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn Handled(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Handled)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn Handled2(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Handled2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn OriginalSourceFrameInfo<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2FrameInfo>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).OriginalSourceFrameInfo)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn GetDeferral<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Deferral>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetDeferral)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ScreenCaptureStartingEventArgs_Vtbl {
        pub Cancel: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub Cancel2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub Handled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub Handled2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub OriginalSourceFrameInfo: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub GetDeferral: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ScreenCaptureStartingEventArgs_Impl {
        fn Cancel(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn Cancel2(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn Handled(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn Handled2(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn OriginalSourceFrameInfo(
            &self,
            value: windows_core::Ref<'_, ICoreWebView2FrameInfo>,
        ) -> windows_core::Result<()>;
        fn GetDeferral(
            &self,
            value: windows_core::Ref<'_, ICoreWebView2Deferral>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ScreenCaptureStartingEventArgs_Vtbl {
        pub const fn new<Identity: ICoreWebView2ScreenCaptureStartingEventArgs_Impl>() -> Self {
            unsafe extern "system" fn Cancel<
                Identity: ICoreWebView2ScreenCaptureStartingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ScreenCaptureStartingEventArgs_Impl::Cancel(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Cancel2<
                Identity: ICoreWebView2ScreenCaptureStartingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ScreenCaptureStartingEventArgs_Impl::Cancel2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Handled<
                Identity: ICoreWebView2ScreenCaptureStartingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ScreenCaptureStartingEventArgs_Impl::Handled(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Handled2<
                Identity: ICoreWebView2ScreenCaptureStartingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ScreenCaptureStartingEventArgs_Impl::Handled2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn OriginalSourceFrameInfo<
                Identity: ICoreWebView2ScreenCaptureStartingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ScreenCaptureStartingEventArgs_Impl::OriginalSourceFrameInfo(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn GetDeferral<
                Identity: ICoreWebView2ScreenCaptureStartingEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ScreenCaptureStartingEventArgs_Impl::GetDeferral(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                Cancel: Cancel::<Identity>,
                Cancel2: Cancel2::<Identity>,
                Handled: Handled::<Identity>,
                Handled2: Handled2::<Identity>,
                OriginalSourceFrameInfo: OriginalSourceFrameInfo::<Identity>,
                GetDeferral: GetDeferral::<Identity>,
            }
        }
    }
    struct ICoreWebView2ScreenCaptureStartingEventArgs_ImplVtbl<
        T: ICoreWebView2ScreenCaptureStartingEventArgs_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2ScreenCaptureStartingEventArgs_Impl>
        ICoreWebView2ScreenCaptureStartingEventArgs_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2ScreenCaptureStartingEventArgs_Vtbl =
            ICoreWebView2ScreenCaptureStartingEventArgs_Vtbl::new::<T>();
    }
    impl ICoreWebView2ScreenCaptureStartingEventArgs {
        pub fn new<'a, T: ICoreWebView2ScreenCaptureStartingEventArgs_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ScreenCaptureStartingEventArgs_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ScreenCaptureStartingEventHandler,
        ICoreWebView2ScreenCaptureStartingEventHandler_Vtbl
    );
    impl ICoreWebView2ScreenCaptureStartingEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
            P1: windows_core::Param<ICoreWebView2ScreenCaptureStartingEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ScreenCaptureStartingEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ScreenCaptureStartingEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2>,
            args: windows_core::Ref<'_, ICoreWebView2ScreenCaptureStartingEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ScreenCaptureStartingEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2ScreenCaptureStartingEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2ScreenCaptureStartingEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ScreenCaptureStartingEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2ScreenCaptureStartingEventHandler_ImplVtbl<
        T: ICoreWebView2ScreenCaptureStartingEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2ScreenCaptureStartingEventHandler_Impl>
        ICoreWebView2ScreenCaptureStartingEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2ScreenCaptureStartingEventHandler_Vtbl =
            ICoreWebView2ScreenCaptureStartingEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2ScreenCaptureStartingEventHandler {
        pub fn new<'a, T: ICoreWebView2ScreenCaptureStartingEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ScreenCaptureStartingEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ScriptDialogOpeningEventArgs,
        ICoreWebView2ScriptDialogOpeningEventArgs_Vtbl
    );
    impl ICoreWebView2ScriptDialogOpeningEventArgs {
        pub unsafe fn Uri<P0>(&self, uri: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Uri)(
                    windows_core::Interface::as_raw(self),
                    uri.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Kind(
            &self,
            kind: COREWEBVIEW2_SCRIPT_DIALOG_KIND,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Kind)(
                    windows_core::Interface::as_raw(self),
                    kind,
                )
                .ok()
            }
        }
        pub unsafe fn Message<P0>(&self, message: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Message)(
                    windows_core::Interface::as_raw(self),
                    message.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Accept(&self) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Accept)(windows_core::Interface::as_raw(
                    self,
                ))
                .ok()
            }
        }
        pub unsafe fn DefaultText<P0>(&self, defaulttext: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).DefaultText)(
                    windows_core::Interface::as_raw(self),
                    defaulttext.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn ResultText<P0>(&self, resulttext: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ResultText)(
                    windows_core::Interface::as_raw(self),
                    resulttext.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn ResultText2<P0>(&self, resulttext: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ResultText2)(
                    windows_core::Interface::as_raw(self),
                    resulttext.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn GetDeferral<P0>(&self, deferral: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Deferral>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetDeferral)(
                    windows_core::Interface::as_raw(self),
                    deferral.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ScriptDialogOpeningEventArgs_Vtbl {
        pub Uri: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub Kind: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_SCRIPT_DIALOG_KIND,
        ) -> windows_core::HRESULT,
        pub Message: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub Accept: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub DefaultText: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub ResultText: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub ResultText2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub GetDeferral: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ScriptDialogOpeningEventArgs_Impl {
        fn Uri(&self, uri: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn Kind(&self, kind: COREWEBVIEW2_SCRIPT_DIALOG_KIND) -> windows_core::Result<()>;
        fn Message(&self, message: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn Accept(&self) -> windows_core::Result<()>;
        fn DefaultText(&self, defaulttext: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn ResultText(&self, resulttext: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn ResultText2(&self, resulttext: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn GetDeferral(
            &self,
            deferral: windows_core::Ref<'_, ICoreWebView2Deferral>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ScriptDialogOpeningEventArgs_Vtbl {
        pub const fn new<Identity: ICoreWebView2ScriptDialogOpeningEventArgs_Impl>() -> Self {
            unsafe extern "system" fn Uri<
                Identity: ICoreWebView2ScriptDialogOpeningEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                uri: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ScriptDialogOpeningEventArgs_Impl::Uri(
                        this,
                        core::mem::transmute(&uri),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Kind<
                Identity: ICoreWebView2ScriptDialogOpeningEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                kind: COREWEBVIEW2_SCRIPT_DIALOG_KIND,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ScriptDialogOpeningEventArgs_Impl::Kind(
                        this,
                        core::mem::transmute_copy(&kind),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Message<
                Identity: ICoreWebView2ScriptDialogOpeningEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                message: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ScriptDialogOpeningEventArgs_Impl::Message(
                        this,
                        core::mem::transmute(&message),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Accept<
                Identity: ICoreWebView2ScriptDialogOpeningEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ScriptDialogOpeningEventArgs_Impl::Accept(this).into()
                }
            }
            unsafe extern "system" fn DefaultText<
                Identity: ICoreWebView2ScriptDialogOpeningEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                defaulttext: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ScriptDialogOpeningEventArgs_Impl::DefaultText(
                        this,
                        core::mem::transmute(&defaulttext),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ResultText<
                Identity: ICoreWebView2ScriptDialogOpeningEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                resulttext: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ScriptDialogOpeningEventArgs_Impl::ResultText(
                        this,
                        core::mem::transmute(&resulttext),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ResultText2<
                Identity: ICoreWebView2ScriptDialogOpeningEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                resulttext: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ScriptDialogOpeningEventArgs_Impl::ResultText2(
                        this,
                        core::mem::transmute(&resulttext),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn GetDeferral<
                Identity: ICoreWebView2ScriptDialogOpeningEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                deferral: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ScriptDialogOpeningEventArgs_Impl::GetDeferral(
                        this,
                        core::mem::transmute_copy(&deferral),
                    )
                    .into()
                }
            }
            Self {
                Uri: Uri::<Identity>,
                Kind: Kind::<Identity>,
                Message: Message::<Identity>,
                Accept: Accept::<Identity>,
                DefaultText: DefaultText::<Identity>,
                ResultText: ResultText::<Identity>,
                ResultText2: ResultText2::<Identity>,
                GetDeferral: GetDeferral::<Identity>,
            }
        }
    }
    struct ICoreWebView2ScriptDialogOpeningEventArgs_ImplVtbl<
        T: ICoreWebView2ScriptDialogOpeningEventArgs_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2ScriptDialogOpeningEventArgs_Impl>
        ICoreWebView2ScriptDialogOpeningEventArgs_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2ScriptDialogOpeningEventArgs_Vtbl =
            ICoreWebView2ScriptDialogOpeningEventArgs_Vtbl::new::<T>();
    }
    impl ICoreWebView2ScriptDialogOpeningEventArgs {
        pub fn new<'a, T: ICoreWebView2ScriptDialogOpeningEventArgs_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ScriptDialogOpeningEventArgs_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ScriptDialogOpeningEventHandler,
        ICoreWebView2ScriptDialogOpeningEventHandler_Vtbl
    );
    impl ICoreWebView2ScriptDialogOpeningEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
            P1: windows_core::Param<ICoreWebView2ScriptDialogOpeningEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ScriptDialogOpeningEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ScriptDialogOpeningEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2>,
            args: windows_core::Ref<'_, ICoreWebView2ScriptDialogOpeningEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ScriptDialogOpeningEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2ScriptDialogOpeningEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2ScriptDialogOpeningEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ScriptDialogOpeningEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2ScriptDialogOpeningEventHandler_ImplVtbl<
        T: ICoreWebView2ScriptDialogOpeningEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2ScriptDialogOpeningEventHandler_Impl>
        ICoreWebView2ScriptDialogOpeningEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2ScriptDialogOpeningEventHandler_Vtbl =
            ICoreWebView2ScriptDialogOpeningEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2ScriptDialogOpeningEventHandler {
        pub fn new<'a, T: ICoreWebView2ScriptDialogOpeningEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ScriptDialogOpeningEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ScriptException,
        ICoreWebView2ScriptException_Vtbl
    );
    impl ICoreWebView2ScriptException {
        pub unsafe fn LineNumber(&self, value: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).LineNumber)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn ColumnNumber(&self, value: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ColumnNumber)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn Name<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Name)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Message<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Message)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn ToJson<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ToJson)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ScriptException_Vtbl {
        pub LineNumber:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub ColumnNumber:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub Name: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub Message: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub ToJson: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ScriptException_Impl {
        fn LineNumber(&self, value: u32) -> windows_core::Result<()>;
        fn ColumnNumber(&self, value: u32) -> windows_core::Result<()>;
        fn Name(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn Message(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn ToJson(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ScriptException_Vtbl {
        pub const fn new<Identity: ICoreWebView2ScriptException_Impl>() -> Self {
            unsafe extern "system" fn LineNumber<Identity: ICoreWebView2ScriptException_Impl>(
                this: *mut core::ffi::c_void,
                value: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ScriptException_Impl::LineNumber(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ColumnNumber<Identity: ICoreWebView2ScriptException_Impl>(
                this: *mut core::ffi::c_void,
                value: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ScriptException_Impl::ColumnNumber(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Name<Identity: ICoreWebView2ScriptException_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ScriptException_Impl::Name(this, core::mem::transmute(&value))
                        .into()
                }
            }
            unsafe extern "system" fn Message<Identity: ICoreWebView2ScriptException_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ScriptException_Impl::Message(this, core::mem::transmute(&value))
                        .into()
                }
            }
            unsafe extern "system" fn ToJson<Identity: ICoreWebView2ScriptException_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ScriptException_Impl::ToJson(this, core::mem::transmute(&value))
                        .into()
                }
            }
            Self {
                LineNumber: LineNumber::<Identity>,
                ColumnNumber: ColumnNumber::<Identity>,
                Name: Name::<Identity>,
                Message: Message::<Identity>,
                ToJson: ToJson::<Identity>,
            }
        }
    }
    struct ICoreWebView2ScriptException_ImplVtbl<T: ICoreWebView2ScriptException_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2ScriptException_Impl> ICoreWebView2ScriptException_ImplVtbl<T> {
        const VTABLE: ICoreWebView2ScriptException_Vtbl =
            ICoreWebView2ScriptException_Vtbl::new::<T>();
    }
    impl ICoreWebView2ScriptException {
        pub fn new<'a, T: ICoreWebView2ScriptException_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ScriptException_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ServerCertificateErrorDetectedEventArgs,
        ICoreWebView2ServerCertificateErrorDetectedEventArgs_Vtbl
    );
    impl ICoreWebView2ServerCertificateErrorDetectedEventArgs {
        pub unsafe fn ErrorStatus(
            &self,
            value: COREWEBVIEW2_WEB_ERROR_STATUS,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ErrorStatus)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn RequestUri<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).RequestUri)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn ServerCertificate<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Certificate>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ServerCertificate)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Action(
            &self,
            value: COREWEBVIEW2_SERVER_CERTIFICATE_ERROR_ACTION,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Action)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn Action2(
            &self,
            value: COREWEBVIEW2_SERVER_CERTIFICATE_ERROR_ACTION,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Action2)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn GetDeferral<P0>(&self, deferral: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Deferral>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetDeferral)(
                    windows_core::Interface::as_raw(self),
                    deferral.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ServerCertificateErrorDetectedEventArgs_Vtbl {
        pub ErrorStatus: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_WEB_ERROR_STATUS,
        ) -> windows_core::HRESULT,
        pub RequestUri: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub ServerCertificate: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Action: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_SERVER_CERTIFICATE_ERROR_ACTION,
        ) -> windows_core::HRESULT,
        pub Action2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_SERVER_CERTIFICATE_ERROR_ACTION,
        ) -> windows_core::HRESULT,
        pub GetDeferral: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ServerCertificateErrorDetectedEventArgs_Impl {
        fn ErrorStatus(&self, value: COREWEBVIEW2_WEB_ERROR_STATUS) -> windows_core::Result<()>;
        fn RequestUri(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn ServerCertificate(
            &self,
            value: windows_core::Ref<'_, ICoreWebView2Certificate>,
        ) -> windows_core::Result<()>;
        fn Action(
            &self,
            value: COREWEBVIEW2_SERVER_CERTIFICATE_ERROR_ACTION,
        ) -> windows_core::Result<()>;
        fn Action2(
            &self,
            value: COREWEBVIEW2_SERVER_CERTIFICATE_ERROR_ACTION,
        ) -> windows_core::Result<()>;
        fn GetDeferral(
            &self,
            deferral: windows_core::Ref<'_, ICoreWebView2Deferral>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ServerCertificateErrorDetectedEventArgs_Vtbl {
        pub const fn new<Identity: ICoreWebView2ServerCertificateErrorDetectedEventArgs_Impl>(
        ) -> Self {
            unsafe extern "system" fn ErrorStatus<
                Identity: ICoreWebView2ServerCertificateErrorDetectedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_WEB_ERROR_STATUS,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ServerCertificateErrorDetectedEventArgs_Impl::ErrorStatus(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn RequestUri<
                Identity: ICoreWebView2ServerCertificateErrorDetectedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ServerCertificateErrorDetectedEventArgs_Impl::RequestUri(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ServerCertificate<
                Identity: ICoreWebView2ServerCertificateErrorDetectedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ServerCertificateErrorDetectedEventArgs_Impl::ServerCertificate(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Action<
                Identity: ICoreWebView2ServerCertificateErrorDetectedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_SERVER_CERTIFICATE_ERROR_ACTION,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ServerCertificateErrorDetectedEventArgs_Impl::Action(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Action2<
                Identity: ICoreWebView2ServerCertificateErrorDetectedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_SERVER_CERTIFICATE_ERROR_ACTION,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ServerCertificateErrorDetectedEventArgs_Impl::Action2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn GetDeferral<
                Identity: ICoreWebView2ServerCertificateErrorDetectedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                deferral: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ServerCertificateErrorDetectedEventArgs_Impl::GetDeferral(
                        this,
                        core::mem::transmute_copy(&deferral),
                    )
                    .into()
                }
            }
            Self {
                ErrorStatus: ErrorStatus::<Identity>,
                RequestUri: RequestUri::<Identity>,
                ServerCertificate: ServerCertificate::<Identity>,
                Action: Action::<Identity>,
                Action2: Action2::<Identity>,
                GetDeferral: GetDeferral::<Identity>,
            }
        }
    }
    struct ICoreWebView2ServerCertificateErrorDetectedEventArgs_ImplVtbl<
        T: ICoreWebView2ServerCertificateErrorDetectedEventArgs_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2ServerCertificateErrorDetectedEventArgs_Impl>
        ICoreWebView2ServerCertificateErrorDetectedEventArgs_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2ServerCertificateErrorDetectedEventArgs_Vtbl =
            ICoreWebView2ServerCertificateErrorDetectedEventArgs_Vtbl::new::<T>();
    }
    impl ICoreWebView2ServerCertificateErrorDetectedEventArgs {
        pub fn new<'a, T: ICoreWebView2ServerCertificateErrorDetectedEventArgs_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ServerCertificateErrorDetectedEventArgs_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ServerCertificateErrorDetectedEventHandler,
        ICoreWebView2ServerCertificateErrorDetectedEventHandler_Vtbl
    );
    impl ICoreWebView2ServerCertificateErrorDetectedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
            P1: windows_core::Param<ICoreWebView2ServerCertificateErrorDetectedEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ServerCertificateErrorDetectedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ServerCertificateErrorDetectedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2>,
            args: windows_core::Ref<'_, ICoreWebView2ServerCertificateErrorDetectedEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ServerCertificateErrorDetectedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2ServerCertificateErrorDetectedEventHandler_Impl>(
        ) -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2ServerCertificateErrorDetectedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ServerCertificateErrorDetectedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2ServerCertificateErrorDetectedEventHandler_ImplVtbl<
        T: ICoreWebView2ServerCertificateErrorDetectedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2ServerCertificateErrorDetectedEventHandler_Impl>
        ICoreWebView2ServerCertificateErrorDetectedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2ServerCertificateErrorDetectedEventHandler_Vtbl =
            ICoreWebView2ServerCertificateErrorDetectedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2ServerCertificateErrorDetectedEventHandler {
        pub fn new<'a, T: ICoreWebView2ServerCertificateErrorDetectedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable:
                    &ICoreWebView2ServerCertificateErrorDetectedEventHandler_ImplVtbl::<T>::VTABLE
                        as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2SetPermissionStateCompletedHandler,
        ICoreWebView2SetPermissionStateCompletedHandler_Vtbl
    );
    impl ICoreWebView2SetPermissionStateCompletedHandler {
        pub unsafe fn Invoke(&self, errorcode: windows_core::HRESULT) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    errorcode,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2SetPermissionStateCompletedHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::HRESULT,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2SetPermissionStateCompletedHandler_Impl {
        fn Invoke(&self, errorcode: windows_core::HRESULT) -> windows_core::Result<()>;
    }
    impl ICoreWebView2SetPermissionStateCompletedHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2SetPermissionStateCompletedHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2SetPermissionStateCompletedHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                errorcode: windows_core::HRESULT,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2SetPermissionStateCompletedHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&errorcode),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2SetPermissionStateCompletedHandler_ImplVtbl<
        T: ICoreWebView2SetPermissionStateCompletedHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2SetPermissionStateCompletedHandler_Impl>
        ICoreWebView2SetPermissionStateCompletedHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2SetPermissionStateCompletedHandler_Vtbl =
            ICoreWebView2SetPermissionStateCompletedHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2SetPermissionStateCompletedHandler {
        pub fn new<'a, T: ICoreWebView2SetPermissionStateCompletedHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2SetPermissionStateCompletedHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Settings, ICoreWebView2Settings_Vtbl);
    impl ICoreWebView2Settings {
        pub unsafe fn IsScriptEnabled(&self, isscriptenabled: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsScriptEnabled)(
                    windows_core::Interface::as_raw(self),
                    isscriptenabled.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsScriptEnabled2(&self, isscriptenabled: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsScriptEnabled2)(
                    windows_core::Interface::as_raw(self),
                    isscriptenabled.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsWebMessageEnabled(
            &self,
            iswebmessageenabled: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsWebMessageEnabled)(
                    windows_core::Interface::as_raw(self),
                    iswebmessageenabled.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsWebMessageEnabled2(
            &self,
            iswebmessageenabled: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsWebMessageEnabled2)(
                    windows_core::Interface::as_raw(self),
                    iswebmessageenabled.into(),
                )
                .ok()
            }
        }
        pub unsafe fn AreDefaultScriptDialogsEnabled(
            &self,
            aredefaultscriptdialogsenabled: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).AreDefaultScriptDialogsEnabled)(
                    windows_core::Interface::as_raw(self),
                    aredefaultscriptdialogsenabled.into(),
                )
                .ok()
            }
        }
        pub unsafe fn AreDefaultScriptDialogsEnabled2(
            &self,
            aredefaultscriptdialogsenabled: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).AreDefaultScriptDialogsEnabled2)(
                    windows_core::Interface::as_raw(self),
                    aredefaultscriptdialogsenabled.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsStatusBarEnabled(
            &self,
            isstatusbarenabled: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsStatusBarEnabled)(
                    windows_core::Interface::as_raw(self),
                    isstatusbarenabled.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsStatusBarEnabled2(
            &self,
            isstatusbarenabled: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsStatusBarEnabled2)(
                    windows_core::Interface::as_raw(self),
                    isstatusbarenabled.into(),
                )
                .ok()
            }
        }
        pub unsafe fn AreDevToolsEnabled(
            &self,
            aredevtoolsenabled: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).AreDevToolsEnabled)(
                    windows_core::Interface::as_raw(self),
                    aredevtoolsenabled.into(),
                )
                .ok()
            }
        }
        pub unsafe fn AreDevToolsEnabled2(
            &self,
            aredevtoolsenabled: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).AreDevToolsEnabled2)(
                    windows_core::Interface::as_raw(self),
                    aredevtoolsenabled.into(),
                )
                .ok()
            }
        }
        pub unsafe fn AreDefaultContextMenusEnabled(
            &self,
            enabled: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).AreDefaultContextMenusEnabled)(
                    windows_core::Interface::as_raw(self),
                    enabled.into(),
                )
                .ok()
            }
        }
        pub unsafe fn AreDefaultContextMenusEnabled2(
            &self,
            enabled: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).AreDefaultContextMenusEnabled2)(
                    windows_core::Interface::as_raw(self),
                    enabled.into(),
                )
                .ok()
            }
        }
        pub unsafe fn AreHostObjectsAllowed(&self, allowed: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).AreHostObjectsAllowed)(
                    windows_core::Interface::as_raw(self),
                    allowed.into(),
                )
                .ok()
            }
        }
        pub unsafe fn AreHostObjectsAllowed2(&self, allowed: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).AreHostObjectsAllowed2)(
                    windows_core::Interface::as_raw(self),
                    allowed.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsZoomControlEnabled(&self, enabled: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsZoomControlEnabled)(
                    windows_core::Interface::as_raw(self),
                    enabled.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsZoomControlEnabled2(&self, enabled: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsZoomControlEnabled2)(
                    windows_core::Interface::as_raw(self),
                    enabled.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsBuiltInErrorPageEnabled(&self, enabled: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsBuiltInErrorPageEnabled)(
                    windows_core::Interface::as_raw(self),
                    enabled.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsBuiltInErrorPageEnabled2(&self, enabled: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsBuiltInErrorPageEnabled2)(
                    windows_core::Interface::as_raw(self),
                    enabled.into(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Settings_Vtbl {
        pub IsScriptEnabled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub IsScriptEnabled2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub IsWebMessageEnabled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub IsWebMessageEnabled2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub AreDefaultScriptDialogsEnabled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        )
            -> windows_core::HRESULT,
        pub AreDefaultScriptDialogsEnabled2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        )
            -> windows_core::HRESULT,
        pub IsStatusBarEnabled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub IsStatusBarEnabled2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub AreDevToolsEnabled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub AreDevToolsEnabled2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub AreDefaultContextMenusEnabled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        )
            -> windows_core::HRESULT,
        pub AreDefaultContextMenusEnabled2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        )
            -> windows_core::HRESULT,
        pub AreHostObjectsAllowed: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub AreHostObjectsAllowed2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub IsZoomControlEnabled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub IsZoomControlEnabled2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub IsBuiltInErrorPageEnabled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub IsBuiltInErrorPageEnabled2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Settings_Impl {
        fn IsScriptEnabled(&self, isscriptenabled: windows_core::BOOL) -> windows_core::Result<()>;
        fn IsScriptEnabled2(&self, isscriptenabled: windows_core::BOOL)
            -> windows_core::Result<()>;
        fn IsWebMessageEnabled(
            &self,
            iswebmessageenabled: windows_core::BOOL,
        ) -> windows_core::Result<()>;
        fn IsWebMessageEnabled2(
            &self,
            iswebmessageenabled: windows_core::BOOL,
        ) -> windows_core::Result<()>;
        fn AreDefaultScriptDialogsEnabled(
            &self,
            aredefaultscriptdialogsenabled: windows_core::BOOL,
        ) -> windows_core::Result<()>;
        fn AreDefaultScriptDialogsEnabled2(
            &self,
            aredefaultscriptdialogsenabled: windows_core::BOOL,
        ) -> windows_core::Result<()>;
        fn IsStatusBarEnabled(
            &self,
            isstatusbarenabled: windows_core::BOOL,
        ) -> windows_core::Result<()>;
        fn IsStatusBarEnabled2(
            &self,
            isstatusbarenabled: windows_core::BOOL,
        ) -> windows_core::Result<()>;
        fn AreDevToolsEnabled(
            &self,
            aredevtoolsenabled: windows_core::BOOL,
        ) -> windows_core::Result<()>;
        fn AreDevToolsEnabled2(
            &self,
            aredevtoolsenabled: windows_core::BOOL,
        ) -> windows_core::Result<()>;
        fn AreDefaultContextMenusEnabled(
            &self,
            enabled: windows_core::BOOL,
        ) -> windows_core::Result<()>;
        fn AreDefaultContextMenusEnabled2(
            &self,
            enabled: windows_core::BOOL,
        ) -> windows_core::Result<()>;
        fn AreHostObjectsAllowed(&self, allowed: windows_core::BOOL) -> windows_core::Result<()>;
        fn AreHostObjectsAllowed2(&self, allowed: windows_core::BOOL) -> windows_core::Result<()>;
        fn IsZoomControlEnabled(&self, enabled: windows_core::BOOL) -> windows_core::Result<()>;
        fn IsZoomControlEnabled2(&self, enabled: windows_core::BOOL) -> windows_core::Result<()>;
        fn IsBuiltInErrorPageEnabled(
            &self,
            enabled: windows_core::BOOL,
        ) -> windows_core::Result<()>;
        fn IsBuiltInErrorPageEnabled2(
            &self,
            enabled: windows_core::BOOL,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Settings_Vtbl {
        pub const fn new<Identity: ICoreWebView2Settings_Impl>() -> Self {
            unsafe extern "system" fn IsScriptEnabled<Identity: ICoreWebView2Settings_Impl>(
                this: *mut core::ffi::c_void,
                isscriptenabled: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings_Impl::IsScriptEnabled(
                        this,
                        core::mem::transmute_copy(&isscriptenabled),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsScriptEnabled2<Identity: ICoreWebView2Settings_Impl>(
                this: *mut core::ffi::c_void,
                isscriptenabled: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings_Impl::IsScriptEnabled2(
                        this,
                        core::mem::transmute_copy(&isscriptenabled),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsWebMessageEnabled<Identity: ICoreWebView2Settings_Impl>(
                this: *mut core::ffi::c_void,
                iswebmessageenabled: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings_Impl::IsWebMessageEnabled(
                        this,
                        core::mem::transmute_copy(&iswebmessageenabled),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsWebMessageEnabled2<Identity: ICoreWebView2Settings_Impl>(
                this: *mut core::ffi::c_void,
                iswebmessageenabled: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings_Impl::IsWebMessageEnabled2(
                        this,
                        core::mem::transmute_copy(&iswebmessageenabled),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn AreDefaultScriptDialogsEnabled<
                Identity: ICoreWebView2Settings_Impl,
            >(
                this: *mut core::ffi::c_void,
                aredefaultscriptdialogsenabled: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings_Impl::AreDefaultScriptDialogsEnabled(
                        this,
                        core::mem::transmute_copy(&aredefaultscriptdialogsenabled),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn AreDefaultScriptDialogsEnabled2<
                Identity: ICoreWebView2Settings_Impl,
            >(
                this: *mut core::ffi::c_void,
                aredefaultscriptdialogsenabled: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings_Impl::AreDefaultScriptDialogsEnabled2(
                        this,
                        core::mem::transmute_copy(&aredefaultscriptdialogsenabled),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsStatusBarEnabled<Identity: ICoreWebView2Settings_Impl>(
                this: *mut core::ffi::c_void,
                isstatusbarenabled: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings_Impl::IsStatusBarEnabled(
                        this,
                        core::mem::transmute_copy(&isstatusbarenabled),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsStatusBarEnabled2<Identity: ICoreWebView2Settings_Impl>(
                this: *mut core::ffi::c_void,
                isstatusbarenabled: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings_Impl::IsStatusBarEnabled2(
                        this,
                        core::mem::transmute_copy(&isstatusbarenabled),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn AreDevToolsEnabled<Identity: ICoreWebView2Settings_Impl>(
                this: *mut core::ffi::c_void,
                aredevtoolsenabled: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings_Impl::AreDevToolsEnabled(
                        this,
                        core::mem::transmute_copy(&aredevtoolsenabled),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn AreDevToolsEnabled2<Identity: ICoreWebView2Settings_Impl>(
                this: *mut core::ffi::c_void,
                aredevtoolsenabled: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings_Impl::AreDevToolsEnabled2(
                        this,
                        core::mem::transmute_copy(&aredevtoolsenabled),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn AreDefaultContextMenusEnabled<
                Identity: ICoreWebView2Settings_Impl,
            >(
                this: *mut core::ffi::c_void,
                enabled: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings_Impl::AreDefaultContextMenusEnabled(
                        this,
                        core::mem::transmute_copy(&enabled),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn AreDefaultContextMenusEnabled2<
                Identity: ICoreWebView2Settings_Impl,
            >(
                this: *mut core::ffi::c_void,
                enabled: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings_Impl::AreDefaultContextMenusEnabled2(
                        this,
                        core::mem::transmute_copy(&enabled),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn AreHostObjectsAllowed<
                Identity: ICoreWebView2Settings_Impl,
            >(
                this: *mut core::ffi::c_void,
                allowed: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings_Impl::AreHostObjectsAllowed(
                        this,
                        core::mem::transmute_copy(&allowed),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn AreHostObjectsAllowed2<
                Identity: ICoreWebView2Settings_Impl,
            >(
                this: *mut core::ffi::c_void,
                allowed: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings_Impl::AreHostObjectsAllowed2(
                        this,
                        core::mem::transmute_copy(&allowed),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsZoomControlEnabled<Identity: ICoreWebView2Settings_Impl>(
                this: *mut core::ffi::c_void,
                enabled: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings_Impl::IsZoomControlEnabled(
                        this,
                        core::mem::transmute_copy(&enabled),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsZoomControlEnabled2<
                Identity: ICoreWebView2Settings_Impl,
            >(
                this: *mut core::ffi::c_void,
                enabled: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings_Impl::IsZoomControlEnabled2(
                        this,
                        core::mem::transmute_copy(&enabled),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsBuiltInErrorPageEnabled<
                Identity: ICoreWebView2Settings_Impl,
            >(
                this: *mut core::ffi::c_void,
                enabled: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings_Impl::IsBuiltInErrorPageEnabled(
                        this,
                        core::mem::transmute_copy(&enabled),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsBuiltInErrorPageEnabled2<
                Identity: ICoreWebView2Settings_Impl,
            >(
                this: *mut core::ffi::c_void,
                enabled: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings_Impl::IsBuiltInErrorPageEnabled2(
                        this,
                        core::mem::transmute_copy(&enabled),
                    )
                    .into()
                }
            }
            Self {
                IsScriptEnabled: IsScriptEnabled::<Identity>,
                IsScriptEnabled2: IsScriptEnabled2::<Identity>,
                IsWebMessageEnabled: IsWebMessageEnabled::<Identity>,
                IsWebMessageEnabled2: IsWebMessageEnabled2::<Identity>,
                AreDefaultScriptDialogsEnabled: AreDefaultScriptDialogsEnabled::<Identity>,
                AreDefaultScriptDialogsEnabled2: AreDefaultScriptDialogsEnabled2::<Identity>,
                IsStatusBarEnabled: IsStatusBarEnabled::<Identity>,
                IsStatusBarEnabled2: IsStatusBarEnabled2::<Identity>,
                AreDevToolsEnabled: AreDevToolsEnabled::<Identity>,
                AreDevToolsEnabled2: AreDevToolsEnabled2::<Identity>,
                AreDefaultContextMenusEnabled: AreDefaultContextMenusEnabled::<Identity>,
                AreDefaultContextMenusEnabled2: AreDefaultContextMenusEnabled2::<Identity>,
                AreHostObjectsAllowed: AreHostObjectsAllowed::<Identity>,
                AreHostObjectsAllowed2: AreHostObjectsAllowed2::<Identity>,
                IsZoomControlEnabled: IsZoomControlEnabled::<Identity>,
                IsZoomControlEnabled2: IsZoomControlEnabled2::<Identity>,
                IsBuiltInErrorPageEnabled: IsBuiltInErrorPageEnabled::<Identity>,
                IsBuiltInErrorPageEnabled2: IsBuiltInErrorPageEnabled2::<Identity>,
            }
        }
    }
    struct ICoreWebView2Settings_ImplVtbl<T: ICoreWebView2Settings_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Settings_Impl> ICoreWebView2Settings_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Settings_Vtbl = ICoreWebView2Settings_Vtbl::new::<T>();
    }
    impl ICoreWebView2Settings {
        pub fn new<'a, T: ICoreWebView2Settings_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Settings_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Settings2, ICoreWebView2Settings2_Vtbl);
    impl ICoreWebView2Settings2 {
        pub unsafe fn UserAgent<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).UserAgent)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn UserAgent2<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).UserAgent2)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Settings2_Vtbl {
        pub UserAgent: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub UserAgent2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Settings2_Impl {
        fn UserAgent(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn UserAgent2(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Settings2_Vtbl {
        pub const fn new<Identity: ICoreWebView2Settings2_Impl>() -> Self {
            unsafe extern "system" fn UserAgent<Identity: ICoreWebView2Settings2_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings2_Impl::UserAgent(this, core::mem::transmute(&value))
                        .into()
                }
            }
            unsafe extern "system" fn UserAgent2<Identity: ICoreWebView2Settings2_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings2_Impl::UserAgent2(this, core::mem::transmute(&value))
                        .into()
                }
            }
            Self {
                UserAgent: UserAgent::<Identity>,
                UserAgent2: UserAgent2::<Identity>,
            }
        }
    }
    struct ICoreWebView2Settings2_ImplVtbl<T: ICoreWebView2Settings2_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Settings2_Impl> ICoreWebView2Settings2_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Settings2_Vtbl = ICoreWebView2Settings2_Vtbl::new::<T>();
    }
    impl ICoreWebView2Settings2 {
        pub fn new<'a, T: ICoreWebView2Settings2_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Settings2_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Settings3, ICoreWebView2Settings3_Vtbl);
    impl ICoreWebView2Settings3 {
        pub unsafe fn AreBrowserAcceleratorKeysEnabled(
            &self,
            value: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).AreBrowserAcceleratorKeysEnabled)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn AreBrowserAcceleratorKeysEnabled2(
            &self,
            value: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).AreBrowserAcceleratorKeysEnabled2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Settings3_Vtbl {
        pub AreBrowserAcceleratorKeysEnabled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        )
            -> windows_core::HRESULT,
        pub AreBrowserAcceleratorKeysEnabled2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        )
            -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Settings3_Impl {
        fn AreBrowserAcceleratorKeysEnabled(
            &self,
            value: windows_core::BOOL,
        ) -> windows_core::Result<()>;
        fn AreBrowserAcceleratorKeysEnabled2(
            &self,
            value: windows_core::BOOL,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Settings3_Vtbl {
        pub const fn new<Identity: ICoreWebView2Settings3_Impl>() -> Self {
            unsafe extern "system" fn AreBrowserAcceleratorKeysEnabled<
                Identity: ICoreWebView2Settings3_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings3_Impl::AreBrowserAcceleratorKeysEnabled(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn AreBrowserAcceleratorKeysEnabled2<
                Identity: ICoreWebView2Settings3_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings3_Impl::AreBrowserAcceleratorKeysEnabled2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                AreBrowserAcceleratorKeysEnabled: AreBrowserAcceleratorKeysEnabled::<Identity>,
                AreBrowserAcceleratorKeysEnabled2: AreBrowserAcceleratorKeysEnabled2::<Identity>,
            }
        }
    }
    struct ICoreWebView2Settings3_ImplVtbl<T: ICoreWebView2Settings3_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Settings3_Impl> ICoreWebView2Settings3_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Settings3_Vtbl = ICoreWebView2Settings3_Vtbl::new::<T>();
    }
    impl ICoreWebView2Settings3 {
        pub fn new<'a, T: ICoreWebView2Settings3_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Settings3_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Settings4, ICoreWebView2Settings4_Vtbl);
    impl ICoreWebView2Settings4 {
        pub unsafe fn IsPasswordAutosaveEnabled(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsPasswordAutosaveEnabled)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsPasswordAutosaveEnabled2(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsPasswordAutosaveEnabled2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsGeneralAutofillEnabled(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsGeneralAutofillEnabled)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsGeneralAutofillEnabled2(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsGeneralAutofillEnabled2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Settings4_Vtbl {
        pub IsPasswordAutosaveEnabled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub IsPasswordAutosaveEnabled2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub IsGeneralAutofillEnabled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub IsGeneralAutofillEnabled2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Settings4_Impl {
        fn IsPasswordAutosaveEnabled(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn IsPasswordAutosaveEnabled2(&self, value: windows_core::BOOL)
            -> windows_core::Result<()>;
        fn IsGeneralAutofillEnabled(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn IsGeneralAutofillEnabled2(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Settings4_Vtbl {
        pub const fn new<Identity: ICoreWebView2Settings4_Impl>() -> Self {
            unsafe extern "system" fn IsPasswordAutosaveEnabled<
                Identity: ICoreWebView2Settings4_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings4_Impl::IsPasswordAutosaveEnabled(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsPasswordAutosaveEnabled2<
                Identity: ICoreWebView2Settings4_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings4_Impl::IsPasswordAutosaveEnabled2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsGeneralAutofillEnabled<
                Identity: ICoreWebView2Settings4_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings4_Impl::IsGeneralAutofillEnabled(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsGeneralAutofillEnabled2<
                Identity: ICoreWebView2Settings4_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings4_Impl::IsGeneralAutofillEnabled2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                IsPasswordAutosaveEnabled: IsPasswordAutosaveEnabled::<Identity>,
                IsPasswordAutosaveEnabled2: IsPasswordAutosaveEnabled2::<Identity>,
                IsGeneralAutofillEnabled: IsGeneralAutofillEnabled::<Identity>,
                IsGeneralAutofillEnabled2: IsGeneralAutofillEnabled2::<Identity>,
            }
        }
    }
    struct ICoreWebView2Settings4_ImplVtbl<T: ICoreWebView2Settings4_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Settings4_Impl> ICoreWebView2Settings4_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Settings4_Vtbl = ICoreWebView2Settings4_Vtbl::new::<T>();
    }
    impl ICoreWebView2Settings4 {
        pub fn new<'a, T: ICoreWebView2Settings4_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Settings4_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Settings5, ICoreWebView2Settings5_Vtbl);
    impl ICoreWebView2Settings5 {
        pub unsafe fn IsPinchZoomEnabled(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsPinchZoomEnabled)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsPinchZoomEnabled2(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsPinchZoomEnabled2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Settings5_Vtbl {
        pub IsPinchZoomEnabled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub IsPinchZoomEnabled2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Settings5_Impl {
        fn IsPinchZoomEnabled(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn IsPinchZoomEnabled2(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Settings5_Vtbl {
        pub const fn new<Identity: ICoreWebView2Settings5_Impl>() -> Self {
            unsafe extern "system" fn IsPinchZoomEnabled<Identity: ICoreWebView2Settings5_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings5_Impl::IsPinchZoomEnabled(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsPinchZoomEnabled2<Identity: ICoreWebView2Settings5_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings5_Impl::IsPinchZoomEnabled2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                IsPinchZoomEnabled: IsPinchZoomEnabled::<Identity>,
                IsPinchZoomEnabled2: IsPinchZoomEnabled2::<Identity>,
            }
        }
    }
    struct ICoreWebView2Settings5_ImplVtbl<T: ICoreWebView2Settings5_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Settings5_Impl> ICoreWebView2Settings5_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Settings5_Vtbl = ICoreWebView2Settings5_Vtbl::new::<T>();
    }
    impl ICoreWebView2Settings5 {
        pub fn new<'a, T: ICoreWebView2Settings5_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Settings5_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Settings6, ICoreWebView2Settings6_Vtbl);
    impl ICoreWebView2Settings6 {
        pub unsafe fn IsSwipeNavigationEnabled(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsSwipeNavigationEnabled)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsSwipeNavigationEnabled2(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsSwipeNavigationEnabled2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Settings6_Vtbl {
        pub IsSwipeNavigationEnabled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub IsSwipeNavigationEnabled2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Settings6_Impl {
        fn IsSwipeNavigationEnabled(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn IsSwipeNavigationEnabled2(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Settings6_Vtbl {
        pub const fn new<Identity: ICoreWebView2Settings6_Impl>() -> Self {
            unsafe extern "system" fn IsSwipeNavigationEnabled<
                Identity: ICoreWebView2Settings6_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings6_Impl::IsSwipeNavigationEnabled(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsSwipeNavigationEnabled2<
                Identity: ICoreWebView2Settings6_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings6_Impl::IsSwipeNavigationEnabled2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                IsSwipeNavigationEnabled: IsSwipeNavigationEnabled::<Identity>,
                IsSwipeNavigationEnabled2: IsSwipeNavigationEnabled2::<Identity>,
            }
        }
    }
    struct ICoreWebView2Settings6_ImplVtbl<T: ICoreWebView2Settings6_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Settings6_Impl> ICoreWebView2Settings6_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Settings6_Vtbl = ICoreWebView2Settings6_Vtbl::new::<T>();
    }
    impl ICoreWebView2Settings6 {
        pub fn new<'a, T: ICoreWebView2Settings6_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Settings6_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Settings7, ICoreWebView2Settings7_Vtbl);
    impl ICoreWebView2Settings7 {
        pub unsafe fn HiddenPdfToolbarItems(
            &self,
            value: COREWEBVIEW2_PDF_TOOLBAR_ITEMS,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).HiddenPdfToolbarItems)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn HiddenPdfToolbarItems2(
            &self,
            value: COREWEBVIEW2_PDF_TOOLBAR_ITEMS,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).HiddenPdfToolbarItems2)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Settings7_Vtbl {
        pub HiddenPdfToolbarItems: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_PDF_TOOLBAR_ITEMS,
        ) -> windows_core::HRESULT,
        pub HiddenPdfToolbarItems2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_PDF_TOOLBAR_ITEMS,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Settings7_Impl {
        fn HiddenPdfToolbarItems(
            &self,
            value: COREWEBVIEW2_PDF_TOOLBAR_ITEMS,
        ) -> windows_core::Result<()>;
        fn HiddenPdfToolbarItems2(
            &self,
            value: COREWEBVIEW2_PDF_TOOLBAR_ITEMS,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Settings7_Vtbl {
        pub const fn new<Identity: ICoreWebView2Settings7_Impl>() -> Self {
            unsafe extern "system" fn HiddenPdfToolbarItems<
                Identity: ICoreWebView2Settings7_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_PDF_TOOLBAR_ITEMS,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings7_Impl::HiddenPdfToolbarItems(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn HiddenPdfToolbarItems2<
                Identity: ICoreWebView2Settings7_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_PDF_TOOLBAR_ITEMS,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings7_Impl::HiddenPdfToolbarItems2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                HiddenPdfToolbarItems: HiddenPdfToolbarItems::<Identity>,
                HiddenPdfToolbarItems2: HiddenPdfToolbarItems2::<Identity>,
            }
        }
    }
    struct ICoreWebView2Settings7_ImplVtbl<T: ICoreWebView2Settings7_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Settings7_Impl> ICoreWebView2Settings7_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Settings7_Vtbl = ICoreWebView2Settings7_Vtbl::new::<T>();
    }
    impl ICoreWebView2Settings7 {
        pub fn new<'a, T: ICoreWebView2Settings7_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Settings7_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Settings8, ICoreWebView2Settings8_Vtbl);
    impl ICoreWebView2Settings8 {
        pub unsafe fn IsReputationCheckingRequired(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsReputationCheckingRequired)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsReputationCheckingRequired2(
            &self,
            value: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsReputationCheckingRequired2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Settings8_Vtbl {
        pub IsReputationCheckingRequired: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        )
            -> windows_core::HRESULT,
        pub IsReputationCheckingRequired2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        )
            -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Settings8_Impl {
        fn IsReputationCheckingRequired(
            &self,
            value: windows_core::BOOL,
        ) -> windows_core::Result<()>;
        fn IsReputationCheckingRequired2(
            &self,
            value: windows_core::BOOL,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Settings8_Vtbl {
        pub const fn new<Identity: ICoreWebView2Settings8_Impl>() -> Self {
            unsafe extern "system" fn IsReputationCheckingRequired<
                Identity: ICoreWebView2Settings8_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings8_Impl::IsReputationCheckingRequired(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsReputationCheckingRequired2<
                Identity: ICoreWebView2Settings8_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings8_Impl::IsReputationCheckingRequired2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                IsReputationCheckingRequired: IsReputationCheckingRequired::<Identity>,
                IsReputationCheckingRequired2: IsReputationCheckingRequired2::<Identity>,
            }
        }
    }
    struct ICoreWebView2Settings8_ImplVtbl<T: ICoreWebView2Settings8_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Settings8_Impl> ICoreWebView2Settings8_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Settings8_Vtbl = ICoreWebView2Settings8_Vtbl::new::<T>();
    }
    impl ICoreWebView2Settings8 {
        pub fn new<'a, T: ICoreWebView2Settings8_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Settings8_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2Settings9, ICoreWebView2Settings9_Vtbl);
    impl ICoreWebView2Settings9 {
        pub unsafe fn IsNonClientRegionSupportEnabled(
            &self,
            value: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsNonClientRegionSupportEnabled)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsNonClientRegionSupportEnabled2(
            &self,
            value: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsNonClientRegionSupportEnabled2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2Settings9_Vtbl {
        pub IsNonClientRegionSupportEnabled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        )
            -> windows_core::HRESULT,
        pub IsNonClientRegionSupportEnabled2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        )
            -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2Settings9_Impl {
        fn IsNonClientRegionSupportEnabled(
            &self,
            value: windows_core::BOOL,
        ) -> windows_core::Result<()>;
        fn IsNonClientRegionSupportEnabled2(
            &self,
            value: windows_core::BOOL,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2Settings9_Vtbl {
        pub const fn new<Identity: ICoreWebView2Settings9_Impl>() -> Self {
            unsafe extern "system" fn IsNonClientRegionSupportEnabled<
                Identity: ICoreWebView2Settings9_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings9_Impl::IsNonClientRegionSupportEnabled(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsNonClientRegionSupportEnabled2<
                Identity: ICoreWebView2Settings9_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2Settings9_Impl::IsNonClientRegionSupportEnabled2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                IsNonClientRegionSupportEnabled: IsNonClientRegionSupportEnabled::<Identity>,
                IsNonClientRegionSupportEnabled2: IsNonClientRegionSupportEnabled2::<Identity>,
            }
        }
    }
    struct ICoreWebView2Settings9_ImplVtbl<T: ICoreWebView2Settings9_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2Settings9_Impl> ICoreWebView2Settings9_ImplVtbl<T> {
        const VTABLE: ICoreWebView2Settings9_Vtbl = ICoreWebView2Settings9_Vtbl::new::<T>();
    }
    impl ICoreWebView2Settings9 {
        pub fn new<'a, T: ICoreWebView2Settings9_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2Settings9_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2SharedBuffer, ICoreWebView2SharedBuffer_Vtbl);
    impl ICoreWebView2SharedBuffer {
        pub unsafe fn Size(&self, value: u64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Size)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn Buffer(&self, value: u8) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Buffer)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn Close(&self) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Close)(windows_core::Interface::as_raw(self))
                    .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2SharedBuffer_Vtbl {
        pub Size: unsafe extern "system" fn(*mut core::ffi::c_void, u64) -> windows_core::HRESULT,
        pub Buffer: unsafe extern "system" fn(*mut core::ffi::c_void, u8) -> windows_core::HRESULT,
        OpenStream: usize,
        FileMappingHandle: usize,
        pub Close: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2SharedBuffer_Impl {
        fn Size(&self, value: u64) -> windows_core::Result<()>;
        fn Buffer(&self, value: u8) -> windows_core::Result<()>;
        fn Close(&self) -> windows_core::Result<()>;
    }
    impl ICoreWebView2SharedBuffer_Vtbl {
        pub const fn new<Identity: ICoreWebView2SharedBuffer_Impl>() -> Self {
            unsafe extern "system" fn Size<Identity: ICoreWebView2SharedBuffer_Impl>(
                this: *mut core::ffi::c_void,
                value: u64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2SharedBuffer_Impl::Size(this, core::mem::transmute_copy(&value))
                        .into()
                }
            }
            unsafe extern "system" fn Buffer<Identity: ICoreWebView2SharedBuffer_Impl>(
                this: *mut core::ffi::c_void,
                value: u8,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2SharedBuffer_Impl::Buffer(this, core::mem::transmute_copy(&value))
                        .into()
                }
            }
            unsafe extern "system" fn Close<Identity: ICoreWebView2SharedBuffer_Impl>(
                this: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2SharedBuffer_Impl::Close(this).into()
                }
            }
            Self {
                Size: Size::<Identity>,
                Buffer: Buffer::<Identity>,
                OpenStream: 0,
                FileMappingHandle: 0,
                Close: Close::<Identity>,
            }
        }
    }
    struct ICoreWebView2SharedBuffer_ImplVtbl<T: ICoreWebView2SharedBuffer_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2SharedBuffer_Impl> ICoreWebView2SharedBuffer_ImplVtbl<T> {
        const VTABLE: ICoreWebView2SharedBuffer_Vtbl = ICoreWebView2SharedBuffer_Vtbl::new::<T>();
    }
    impl ICoreWebView2SharedBuffer {
        pub fn new<'a, T: ICoreWebView2SharedBuffer_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2SharedBuffer_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ShowSaveAsUICompletedHandler,
        ICoreWebView2ShowSaveAsUICompletedHandler_Vtbl
    );
    impl ICoreWebView2ShowSaveAsUICompletedHandler {
        pub unsafe fn Invoke(
            &self,
            errorcode: windows_core::HRESULT,
            result: COREWEBVIEW2_SAVE_AS_UI_RESULT,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    errorcode,
                    result,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ShowSaveAsUICompletedHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::HRESULT,
            COREWEBVIEW2_SAVE_AS_UI_RESULT,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ShowSaveAsUICompletedHandler_Impl {
        fn Invoke(
            &self,
            errorcode: windows_core::HRESULT,
            result: COREWEBVIEW2_SAVE_AS_UI_RESULT,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ShowSaveAsUICompletedHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2ShowSaveAsUICompletedHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2ShowSaveAsUICompletedHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                errorcode: windows_core::HRESULT,
                result: COREWEBVIEW2_SAVE_AS_UI_RESULT,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ShowSaveAsUICompletedHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&errorcode),
                        core::mem::transmute_copy(&result),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2ShowSaveAsUICompletedHandler_ImplVtbl<
        T: ICoreWebView2ShowSaveAsUICompletedHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2ShowSaveAsUICompletedHandler_Impl>
        ICoreWebView2ShowSaveAsUICompletedHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2ShowSaveAsUICompletedHandler_Vtbl =
            ICoreWebView2ShowSaveAsUICompletedHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2ShowSaveAsUICompletedHandler {
        pub fn new<'a, T: ICoreWebView2ShowSaveAsUICompletedHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ShowSaveAsUICompletedHandler_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2SourceChangedEventArgs,
        ICoreWebView2SourceChangedEventArgs_Vtbl
    );
    impl ICoreWebView2SourceChangedEventArgs {
        pub unsafe fn IsNewDocument(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsNewDocument)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2SourceChangedEventArgs_Vtbl {
        pub IsNewDocument: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2SourceChangedEventArgs_Impl {
        fn IsNewDocument(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
    }
    impl ICoreWebView2SourceChangedEventArgs_Vtbl {
        pub const fn new<Identity: ICoreWebView2SourceChangedEventArgs_Impl>() -> Self {
            unsafe extern "system" fn IsNewDocument<
                Identity: ICoreWebView2SourceChangedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2SourceChangedEventArgs_Impl::IsNewDocument(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                IsNewDocument: IsNewDocument::<Identity>,
            }
        }
    }
    struct ICoreWebView2SourceChangedEventArgs_ImplVtbl<T: ICoreWebView2SourceChangedEventArgs_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2SourceChangedEventArgs_Impl> ICoreWebView2SourceChangedEventArgs_ImplVtbl<T> {
        const VTABLE: ICoreWebView2SourceChangedEventArgs_Vtbl =
            ICoreWebView2SourceChangedEventArgs_Vtbl::new::<T>();
    }
    impl ICoreWebView2SourceChangedEventArgs {
        pub fn new<'a, T: ICoreWebView2SourceChangedEventArgs_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2SourceChangedEventArgs_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2SourceChangedEventHandler,
        ICoreWebView2SourceChangedEventHandler_Vtbl
    );
    impl ICoreWebView2SourceChangedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
            P1: windows_core::Param<ICoreWebView2SourceChangedEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2SourceChangedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2SourceChangedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2>,
            args: windows_core::Ref<'_, ICoreWebView2SourceChangedEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2SourceChangedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2SourceChangedEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2SourceChangedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2SourceChangedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2SourceChangedEventHandler_ImplVtbl<
        T: ICoreWebView2SourceChangedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2SourceChangedEventHandler_Impl>
        ICoreWebView2SourceChangedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2SourceChangedEventHandler_Vtbl =
            ICoreWebView2SourceChangedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2SourceChangedEventHandler {
        pub fn new<'a, T: ICoreWebView2SourceChangedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2SourceChangedEventHandler_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2StateChangedEventHandler,
        ICoreWebView2StateChangedEventHandler_Vtbl
    );
    impl ICoreWebView2StateChangedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2DownloadOperation>,
            P1: windows_core::Param<windows_core::IUnknown>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2StateChangedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2StateChangedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2DownloadOperation>,
            args: windows_core::Ref<'_, windows_core::IUnknown>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2StateChangedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2StateChangedEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2StateChangedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2StateChangedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2StateChangedEventHandler_ImplVtbl<T: ICoreWebView2StateChangedEventHandler_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2StateChangedEventHandler_Impl>
        ICoreWebView2StateChangedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2StateChangedEventHandler_Vtbl =
            ICoreWebView2StateChangedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2StateChangedEventHandler {
        pub fn new<'a, T: ICoreWebView2StateChangedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2StateChangedEventHandler_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2StatusBarTextChangedEventHandler,
        ICoreWebView2StatusBarTextChangedEventHandler_Vtbl
    );
    impl ICoreWebView2StatusBarTextChangedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
            P1: windows_core::Param<windows_core::IUnknown>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2StatusBarTextChangedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2StatusBarTextChangedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2>,
            args: windows_core::Ref<'_, windows_core::IUnknown>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2StatusBarTextChangedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2StatusBarTextChangedEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2StatusBarTextChangedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2StatusBarTextChangedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2StatusBarTextChangedEventHandler_ImplVtbl<
        T: ICoreWebView2StatusBarTextChangedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2StatusBarTextChangedEventHandler_Impl>
        ICoreWebView2StatusBarTextChangedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2StatusBarTextChangedEventHandler_Vtbl =
            ICoreWebView2StatusBarTextChangedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2StatusBarTextChangedEventHandler {
        pub fn new<'a, T: ICoreWebView2StatusBarTextChangedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2StatusBarTextChangedEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2StringCollection,
        ICoreWebView2StringCollection_Vtbl
    );
    impl ICoreWebView2StringCollection {
        pub unsafe fn Count(&self, value: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Count)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn GetValueAtIndex<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
        where
            P1: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetValueAtIndex)(
                    windows_core::Interface::as_raw(self),
                    index,
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2StringCollection_Vtbl {
        pub Count: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub GetValueAtIndex: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2StringCollection_Impl {
        fn Count(&self, value: u32) -> windows_core::Result<()>;
        fn GetValueAtIndex(
            &self,
            index: u32,
            value: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2StringCollection_Vtbl {
        pub const fn new<Identity: ICoreWebView2StringCollection_Impl>() -> Self {
            unsafe extern "system" fn Count<Identity: ICoreWebView2StringCollection_Impl>(
                this: *mut core::ffi::c_void,
                value: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2StringCollection_Impl::Count(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn GetValueAtIndex<
                Identity: ICoreWebView2StringCollection_Impl,
            >(
                this: *mut core::ffi::c_void,
                index: u32,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2StringCollection_Impl::GetValueAtIndex(
                        this,
                        core::mem::transmute_copy(&index),
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            Self {
                Count: Count::<Identity>,
                GetValueAtIndex: GetValueAtIndex::<Identity>,
            }
        }
    }
    struct ICoreWebView2StringCollection_ImplVtbl<T: ICoreWebView2StringCollection_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2StringCollection_Impl> ICoreWebView2StringCollection_ImplVtbl<T> {
        const VTABLE: ICoreWebView2StringCollection_Vtbl =
            ICoreWebView2StringCollection_Vtbl::new::<T>();
    }
    impl ICoreWebView2StringCollection {
        pub fn new<'a, T: ICoreWebView2StringCollection_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2StringCollection_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2TrySuspendCompletedHandler,
        ICoreWebView2TrySuspendCompletedHandler_Vtbl
    );
    impl ICoreWebView2TrySuspendCompletedHandler {
        pub unsafe fn Invoke(
            &self,
            errorcode: windows_core::HRESULT,
            result: bool,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    errorcode,
                    result.into(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2TrySuspendCompletedHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::HRESULT,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2TrySuspendCompletedHandler_Impl {
        fn Invoke(
            &self,
            errorcode: windows_core::HRESULT,
            result: windows_core::BOOL,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2TrySuspendCompletedHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2TrySuspendCompletedHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2TrySuspendCompletedHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                errorcode: windows_core::HRESULT,
                result: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2TrySuspendCompletedHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&errorcode),
                        core::mem::transmute_copy(&result),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2TrySuspendCompletedHandler_ImplVtbl<
        T: ICoreWebView2TrySuspendCompletedHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2TrySuspendCompletedHandler_Impl>
        ICoreWebView2TrySuspendCompletedHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2TrySuspendCompletedHandler_Vtbl =
            ICoreWebView2TrySuspendCompletedHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2TrySuspendCompletedHandler {
        pub fn new<'a, T: ICoreWebView2TrySuspendCompletedHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2TrySuspendCompletedHandler_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2WebMessageReceivedEventArgs,
        ICoreWebView2WebMessageReceivedEventArgs_Vtbl
    );
    impl ICoreWebView2WebMessageReceivedEventArgs {
        pub unsafe fn Source<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Source)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn WebMessageAsJson<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).WebMessageAsJson)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn TryGetWebMessageAsString<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).TryGetWebMessageAsString)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2WebMessageReceivedEventArgs_Vtbl {
        pub Source: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub WebMessageAsJson: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub TryGetWebMessageAsString: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2WebMessageReceivedEventArgs_Impl {
        fn Source(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn WebMessageAsJson(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn TryGetWebMessageAsString(
            &self,
            value: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2WebMessageReceivedEventArgs_Vtbl {
        pub const fn new<Identity: ICoreWebView2WebMessageReceivedEventArgs_Impl>() -> Self {
            unsafe extern "system" fn Source<
                Identity: ICoreWebView2WebMessageReceivedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WebMessageReceivedEventArgs_Impl::Source(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn WebMessageAsJson<
                Identity: ICoreWebView2WebMessageReceivedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WebMessageReceivedEventArgs_Impl::WebMessageAsJson(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn TryGetWebMessageAsString<
                Identity: ICoreWebView2WebMessageReceivedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WebMessageReceivedEventArgs_Impl::TryGetWebMessageAsString(
                        this,
                        core::mem::transmute(&value),
                    )
                    .into()
                }
            }
            Self {
                Source: Source::<Identity>,
                WebMessageAsJson: WebMessageAsJson::<Identity>,
                TryGetWebMessageAsString: TryGetWebMessageAsString::<Identity>,
            }
        }
    }
    struct ICoreWebView2WebMessageReceivedEventArgs_ImplVtbl<
        T: ICoreWebView2WebMessageReceivedEventArgs_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2WebMessageReceivedEventArgs_Impl>
        ICoreWebView2WebMessageReceivedEventArgs_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2WebMessageReceivedEventArgs_Vtbl =
            ICoreWebView2WebMessageReceivedEventArgs_Vtbl::new::<T>();
    }
    impl ICoreWebView2WebMessageReceivedEventArgs {
        pub fn new<'a, T: ICoreWebView2WebMessageReceivedEventArgs_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2WebMessageReceivedEventArgs_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2WebMessageReceivedEventArgs2,
        ICoreWebView2WebMessageReceivedEventArgs2_Vtbl
    );
    impl ICoreWebView2WebMessageReceivedEventArgs2 {
        pub unsafe fn AdditionalObjects<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2ObjectCollectionView>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).AdditionalObjects)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2WebMessageReceivedEventArgs2_Vtbl {
        pub AdditionalObjects: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2WebMessageReceivedEventArgs2_Impl {
        fn AdditionalObjects(
            &self,
            value: windows_core::Ref<'_, ICoreWebView2ObjectCollectionView>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2WebMessageReceivedEventArgs2_Vtbl {
        pub const fn new<Identity: ICoreWebView2WebMessageReceivedEventArgs2_Impl>() -> Self {
            unsafe extern "system" fn AdditionalObjects<
                Identity: ICoreWebView2WebMessageReceivedEventArgs2_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WebMessageReceivedEventArgs2_Impl::AdditionalObjects(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                AdditionalObjects: AdditionalObjects::<Identity>,
            }
        }
    }
    struct ICoreWebView2WebMessageReceivedEventArgs2_ImplVtbl<
        T: ICoreWebView2WebMessageReceivedEventArgs2_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2WebMessageReceivedEventArgs2_Impl>
        ICoreWebView2WebMessageReceivedEventArgs2_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2WebMessageReceivedEventArgs2_Vtbl =
            ICoreWebView2WebMessageReceivedEventArgs2_Vtbl::new::<T>();
    }
    impl ICoreWebView2WebMessageReceivedEventArgs2 {
        pub fn new<'a, T: ICoreWebView2WebMessageReceivedEventArgs2_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2WebMessageReceivedEventArgs2_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2WebMessageReceivedEventHandler,
        ICoreWebView2WebMessageReceivedEventHandler_Vtbl
    );
    impl ICoreWebView2WebMessageReceivedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
            P1: windows_core::Param<ICoreWebView2WebMessageReceivedEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2WebMessageReceivedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2WebMessageReceivedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2>,
            args: windows_core::Ref<'_, ICoreWebView2WebMessageReceivedEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2WebMessageReceivedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2WebMessageReceivedEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2WebMessageReceivedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WebMessageReceivedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2WebMessageReceivedEventHandler_ImplVtbl<
        T: ICoreWebView2WebMessageReceivedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2WebMessageReceivedEventHandler_Impl>
        ICoreWebView2WebMessageReceivedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2WebMessageReceivedEventHandler_Vtbl =
            ICoreWebView2WebMessageReceivedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2WebMessageReceivedEventHandler {
        pub fn new<'a, T: ICoreWebView2WebMessageReceivedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2WebMessageReceivedEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2WebResourceRequest,
        ICoreWebView2WebResourceRequest_Vtbl
    );
    impl ICoreWebView2WebResourceRequest {
        pub unsafe fn Uri<P0>(&self, uri: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Uri)(
                    windows_core::Interface::as_raw(self),
                    uri.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Uri2<P0>(&self, uri: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Uri2)(
                    windows_core::Interface::as_raw(self),
                    uri.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Method<P0>(&self, method: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Method)(
                    windows_core::Interface::as_raw(self),
                    method.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Method2<P0>(&self, method: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Method2)(
                    windows_core::Interface::as_raw(self),
                    method.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Headers<P0>(&self, headers: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2HttpRequestHeaders>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Headers)(
                    windows_core::Interface::as_raw(self),
                    headers.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2WebResourceRequest_Vtbl {
        pub Uri: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub Uri2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub Method: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub Method2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        Content: usize,
        Content2: usize,
        pub Headers: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2WebResourceRequest_Impl {
        fn Uri(&self, uri: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn Uri2(&self, uri: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn Method(&self, method: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn Method2(&self, method: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn Headers(
            &self,
            headers: windows_core::Ref<'_, ICoreWebView2HttpRequestHeaders>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2WebResourceRequest_Vtbl {
        pub const fn new<Identity: ICoreWebView2WebResourceRequest_Impl>() -> Self {
            unsafe extern "system" fn Uri<Identity: ICoreWebView2WebResourceRequest_Impl>(
                this: *mut core::ffi::c_void,
                uri: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WebResourceRequest_Impl::Uri(this, core::mem::transmute(&uri))
                        .into()
                }
            }
            unsafe extern "system" fn Uri2<Identity: ICoreWebView2WebResourceRequest_Impl>(
                this: *mut core::ffi::c_void,
                uri: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WebResourceRequest_Impl::Uri2(this, core::mem::transmute(&uri))
                        .into()
                }
            }
            unsafe extern "system" fn Method<Identity: ICoreWebView2WebResourceRequest_Impl>(
                this: *mut core::ffi::c_void,
                method: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WebResourceRequest_Impl::Method(
                        this,
                        core::mem::transmute(&method),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Method2<Identity: ICoreWebView2WebResourceRequest_Impl>(
                this: *mut core::ffi::c_void,
                method: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WebResourceRequest_Impl::Method2(
                        this,
                        core::mem::transmute(&method),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Headers<Identity: ICoreWebView2WebResourceRequest_Impl>(
                this: *mut core::ffi::c_void,
                headers: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WebResourceRequest_Impl::Headers(
                        this,
                        core::mem::transmute_copy(&headers),
                    )
                    .into()
                }
            }
            Self {
                Uri: Uri::<Identity>,
                Uri2: Uri2::<Identity>,
                Method: Method::<Identity>,
                Method2: Method2::<Identity>,
                Content: 0,
                Content2: 0,
                Headers: Headers::<Identity>,
            }
        }
    }
    struct ICoreWebView2WebResourceRequest_ImplVtbl<T: ICoreWebView2WebResourceRequest_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2WebResourceRequest_Impl> ICoreWebView2WebResourceRequest_ImplVtbl<T> {
        const VTABLE: ICoreWebView2WebResourceRequest_Vtbl =
            ICoreWebView2WebResourceRequest_Vtbl::new::<T>();
    }
    impl ICoreWebView2WebResourceRequest {
        pub fn new<'a, T: ICoreWebView2WebResourceRequest_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2WebResourceRequest_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2WebResourceRequestedEventArgs,
        ICoreWebView2WebResourceRequestedEventArgs_Vtbl
    );
    impl ICoreWebView2WebResourceRequestedEventArgs {
        pub unsafe fn Request<P0>(&self, request: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2WebResourceRequest>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Request)(
                    windows_core::Interface::as_raw(self),
                    request.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Response<P0>(&self, response: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2WebResourceResponse>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Response)(
                    windows_core::Interface::as_raw(self),
                    response.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Response2<P0>(&self, response: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2WebResourceResponse>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Response2)(
                    windows_core::Interface::as_raw(self),
                    response.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn GetDeferral<P0>(&self, deferral: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Deferral>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetDeferral)(
                    windows_core::Interface::as_raw(self),
                    deferral.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn ResourceContext(
            &self,
            context: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ResourceContext)(
                    windows_core::Interface::as_raw(self),
                    context,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2WebResourceRequestedEventArgs_Vtbl {
        pub Request: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Response: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Response2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub GetDeferral: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub ResourceContext: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2WebResourceRequestedEventArgs_Impl {
        fn Request(
            &self,
            request: windows_core::Ref<'_, ICoreWebView2WebResourceRequest>,
        ) -> windows_core::Result<()>;
        fn Response(
            &self,
            response: windows_core::Ref<'_, ICoreWebView2WebResourceResponse>,
        ) -> windows_core::Result<()>;
        fn Response2(
            &self,
            response: windows_core::Ref<'_, ICoreWebView2WebResourceResponse>,
        ) -> windows_core::Result<()>;
        fn GetDeferral(
            &self,
            deferral: windows_core::Ref<'_, ICoreWebView2Deferral>,
        ) -> windows_core::Result<()>;
        fn ResourceContext(
            &self,
            context: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2WebResourceRequestedEventArgs_Vtbl {
        pub const fn new<Identity: ICoreWebView2WebResourceRequestedEventArgs_Impl>() -> Self {
            unsafe extern "system" fn Request<
                Identity: ICoreWebView2WebResourceRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                request: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WebResourceRequestedEventArgs_Impl::Request(
                        this,
                        core::mem::transmute_copy(&request),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Response<
                Identity: ICoreWebView2WebResourceRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                response: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WebResourceRequestedEventArgs_Impl::Response(
                        this,
                        core::mem::transmute_copy(&response),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Response2<
                Identity: ICoreWebView2WebResourceRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                response: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WebResourceRequestedEventArgs_Impl::Response2(
                        this,
                        core::mem::transmute_copy(&response),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn GetDeferral<
                Identity: ICoreWebView2WebResourceRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                deferral: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WebResourceRequestedEventArgs_Impl::GetDeferral(
                        this,
                        core::mem::transmute_copy(&deferral),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ResourceContext<
                Identity: ICoreWebView2WebResourceRequestedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                context: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WebResourceRequestedEventArgs_Impl::ResourceContext(
                        this,
                        core::mem::transmute_copy(&context),
                    )
                    .into()
                }
            }
            Self {
                Request: Request::<Identity>,
                Response: Response::<Identity>,
                Response2: Response2::<Identity>,
                GetDeferral: GetDeferral::<Identity>,
                ResourceContext: ResourceContext::<Identity>,
            }
        }
    }
    struct ICoreWebView2WebResourceRequestedEventArgs_ImplVtbl<
        T: ICoreWebView2WebResourceRequestedEventArgs_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2WebResourceRequestedEventArgs_Impl>
        ICoreWebView2WebResourceRequestedEventArgs_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2WebResourceRequestedEventArgs_Vtbl =
            ICoreWebView2WebResourceRequestedEventArgs_Vtbl::new::<T>();
    }
    impl ICoreWebView2WebResourceRequestedEventArgs {
        pub fn new<'a, T: ICoreWebView2WebResourceRequestedEventArgs_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2WebResourceRequestedEventArgs_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2WebResourceRequestedEventArgs2,
        ICoreWebView2WebResourceRequestedEventArgs2_Vtbl
    );
    impl ICoreWebView2WebResourceRequestedEventArgs2 {
        pub unsafe fn RequestedSourceKind(
            &self,
            value: COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).RequestedSourceKind)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2WebResourceRequestedEventArgs2_Vtbl {
        pub RequestedSourceKind: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2WebResourceRequestedEventArgs2_Impl {
        fn RequestedSourceKind(
            &self,
            value: COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2WebResourceRequestedEventArgs2_Vtbl {
        pub const fn new<Identity: ICoreWebView2WebResourceRequestedEventArgs2_Impl>() -> Self {
            unsafe extern "system" fn RequestedSourceKind<
                Identity: ICoreWebView2WebResourceRequestedEventArgs2_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WebResourceRequestedEventArgs2_Impl::RequestedSourceKind(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                RequestedSourceKind: RequestedSourceKind::<Identity>,
            }
        }
    }
    struct ICoreWebView2WebResourceRequestedEventArgs2_ImplVtbl<
        T: ICoreWebView2WebResourceRequestedEventArgs2_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2WebResourceRequestedEventArgs2_Impl>
        ICoreWebView2WebResourceRequestedEventArgs2_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2WebResourceRequestedEventArgs2_Vtbl =
            ICoreWebView2WebResourceRequestedEventArgs2_Vtbl::new::<T>();
    }
    impl ICoreWebView2WebResourceRequestedEventArgs2 {
        pub fn new<'a, T: ICoreWebView2WebResourceRequestedEventArgs2_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2WebResourceRequestedEventArgs2_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2WebResourceRequestedEventHandler,
        ICoreWebView2WebResourceRequestedEventHandler_Vtbl
    );
    impl ICoreWebView2WebResourceRequestedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
            P1: windows_core::Param<ICoreWebView2WebResourceRequestedEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2WebResourceRequestedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2WebResourceRequestedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2>,
            args: windows_core::Ref<'_, ICoreWebView2WebResourceRequestedEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2WebResourceRequestedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2WebResourceRequestedEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2WebResourceRequestedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WebResourceRequestedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2WebResourceRequestedEventHandler_ImplVtbl<
        T: ICoreWebView2WebResourceRequestedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2WebResourceRequestedEventHandler_Impl>
        ICoreWebView2WebResourceRequestedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2WebResourceRequestedEventHandler_Vtbl =
            ICoreWebView2WebResourceRequestedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2WebResourceRequestedEventHandler {
        pub fn new<'a, T: ICoreWebView2WebResourceRequestedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2WebResourceRequestedEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2WebResourceResponse,
        ICoreWebView2WebResourceResponse_Vtbl
    );
    impl ICoreWebView2WebResourceResponse {
        pub unsafe fn Headers<P0>(&self, headers: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2HttpResponseHeaders>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Headers)(
                    windows_core::Interface::as_raw(self),
                    headers.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn StatusCode(&self, statuscode: i32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).StatusCode)(
                    windows_core::Interface::as_raw(self),
                    statuscode,
                )
                .ok()
            }
        }
        pub unsafe fn StatusCode2(&self, statuscode: i32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).StatusCode2)(
                    windows_core::Interface::as_raw(self),
                    statuscode,
                )
                .ok()
            }
        }
        pub unsafe fn ReasonPhrase<P0>(&self, reasonphrase: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ReasonPhrase)(
                    windows_core::Interface::as_raw(self),
                    reasonphrase.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn ReasonPhrase2<P0>(&self, reasonphrase: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ReasonPhrase2)(
                    windows_core::Interface::as_raw(self),
                    reasonphrase.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2WebResourceResponse_Vtbl {
        Content: usize,
        Content2: usize,
        pub Headers: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub StatusCode:
            unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
        pub StatusCode2:
            unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
        pub ReasonPhrase: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub ReasonPhrase2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2WebResourceResponse_Impl {
        fn Headers(
            &self,
            headers: windows_core::Ref<'_, ICoreWebView2HttpResponseHeaders>,
        ) -> windows_core::Result<()>;
        fn StatusCode(&self, statuscode: i32) -> windows_core::Result<()>;
        fn StatusCode2(&self, statuscode: i32) -> windows_core::Result<()>;
        fn ReasonPhrase(&self, reasonphrase: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn ReasonPhrase2(&self, reasonphrase: &windows_core::PCWSTR) -> windows_core::Result<()>;
    }
    impl ICoreWebView2WebResourceResponse_Vtbl {
        pub const fn new<Identity: ICoreWebView2WebResourceResponse_Impl>() -> Self {
            unsafe extern "system" fn Headers<Identity: ICoreWebView2WebResourceResponse_Impl>(
                this: *mut core::ffi::c_void,
                headers: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WebResourceResponse_Impl::Headers(
                        this,
                        core::mem::transmute_copy(&headers),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn StatusCode<
                Identity: ICoreWebView2WebResourceResponse_Impl,
            >(
                this: *mut core::ffi::c_void,
                statuscode: i32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WebResourceResponse_Impl::StatusCode(
                        this,
                        core::mem::transmute_copy(&statuscode),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn StatusCode2<
                Identity: ICoreWebView2WebResourceResponse_Impl,
            >(
                this: *mut core::ffi::c_void,
                statuscode: i32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WebResourceResponse_Impl::StatusCode2(
                        this,
                        core::mem::transmute_copy(&statuscode),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ReasonPhrase<
                Identity: ICoreWebView2WebResourceResponse_Impl,
            >(
                this: *mut core::ffi::c_void,
                reasonphrase: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WebResourceResponse_Impl::ReasonPhrase(
                        this,
                        core::mem::transmute(&reasonphrase),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ReasonPhrase2<
                Identity: ICoreWebView2WebResourceResponse_Impl,
            >(
                this: *mut core::ffi::c_void,
                reasonphrase: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WebResourceResponse_Impl::ReasonPhrase2(
                        this,
                        core::mem::transmute(&reasonphrase),
                    )
                    .into()
                }
            }
            Self {
                Content: 0,
                Content2: 0,
                Headers: Headers::<Identity>,
                StatusCode: StatusCode::<Identity>,
                StatusCode2: StatusCode2::<Identity>,
                ReasonPhrase: ReasonPhrase::<Identity>,
                ReasonPhrase2: ReasonPhrase2::<Identity>,
            }
        }
    }
    struct ICoreWebView2WebResourceResponse_ImplVtbl<T: ICoreWebView2WebResourceResponse_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2WebResourceResponse_Impl> ICoreWebView2WebResourceResponse_ImplVtbl<T> {
        const VTABLE: ICoreWebView2WebResourceResponse_Vtbl =
            ICoreWebView2WebResourceResponse_Vtbl::new::<T>();
    }
    impl ICoreWebView2WebResourceResponse {
        pub fn new<'a, T: ICoreWebView2WebResourceResponse_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2WebResourceResponse_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2WebResourceResponseReceivedEventArgs,
        ICoreWebView2WebResourceResponseReceivedEventArgs_Vtbl
    );
    impl ICoreWebView2WebResourceResponseReceivedEventArgs {
        pub unsafe fn Request<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2WebResourceRequest>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Request)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Response<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2WebResourceResponseView>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Response)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2WebResourceResponseReceivedEventArgs_Vtbl {
        pub Request: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Response: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2WebResourceResponseReceivedEventArgs_Impl {
        fn Request(
            &self,
            value: windows_core::Ref<'_, ICoreWebView2WebResourceRequest>,
        ) -> windows_core::Result<()>;
        fn Response(
            &self,
            value: windows_core::Ref<'_, ICoreWebView2WebResourceResponseView>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2WebResourceResponseReceivedEventArgs_Vtbl {
        pub const fn new<Identity: ICoreWebView2WebResourceResponseReceivedEventArgs_Impl>() -> Self
        {
            unsafe extern "system" fn Request<
                Identity: ICoreWebView2WebResourceResponseReceivedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WebResourceResponseReceivedEventArgs_Impl::Request(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Response<
                Identity: ICoreWebView2WebResourceResponseReceivedEventArgs_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WebResourceResponseReceivedEventArgs_Impl::Response(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                Request: Request::<Identity>,
                Response: Response::<Identity>,
            }
        }
    }
    struct ICoreWebView2WebResourceResponseReceivedEventArgs_ImplVtbl<
        T: ICoreWebView2WebResourceResponseReceivedEventArgs_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2WebResourceResponseReceivedEventArgs_Impl>
        ICoreWebView2WebResourceResponseReceivedEventArgs_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2WebResourceResponseReceivedEventArgs_Vtbl =
            ICoreWebView2WebResourceResponseReceivedEventArgs_Vtbl::new::<T>();
    }
    impl ICoreWebView2WebResourceResponseReceivedEventArgs {
        pub fn new<'a, T: ICoreWebView2WebResourceResponseReceivedEventArgs_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2WebResourceResponseReceivedEventArgs_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2WebResourceResponseReceivedEventHandler,
        ICoreWebView2WebResourceResponseReceivedEventHandler_Vtbl
    );
    impl ICoreWebView2WebResourceResponseReceivedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
            P1: windows_core::Param<ICoreWebView2WebResourceResponseReceivedEventArgs>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2WebResourceResponseReceivedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2WebResourceResponseReceivedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2>,
            args: windows_core::Ref<'_, ICoreWebView2WebResourceResponseReceivedEventArgs>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2WebResourceResponseReceivedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2WebResourceResponseReceivedEventHandler_Impl>(
        ) -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2WebResourceResponseReceivedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WebResourceResponseReceivedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2WebResourceResponseReceivedEventHandler_ImplVtbl<
        T: ICoreWebView2WebResourceResponseReceivedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2WebResourceResponseReceivedEventHandler_Impl>
        ICoreWebView2WebResourceResponseReceivedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2WebResourceResponseReceivedEventHandler_Vtbl =
            ICoreWebView2WebResourceResponseReceivedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2WebResourceResponseReceivedEventHandler {
        pub fn new<'a, T: ICoreWebView2WebResourceResponseReceivedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2WebResourceResponseReceivedEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2WebResourceResponseView,
        ICoreWebView2WebResourceResponseView_Vtbl
    );
    impl ICoreWebView2WebResourceResponseView {
        pub unsafe fn Headers<P0>(&self, headers: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2HttpResponseHeaders>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Headers)(
                    windows_core::Interface::as_raw(self),
                    headers.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn StatusCode(&self, statuscode: i32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).StatusCode)(
                    windows_core::Interface::as_raw(self),
                    statuscode,
                )
                .ok()
            }
        }
        pub unsafe fn ReasonPhrase<P0>(&self, reasonphrase: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ReasonPhrase)(
                    windows_core::Interface::as_raw(self),
                    reasonphrase.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn GetContent<P0>(&self, handler: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2WebResourceResponseViewGetContentCompletedHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetContent)(
                    windows_core::Interface::as_raw(self),
                    handler.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2WebResourceResponseView_Vtbl {
        pub Headers: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub StatusCode:
            unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
        pub ReasonPhrase: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub GetContent: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2WebResourceResponseView_Impl {
        fn Headers(
            &self,
            headers: windows_core::Ref<'_, ICoreWebView2HttpResponseHeaders>,
        ) -> windows_core::Result<()>;
        fn StatusCode(&self, statuscode: i32) -> windows_core::Result<()>;
        fn ReasonPhrase(&self, reasonphrase: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn GetContent(
            &self,
            handler: windows_core::Ref<
                '_,
                ICoreWebView2WebResourceResponseViewGetContentCompletedHandler,
            >,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2WebResourceResponseView_Vtbl {
        pub const fn new<Identity: ICoreWebView2WebResourceResponseView_Impl>() -> Self {
            unsafe extern "system" fn Headers<
                Identity: ICoreWebView2WebResourceResponseView_Impl,
            >(
                this: *mut core::ffi::c_void,
                headers: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WebResourceResponseView_Impl::Headers(
                        this,
                        core::mem::transmute_copy(&headers),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn StatusCode<
                Identity: ICoreWebView2WebResourceResponseView_Impl,
            >(
                this: *mut core::ffi::c_void,
                statuscode: i32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WebResourceResponseView_Impl::StatusCode(
                        this,
                        core::mem::transmute_copy(&statuscode),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ReasonPhrase<
                Identity: ICoreWebView2WebResourceResponseView_Impl,
            >(
                this: *mut core::ffi::c_void,
                reasonphrase: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WebResourceResponseView_Impl::ReasonPhrase(
                        this,
                        core::mem::transmute(&reasonphrase),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn GetContent<
                Identity: ICoreWebView2WebResourceResponseView_Impl,
            >(
                this: *mut core::ffi::c_void,
                handler: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WebResourceResponseView_Impl::GetContent(
                        this,
                        core::mem::transmute_copy(&handler),
                    )
                    .into()
                }
            }
            Self {
                Headers: Headers::<Identity>,
                StatusCode: StatusCode::<Identity>,
                ReasonPhrase: ReasonPhrase::<Identity>,
                GetContent: GetContent::<Identity>,
            }
        }
    }
    struct ICoreWebView2WebResourceResponseView_ImplVtbl<T: ICoreWebView2WebResourceResponseView_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2WebResourceResponseView_Impl>
        ICoreWebView2WebResourceResponseView_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2WebResourceResponseView_Vtbl =
            ICoreWebView2WebResourceResponseView_Vtbl::new::<T>();
    }
    impl ICoreWebView2WebResourceResponseView {
        pub fn new<'a, T: ICoreWebView2WebResourceResponseView_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2WebResourceResponseView_ImplVtbl::<T>::VTABLE as *const _
                    as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2WebResourceResponseViewGetContentCompletedHandler,
        ICoreWebView2WebResourceResponseViewGetContentCompletedHandler_Vtbl
    );
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2WebResourceResponseViewGetContentCompletedHandler_Vtbl {
        Invoke: usize,
    }
    pub trait ICoreWebView2WebResourceResponseViewGetContentCompletedHandler_Impl {}
    impl ICoreWebView2WebResourceResponseViewGetContentCompletedHandler_Vtbl {
        pub const fn new<
            Identity: ICoreWebView2WebResourceResponseViewGetContentCompletedHandler_Impl,
        >() -> Self {
            Self { Invoke: 0 }
        }
    }
    struct ICoreWebView2WebResourceResponseViewGetContentCompletedHandler_ImplVtbl<
        T: ICoreWebView2WebResourceResponseViewGetContentCompletedHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2WebResourceResponseViewGetContentCompletedHandler_Impl>
        ICoreWebView2WebResourceResponseViewGetContentCompletedHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2WebResourceResponseViewGetContentCompletedHandler_Vtbl =
            ICoreWebView2WebResourceResponseViewGetContentCompletedHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2WebResourceResponseViewGetContentCompletedHandler {
        pub fn new<'a, T: ICoreWebView2WebResourceResponseViewGetContentCompletedHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this =
                windows_core::ScopedHeap {
                    vtable: &ICoreWebView2WebResourceResponseViewGetContentCompletedHandler_ImplVtbl::<
                        T,
                    >::VTABLE as *const _ as *const _,
                    this: this as *const _ as *const _,
                };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2WindowCloseRequestedEventHandler,
        ICoreWebView2WindowCloseRequestedEventHandler_Vtbl
    );
    impl ICoreWebView2WindowCloseRequestedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2>,
            P1: windows_core::Param<windows_core::IUnknown>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2WindowCloseRequestedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2WindowCloseRequestedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2>,
            args: windows_core::Ref<'_, windows_core::IUnknown>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2WindowCloseRequestedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2WindowCloseRequestedEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2WindowCloseRequestedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WindowCloseRequestedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2WindowCloseRequestedEventHandler_ImplVtbl<
        T: ICoreWebView2WindowCloseRequestedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2WindowCloseRequestedEventHandler_Impl>
        ICoreWebView2WindowCloseRequestedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2WindowCloseRequestedEventHandler_Vtbl =
            ICoreWebView2WindowCloseRequestedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2WindowCloseRequestedEventHandler {
        pub fn new<'a, T: ICoreWebView2WindowCloseRequestedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2WindowCloseRequestedEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2WindowFeatures,
        ICoreWebView2WindowFeatures_Vtbl
    );
    impl ICoreWebView2WindowFeatures {
        pub unsafe fn HasPosition(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).HasPosition)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn HasSize(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).HasSize)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn Left(&self, value: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Left)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn Top(&self, value: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Top)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn Height(&self, value: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Height)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn Width(&self, value: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Width)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn ShouldDisplayMenuBar(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ShouldDisplayMenuBar)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn ShouldDisplayStatus(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ShouldDisplayStatus)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn ShouldDisplayToolbar(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ShouldDisplayToolbar)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn ShouldDisplayScrollBars(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ShouldDisplayScrollBars)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2WindowFeatures_Vtbl {
        pub HasPosition: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub HasSize: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub Left: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub Top: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub Height: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub Width: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub ShouldDisplayMenuBar: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub ShouldDisplayStatus: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub ShouldDisplayToolbar: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub ShouldDisplayScrollBars: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2WindowFeatures_Impl {
        fn HasPosition(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn HasSize(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn Left(&self, value: u32) -> windows_core::Result<()>;
        fn Top(&self, value: u32) -> windows_core::Result<()>;
        fn Height(&self, value: u32) -> windows_core::Result<()>;
        fn Width(&self, value: u32) -> windows_core::Result<()>;
        fn ShouldDisplayMenuBar(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn ShouldDisplayStatus(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn ShouldDisplayToolbar(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn ShouldDisplayScrollBars(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
    }
    impl ICoreWebView2WindowFeatures_Vtbl {
        pub const fn new<Identity: ICoreWebView2WindowFeatures_Impl>() -> Self {
            unsafe extern "system" fn HasPosition<Identity: ICoreWebView2WindowFeatures_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WindowFeatures_Impl::HasPosition(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn HasSize<Identity: ICoreWebView2WindowFeatures_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WindowFeatures_Impl::HasSize(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Left<Identity: ICoreWebView2WindowFeatures_Impl>(
                this: *mut core::ffi::c_void,
                value: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WindowFeatures_Impl::Left(this, core::mem::transmute_copy(&value))
                        .into()
                }
            }
            unsafe extern "system" fn Top<Identity: ICoreWebView2WindowFeatures_Impl>(
                this: *mut core::ffi::c_void,
                value: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WindowFeatures_Impl::Top(this, core::mem::transmute_copy(&value))
                        .into()
                }
            }
            unsafe extern "system" fn Height<Identity: ICoreWebView2WindowFeatures_Impl>(
                this: *mut core::ffi::c_void,
                value: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WindowFeatures_Impl::Height(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Width<Identity: ICoreWebView2WindowFeatures_Impl>(
                this: *mut core::ffi::c_void,
                value: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WindowFeatures_Impl::Width(this, core::mem::transmute_copy(&value))
                        .into()
                }
            }
            unsafe extern "system" fn ShouldDisplayMenuBar<
                Identity: ICoreWebView2WindowFeatures_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WindowFeatures_Impl::ShouldDisplayMenuBar(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ShouldDisplayStatus<
                Identity: ICoreWebView2WindowFeatures_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WindowFeatures_Impl::ShouldDisplayStatus(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ShouldDisplayToolbar<
                Identity: ICoreWebView2WindowFeatures_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WindowFeatures_Impl::ShouldDisplayToolbar(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ShouldDisplayScrollBars<
                Identity: ICoreWebView2WindowFeatures_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2WindowFeatures_Impl::ShouldDisplayScrollBars(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                HasPosition: HasPosition::<Identity>,
                HasSize: HasSize::<Identity>,
                Left: Left::<Identity>,
                Top: Top::<Identity>,
                Height: Height::<Identity>,
                Width: Width::<Identity>,
                ShouldDisplayMenuBar: ShouldDisplayMenuBar::<Identity>,
                ShouldDisplayStatus: ShouldDisplayStatus::<Identity>,
                ShouldDisplayToolbar: ShouldDisplayToolbar::<Identity>,
                ShouldDisplayScrollBars: ShouldDisplayScrollBars::<Identity>,
            }
        }
    }
    struct ICoreWebView2WindowFeatures_ImplVtbl<T: ICoreWebView2WindowFeatures_Impl>(
        core::marker::PhantomData<T>,
    );
    impl<T: ICoreWebView2WindowFeatures_Impl> ICoreWebView2WindowFeatures_ImplVtbl<T> {
        const VTABLE: ICoreWebView2WindowFeatures_Vtbl =
            ICoreWebView2WindowFeatures_Vtbl::new::<T>();
    }
    impl ICoreWebView2WindowFeatures {
        pub fn new<'a, T: ICoreWebView2WindowFeatures_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2WindowFeatures_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(
        ICoreWebView2ZoomFactorChangedEventHandler,
        ICoreWebView2ZoomFactorChangedEventHandler_Vtbl
    );
    impl ICoreWebView2ZoomFactorChangedEventHandler {
        pub unsafe fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Controller>,
            P1: windows_core::Param<windows_core::IUnknown>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Invoke)(
                    windows_core::Interface::as_raw(self),
                    sender.param().abi(),
                    args.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2ZoomFactorChangedEventHandler_Vtbl {
        pub Invoke: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2ZoomFactorChangedEventHandler_Impl {
        fn Invoke(
            &self,
            sender: windows_core::Ref<'_, ICoreWebView2Controller>,
            args: windows_core::Ref<'_, windows_core::IUnknown>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2ZoomFactorChangedEventHandler_Vtbl {
        pub const fn new<Identity: ICoreWebView2ZoomFactorChangedEventHandler_Impl>() -> Self {
            unsafe extern "system" fn Invoke<
                Identity: ICoreWebView2ZoomFactorChangedEventHandler_Impl,
            >(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2ZoomFactorChangedEventHandler_Impl::Invoke(
                        this,
                        core::mem::transmute_copy(&sender),
                        core::mem::transmute_copy(&args),
                    )
                    .into()
                }
            }
            Self {
                Invoke: Invoke::<Identity>,
            }
        }
    }
    struct ICoreWebView2ZoomFactorChangedEventHandler_ImplVtbl<
        T: ICoreWebView2ZoomFactorChangedEventHandler_Impl,
    >(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2ZoomFactorChangedEventHandler_Impl>
        ICoreWebView2ZoomFactorChangedEventHandler_ImplVtbl<T>
    {
        const VTABLE: ICoreWebView2ZoomFactorChangedEventHandler_Vtbl =
            ICoreWebView2ZoomFactorChangedEventHandler_Vtbl::new::<T>();
    }
    impl ICoreWebView2ZoomFactorChangedEventHandler {
        pub fn new<'a, T: ICoreWebView2ZoomFactorChangedEventHandler_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2ZoomFactorChangedEventHandler_ImplVtbl::<T>::VTABLE
                    as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2_10, ICoreWebView2_10_Vtbl);
    impl ICoreWebView2_10 {
        pub unsafe fn add_BasicAuthenticationRequested<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2BasicAuthenticationRequestedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_BasicAuthenticationRequested)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_BasicAuthenticationRequested(
            &self,
            token: i64,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_BasicAuthenticationRequested)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2_10_Vtbl {
        pub add_BasicAuthenticationRequested: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        )
            -> windows_core::HRESULT,
        pub remove_BasicAuthenticationRequested:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2_10_Impl {
        fn add_BasicAuthenticationRequested(
            &self,
            eventhandler: windows_core::Ref<
                '_,
                ICoreWebView2BasicAuthenticationRequestedEventHandler,
            >,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_BasicAuthenticationRequested(&self, token: i64) -> windows_core::Result<()>;
    }
    impl ICoreWebView2_10_Vtbl {
        pub const fn new<Identity: ICoreWebView2_10_Impl>() -> Self {
            unsafe extern "system" fn add_BasicAuthenticationRequested<
                Identity: ICoreWebView2_10_Impl,
            >(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_10_Impl::add_BasicAuthenticationRequested(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_BasicAuthenticationRequested<
                Identity: ICoreWebView2_10_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_10_Impl::remove_BasicAuthenticationRequested(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            Self {
                add_BasicAuthenticationRequested: add_BasicAuthenticationRequested::<Identity>,
                remove_BasicAuthenticationRequested: remove_BasicAuthenticationRequested::<Identity>,
            }
        }
    }
    struct ICoreWebView2_10_ImplVtbl<T: ICoreWebView2_10_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2_10_Impl> ICoreWebView2_10_ImplVtbl<T> {
        const VTABLE: ICoreWebView2_10_Vtbl = ICoreWebView2_10_Vtbl::new::<T>();
    }
    impl ICoreWebView2_10 {
        pub fn new<'a, T: ICoreWebView2_10_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2_10_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2_11, ICoreWebView2_11_Vtbl);
    impl ICoreWebView2_11 {
        pub unsafe fn CallDevToolsProtocolMethodForSession<P0, P1, P2, P3>(
            &self,
            sessionid: P0,
            methodname: P1,
            parametersasjson: P2,
            handler: P3,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
            P1: windows_core::Param<windows_core::PCWSTR>,
            P2: windows_core::Param<windows_core::PCWSTR>,
            P3: windows_core::Param<ICoreWebView2CallDevToolsProtocolMethodCompletedHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).CallDevToolsProtocolMethodForSession)(
                    windows_core::Interface::as_raw(self),
                    sessionid.param().abi(),
                    methodname.param().abi(),
                    parametersasjson.param().abi(),
                    handler.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn add_ContextMenuRequested<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2ContextMenuRequestedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_ContextMenuRequested)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_ContextMenuRequested(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_ContextMenuRequested)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2_11_Vtbl {
        pub CallDevToolsProtocolMethodForSession:
            unsafe extern "system" fn(
                *mut core::ffi::c_void,
                windows_core::PCWSTR,
                windows_core::PCWSTR,
                windows_core::PCWSTR,
                *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
        pub add_ContextMenuRequested: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_ContextMenuRequested:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2_11_Impl {
        fn CallDevToolsProtocolMethodForSession(
            &self,
            sessionid: &windows_core::PCWSTR,
            methodname: &windows_core::PCWSTR,
            parametersasjson: &windows_core::PCWSTR,
            handler: windows_core::Ref<'_, ICoreWebView2CallDevToolsProtocolMethodCompletedHandler>,
        ) -> windows_core::Result<()>;
        fn add_ContextMenuRequested(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2ContextMenuRequestedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_ContextMenuRequested(&self, token: i64) -> windows_core::Result<()>;
    }
    impl ICoreWebView2_11_Vtbl {
        pub const fn new<Identity: ICoreWebView2_11_Impl>() -> Self {
            unsafe extern "system" fn CallDevToolsProtocolMethodForSession<
                Identity: ICoreWebView2_11_Impl,
            >(
                this: *mut core::ffi::c_void,
                sessionid: windows_core::PCWSTR,
                methodname: windows_core::PCWSTR,
                parametersasjson: windows_core::PCWSTR,
                handler: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_11_Impl::CallDevToolsProtocolMethodForSession(
                        this,
                        core::mem::transmute(&sessionid),
                        core::mem::transmute(&methodname),
                        core::mem::transmute(&parametersasjson),
                        core::mem::transmute_copy(&handler),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn add_ContextMenuRequested<Identity: ICoreWebView2_11_Impl>(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_11_Impl::add_ContextMenuRequested(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_ContextMenuRequested<
                Identity: ICoreWebView2_11_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_11_Impl::remove_ContextMenuRequested(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            Self {
                CallDevToolsProtocolMethodForSession: CallDevToolsProtocolMethodForSession::<
                    Identity,
                >,
                add_ContextMenuRequested: add_ContextMenuRequested::<Identity>,
                remove_ContextMenuRequested: remove_ContextMenuRequested::<Identity>,
            }
        }
    }
    struct ICoreWebView2_11_ImplVtbl<T: ICoreWebView2_11_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2_11_Impl> ICoreWebView2_11_ImplVtbl<T> {
        const VTABLE: ICoreWebView2_11_Vtbl = ICoreWebView2_11_Vtbl::new::<T>();
    }
    impl ICoreWebView2_11 {
        pub fn new<'a, T: ICoreWebView2_11_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2_11_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2_12, ICoreWebView2_12_Vtbl);
    impl ICoreWebView2_12 {
        pub unsafe fn add_StatusBarTextChanged<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2StatusBarTextChangedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_StatusBarTextChanged)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_StatusBarTextChanged(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_StatusBarTextChanged)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn StatusBarText<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).StatusBarText)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2_12_Vtbl {
        pub add_StatusBarTextChanged: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_StatusBarTextChanged:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub StatusBarText: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2_12_Impl {
        fn add_StatusBarTextChanged(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2StatusBarTextChangedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_StatusBarTextChanged(&self, token: i64) -> windows_core::Result<()>;
        fn StatusBarText(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
    }
    impl ICoreWebView2_12_Vtbl {
        pub const fn new<Identity: ICoreWebView2_12_Impl>() -> Self {
            unsafe extern "system" fn add_StatusBarTextChanged<Identity: ICoreWebView2_12_Impl>(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_12_Impl::add_StatusBarTextChanged(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_StatusBarTextChanged<
                Identity: ICoreWebView2_12_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_12_Impl::remove_StatusBarTextChanged(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn StatusBarText<Identity: ICoreWebView2_12_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_12_Impl::StatusBarText(this, core::mem::transmute(&value)).into()
                }
            }
            Self {
                add_StatusBarTextChanged: add_StatusBarTextChanged::<Identity>,
                remove_StatusBarTextChanged: remove_StatusBarTextChanged::<Identity>,
                StatusBarText: StatusBarText::<Identity>,
            }
        }
    }
    struct ICoreWebView2_12_ImplVtbl<T: ICoreWebView2_12_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2_12_Impl> ICoreWebView2_12_ImplVtbl<T> {
        const VTABLE: ICoreWebView2_12_Vtbl = ICoreWebView2_12_Vtbl::new::<T>();
    }
    impl ICoreWebView2_12 {
        pub fn new<'a, T: ICoreWebView2_12_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2_12_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2_13, ICoreWebView2_13_Vtbl);
    impl ICoreWebView2_13 {
        pub unsafe fn Profile<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Profile>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Profile)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2_13_Vtbl {
        pub Profile: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2_13_Impl {
        fn Profile(
            &self,
            value: windows_core::Ref<'_, ICoreWebView2Profile>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2_13_Vtbl {
        pub const fn new<Identity: ICoreWebView2_13_Impl>() -> Self {
            unsafe extern "system" fn Profile<Identity: ICoreWebView2_13_Impl>(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_13_Impl::Profile(this, core::mem::transmute_copy(&value)).into()
                }
            }
            Self {
                Profile: Profile::<Identity>,
            }
        }
    }
    struct ICoreWebView2_13_ImplVtbl<T: ICoreWebView2_13_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2_13_Impl> ICoreWebView2_13_ImplVtbl<T> {
        const VTABLE: ICoreWebView2_13_Vtbl = ICoreWebView2_13_Vtbl::new::<T>();
    }
    impl ICoreWebView2_13 {
        pub fn new<'a, T: ICoreWebView2_13_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2_13_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2_14, ICoreWebView2_14_Vtbl);
    impl ICoreWebView2_14 {
        pub unsafe fn add_ServerCertificateErrorDetected<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2ServerCertificateErrorDetectedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_ServerCertificateErrorDetected)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_ServerCertificateErrorDetected(
            &self,
            token: i64,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_ServerCertificateErrorDetected)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn ClearServerCertificateErrorActions<P0>(
            &self,
            handler: P0,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<
                ICoreWebView2ClearServerCertificateErrorActionsCompletedHandler,
            >,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ClearServerCertificateErrorActions)(
                    windows_core::Interface::as_raw(self),
                    handler.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2_14_Vtbl {
        pub add_ServerCertificateErrorDetected: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        )
            -> windows_core::HRESULT,
        pub remove_ServerCertificateErrorDetected:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub ClearServerCertificateErrorActions: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        )
            -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2_14_Impl {
        fn add_ServerCertificateErrorDetected(
            &self,
            eventhandler: windows_core::Ref<
                '_,
                ICoreWebView2ServerCertificateErrorDetectedEventHandler,
            >,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_ServerCertificateErrorDetected(&self, token: i64) -> windows_core::Result<()>;
        fn ClearServerCertificateErrorActions(
            &self,
            handler: windows_core::Ref<
                '_,
                ICoreWebView2ClearServerCertificateErrorActionsCompletedHandler,
            >,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2_14_Vtbl {
        pub const fn new<Identity: ICoreWebView2_14_Impl>() -> Self {
            unsafe extern "system" fn add_ServerCertificateErrorDetected<
                Identity: ICoreWebView2_14_Impl,
            >(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_14_Impl::add_ServerCertificateErrorDetected(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_ServerCertificateErrorDetected<
                Identity: ICoreWebView2_14_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_14_Impl::remove_ServerCertificateErrorDetected(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ClearServerCertificateErrorActions<
                Identity: ICoreWebView2_14_Impl,
            >(
                this: *mut core::ffi::c_void,
                handler: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_14_Impl::ClearServerCertificateErrorActions(
                        this,
                        core::mem::transmute_copy(&handler),
                    )
                    .into()
                }
            }
            Self {
                add_ServerCertificateErrorDetected: add_ServerCertificateErrorDetected::<Identity>,
                remove_ServerCertificateErrorDetected: remove_ServerCertificateErrorDetected::<
                    Identity,
                >,
                ClearServerCertificateErrorActions: ClearServerCertificateErrorActions::<Identity>,
            }
        }
    }
    struct ICoreWebView2_14_ImplVtbl<T: ICoreWebView2_14_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2_14_Impl> ICoreWebView2_14_ImplVtbl<T> {
        const VTABLE: ICoreWebView2_14_Vtbl = ICoreWebView2_14_Vtbl::new::<T>();
    }
    impl ICoreWebView2_14 {
        pub fn new<'a, T: ICoreWebView2_14_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2_14_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2_15, ICoreWebView2_15_Vtbl);
    impl ICoreWebView2_15 {
        pub unsafe fn add_FaviconChanged<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2FaviconChangedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_FaviconChanged)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_FaviconChanged(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_FaviconChanged)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn FaviconUri<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).FaviconUri)(
                    windows_core::Interface::as_raw(self),
                    value.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn GetFavicon<P1>(
            &self,
            format: COREWEBVIEW2_FAVICON_IMAGE_FORMAT,
            completedhandler: P1,
        ) -> windows_core::Result<()>
        where
            P1: windows_core::Param<ICoreWebView2GetFaviconCompletedHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).GetFavicon)(
                    windows_core::Interface::as_raw(self),
                    format,
                    completedhandler.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2_15_Vtbl {
        pub add_FaviconChanged: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_FaviconChanged:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub FaviconUri: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub GetFavicon: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_FAVICON_IMAGE_FORMAT,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2_15_Impl {
        fn add_FaviconChanged(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2FaviconChangedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_FaviconChanged(&self, token: i64) -> windows_core::Result<()>;
        fn FaviconUri(&self, value: &windows_core::PCWSTR) -> windows_core::Result<()>;
        fn GetFavicon(
            &self,
            format: COREWEBVIEW2_FAVICON_IMAGE_FORMAT,
            completedhandler: windows_core::Ref<'_, ICoreWebView2GetFaviconCompletedHandler>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2_15_Vtbl {
        pub const fn new<Identity: ICoreWebView2_15_Impl>() -> Self {
            unsafe extern "system" fn add_FaviconChanged<Identity: ICoreWebView2_15_Impl>(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_15_Impl::add_FaviconChanged(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_FaviconChanged<Identity: ICoreWebView2_15_Impl>(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_15_Impl::remove_FaviconChanged(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn FaviconUri<Identity: ICoreWebView2_15_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_15_Impl::FaviconUri(this, core::mem::transmute(&value)).into()
                }
            }
            unsafe extern "system" fn GetFavicon<Identity: ICoreWebView2_15_Impl>(
                this: *mut core::ffi::c_void,
                format: COREWEBVIEW2_FAVICON_IMAGE_FORMAT,
                completedhandler: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_15_Impl::GetFavicon(
                        this,
                        core::mem::transmute_copy(&format),
                        core::mem::transmute_copy(&completedhandler),
                    )
                    .into()
                }
            }
            Self {
                add_FaviconChanged: add_FaviconChanged::<Identity>,
                remove_FaviconChanged: remove_FaviconChanged::<Identity>,
                FaviconUri: FaviconUri::<Identity>,
                GetFavicon: GetFavicon::<Identity>,
            }
        }
    }
    struct ICoreWebView2_15_ImplVtbl<T: ICoreWebView2_15_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2_15_Impl> ICoreWebView2_15_ImplVtbl<T> {
        const VTABLE: ICoreWebView2_15_Vtbl = ICoreWebView2_15_Vtbl::new::<T>();
    }
    impl ICoreWebView2_15 {
        pub fn new<'a, T: ICoreWebView2_15_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2_15_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2_16, ICoreWebView2_16_Vtbl);
    impl ICoreWebView2_16 {
        pub unsafe fn Print<P0, P1>(
            &self,
            printsettings: P0,
            handler: P1,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2PrintSettings>,
            P1: windows_core::Param<ICoreWebView2PrintCompletedHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Print)(
                    windows_core::Interface::as_raw(self),
                    printsettings.param().abi(),
                    handler.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn ShowPrintUI(
            &self,
            printdialogkind: COREWEBVIEW2_PRINT_DIALOG_KIND,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).ShowPrintUI)(
                    windows_core::Interface::as_raw(self),
                    printdialogkind,
                )
                .ok()
            }
        }
        pub unsafe fn PrintToPdfStream<P0, P1>(
            &self,
            printsettings: P0,
            handler: P1,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2PrintSettings>,
            P1: windows_core::Param<ICoreWebView2PrintToPdfStreamCompletedHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).PrintToPdfStream)(
                    windows_core::Interface::as_raw(self),
                    printsettings.param().abi(),
                    handler.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2_16_Vtbl {
        pub Print: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub ShowPrintUI: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_PRINT_DIALOG_KIND,
        ) -> windows_core::HRESULT,
        pub PrintToPdfStream: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2_16_Impl {
        fn Print(
            &self,
            printsettings: windows_core::Ref<'_, ICoreWebView2PrintSettings>,
            handler: windows_core::Ref<'_, ICoreWebView2PrintCompletedHandler>,
        ) -> windows_core::Result<()>;
        fn ShowPrintUI(
            &self,
            printdialogkind: COREWEBVIEW2_PRINT_DIALOG_KIND,
        ) -> windows_core::Result<()>;
        fn PrintToPdfStream(
            &self,
            printsettings: windows_core::Ref<'_, ICoreWebView2PrintSettings>,
            handler: windows_core::Ref<'_, ICoreWebView2PrintToPdfStreamCompletedHandler>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2_16_Vtbl {
        pub const fn new<Identity: ICoreWebView2_16_Impl>() -> Self {
            unsafe extern "system" fn Print<Identity: ICoreWebView2_16_Impl>(
                this: *mut core::ffi::c_void,
                printsettings: *mut core::ffi::c_void,
                handler: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_16_Impl::Print(
                        this,
                        core::mem::transmute_copy(&printsettings),
                        core::mem::transmute_copy(&handler),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ShowPrintUI<Identity: ICoreWebView2_16_Impl>(
                this: *mut core::ffi::c_void,
                printdialogkind: COREWEBVIEW2_PRINT_DIALOG_KIND,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_16_Impl::ShowPrintUI(
                        this,
                        core::mem::transmute_copy(&printdialogkind),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn PrintToPdfStream<Identity: ICoreWebView2_16_Impl>(
                this: *mut core::ffi::c_void,
                printsettings: *mut core::ffi::c_void,
                handler: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_16_Impl::PrintToPdfStream(
                        this,
                        core::mem::transmute_copy(&printsettings),
                        core::mem::transmute_copy(&handler),
                    )
                    .into()
                }
            }
            Self {
                Print: Print::<Identity>,
                ShowPrintUI: ShowPrintUI::<Identity>,
                PrintToPdfStream: PrintToPdfStream::<Identity>,
            }
        }
    }
    struct ICoreWebView2_16_ImplVtbl<T: ICoreWebView2_16_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2_16_Impl> ICoreWebView2_16_ImplVtbl<T> {
        const VTABLE: ICoreWebView2_16_Vtbl = ICoreWebView2_16_Vtbl::new::<T>();
    }
    impl ICoreWebView2_16 {
        pub fn new<'a, T: ICoreWebView2_16_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2_16_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2_17, ICoreWebView2_17_Vtbl);
    impl ICoreWebView2_17 {
        pub unsafe fn PostSharedBufferToScript<P0, P2>(
            &self,
            sharedbuffer: P0,
            access: COREWEBVIEW2_SHARED_BUFFER_ACCESS,
            additionaldataasjson: P2,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2SharedBuffer>,
            P2: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).PostSharedBufferToScript)(
                    windows_core::Interface::as_raw(self),
                    sharedbuffer.param().abi(),
                    access,
                    additionaldataasjson.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2_17_Vtbl {
        pub PostSharedBufferToScript: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            COREWEBVIEW2_SHARED_BUFFER_ACCESS,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2_17_Impl {
        fn PostSharedBufferToScript(
            &self,
            sharedbuffer: windows_core::Ref<'_, ICoreWebView2SharedBuffer>,
            access: COREWEBVIEW2_SHARED_BUFFER_ACCESS,
            additionaldataasjson: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2_17_Vtbl {
        pub const fn new<Identity: ICoreWebView2_17_Impl>() -> Self {
            unsafe extern "system" fn PostSharedBufferToScript<Identity: ICoreWebView2_17_Impl>(
                this: *mut core::ffi::c_void,
                sharedbuffer: *mut core::ffi::c_void,
                access: COREWEBVIEW2_SHARED_BUFFER_ACCESS,
                additionaldataasjson: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_17_Impl::PostSharedBufferToScript(
                        this,
                        core::mem::transmute_copy(&sharedbuffer),
                        core::mem::transmute_copy(&access),
                        core::mem::transmute(&additionaldataasjson),
                    )
                    .into()
                }
            }
            Self {
                PostSharedBufferToScript: PostSharedBufferToScript::<Identity>,
            }
        }
    }
    struct ICoreWebView2_17_ImplVtbl<T: ICoreWebView2_17_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2_17_Impl> ICoreWebView2_17_ImplVtbl<T> {
        const VTABLE: ICoreWebView2_17_Vtbl = ICoreWebView2_17_Vtbl::new::<T>();
    }
    impl ICoreWebView2_17 {
        pub fn new<'a, T: ICoreWebView2_17_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2_17_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2_18, ICoreWebView2_18_Vtbl);
    impl ICoreWebView2_18 {
        pub unsafe fn add_LaunchingExternalUriScheme<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2LaunchingExternalUriSchemeEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_LaunchingExternalUriScheme)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_LaunchingExternalUriScheme(
            &self,
            token: i64,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_LaunchingExternalUriScheme)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2_18_Vtbl {
        pub add_LaunchingExternalUriScheme: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        )
            -> windows_core::HRESULT,
        pub remove_LaunchingExternalUriScheme:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2_18_Impl {
        fn add_LaunchingExternalUriScheme(
            &self,
            eventhandler: windows_core::Ref<
                '_,
                ICoreWebView2LaunchingExternalUriSchemeEventHandler,
            >,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_LaunchingExternalUriScheme(&self, token: i64) -> windows_core::Result<()>;
    }
    impl ICoreWebView2_18_Vtbl {
        pub const fn new<Identity: ICoreWebView2_18_Impl>() -> Self {
            unsafe extern "system" fn add_LaunchingExternalUriScheme<
                Identity: ICoreWebView2_18_Impl,
            >(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_18_Impl::add_LaunchingExternalUriScheme(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_LaunchingExternalUriScheme<
                Identity: ICoreWebView2_18_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_18_Impl::remove_LaunchingExternalUriScheme(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            Self {
                add_LaunchingExternalUriScheme: add_LaunchingExternalUriScheme::<Identity>,
                remove_LaunchingExternalUriScheme: remove_LaunchingExternalUriScheme::<Identity>,
            }
        }
    }
    struct ICoreWebView2_18_ImplVtbl<T: ICoreWebView2_18_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2_18_Impl> ICoreWebView2_18_ImplVtbl<T> {
        const VTABLE: ICoreWebView2_18_Vtbl = ICoreWebView2_18_Vtbl::new::<T>();
    }
    impl ICoreWebView2_18 {
        pub fn new<'a, T: ICoreWebView2_18_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2_18_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2_19, ICoreWebView2_19_Vtbl);
    impl ICoreWebView2_19 {
        pub unsafe fn MemoryUsageTargetLevel(
            &self,
            value: COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).MemoryUsageTargetLevel)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn MemoryUsageTargetLevel2(
            &self,
            value: COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).MemoryUsageTargetLevel2)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2_19_Vtbl {
        pub MemoryUsageTargetLevel: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL,
        ) -> windows_core::HRESULT,
        pub MemoryUsageTargetLevel2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2_19_Impl {
        fn MemoryUsageTargetLevel(
            &self,
            value: COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL,
        ) -> windows_core::Result<()>;
        fn MemoryUsageTargetLevel2(
            &self,
            value: COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2_19_Vtbl {
        pub const fn new<Identity: ICoreWebView2_19_Impl>() -> Self {
            unsafe extern "system" fn MemoryUsageTargetLevel<Identity: ICoreWebView2_19_Impl>(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_19_Impl::MemoryUsageTargetLevel(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn MemoryUsageTargetLevel2<Identity: ICoreWebView2_19_Impl>(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_19_Impl::MemoryUsageTargetLevel2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                MemoryUsageTargetLevel: MemoryUsageTargetLevel::<Identity>,
                MemoryUsageTargetLevel2: MemoryUsageTargetLevel2::<Identity>,
            }
        }
    }
    struct ICoreWebView2_19_ImplVtbl<T: ICoreWebView2_19_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2_19_Impl> ICoreWebView2_19_ImplVtbl<T> {
        const VTABLE: ICoreWebView2_19_Vtbl = ICoreWebView2_19_Vtbl::new::<T>();
    }
    impl ICoreWebView2_19 {
        pub fn new<'a, T: ICoreWebView2_19_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2_19_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2_2, ICoreWebView2_2_Vtbl);
    impl ICoreWebView2_2 {
        pub unsafe fn add_WebResourceResponseReceived<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2WebResourceResponseReceivedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_WebResourceResponseReceived)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_WebResourceResponseReceived(
            &self,
            token: i64,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_WebResourceResponseReceived)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn NavigateWithWebResourceRequest<P0>(
            &self,
            request: P0,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2WebResourceRequest>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).NavigateWithWebResourceRequest)(
                    windows_core::Interface::as_raw(self),
                    request.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn add_DOMContentLoaded<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2DOMContentLoadedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_DOMContentLoaded)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_DOMContentLoaded(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_DOMContentLoaded)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn CookieManager<P0>(&self, cookiemanager: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2CookieManager>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).CookieManager)(
                    windows_core::Interface::as_raw(self),
                    cookiemanager.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Environment<P0>(&self, environment: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2Environment>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).Environment)(
                    windows_core::Interface::as_raw(self),
                    environment.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2_2_Vtbl {
        pub add_WebResourceResponseReceived: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        )
            -> windows_core::HRESULT,
        pub remove_WebResourceResponseReceived:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub NavigateWithWebResourceRequest: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        )
            -> windows_core::HRESULT,
        pub add_DOMContentLoaded: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_DOMContentLoaded:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub CookieManager: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Environment: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2_2_Impl {
        fn add_WebResourceResponseReceived(
            &self,
            eventhandler: windows_core::Ref<
                '_,
                ICoreWebView2WebResourceResponseReceivedEventHandler,
            >,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_WebResourceResponseReceived(&self, token: i64) -> windows_core::Result<()>;
        fn NavigateWithWebResourceRequest(
            &self,
            request: windows_core::Ref<'_, ICoreWebView2WebResourceRequest>,
        ) -> windows_core::Result<()>;
        fn add_DOMContentLoaded(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2DOMContentLoadedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_DOMContentLoaded(&self, token: i64) -> windows_core::Result<()>;
        fn CookieManager(
            &self,
            cookiemanager: windows_core::Ref<'_, ICoreWebView2CookieManager>,
        ) -> windows_core::Result<()>;
        fn Environment(
            &self,
            environment: windows_core::Ref<'_, ICoreWebView2Environment>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2_2_Vtbl {
        pub const fn new<Identity: ICoreWebView2_2_Impl>() -> Self {
            unsafe extern "system" fn add_WebResourceResponseReceived<
                Identity: ICoreWebView2_2_Impl,
            >(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_2_Impl::add_WebResourceResponseReceived(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_WebResourceResponseReceived<
                Identity: ICoreWebView2_2_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_2_Impl::remove_WebResourceResponseReceived(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn NavigateWithWebResourceRequest<
                Identity: ICoreWebView2_2_Impl,
            >(
                this: *mut core::ffi::c_void,
                request: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_2_Impl::NavigateWithWebResourceRequest(
                        this,
                        core::mem::transmute_copy(&request),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn add_DOMContentLoaded<Identity: ICoreWebView2_2_Impl>(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_2_Impl::add_DOMContentLoaded(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_DOMContentLoaded<Identity: ICoreWebView2_2_Impl>(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_2_Impl::remove_DOMContentLoaded(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn CookieManager<Identity: ICoreWebView2_2_Impl>(
                this: *mut core::ffi::c_void,
                cookiemanager: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_2_Impl::CookieManager(
                        this,
                        core::mem::transmute_copy(&cookiemanager),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn Environment<Identity: ICoreWebView2_2_Impl>(
                this: *mut core::ffi::c_void,
                environment: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_2_Impl::Environment(this, core::mem::transmute_copy(&environment))
                        .into()
                }
            }
            Self {
                add_WebResourceResponseReceived: add_WebResourceResponseReceived::<Identity>,
                remove_WebResourceResponseReceived: remove_WebResourceResponseReceived::<Identity>,
                NavigateWithWebResourceRequest: NavigateWithWebResourceRequest::<Identity>,
                add_DOMContentLoaded: add_DOMContentLoaded::<Identity>,
                remove_DOMContentLoaded: remove_DOMContentLoaded::<Identity>,
                CookieManager: CookieManager::<Identity>,
                Environment: Environment::<Identity>,
            }
        }
    }
    struct ICoreWebView2_2_ImplVtbl<T: ICoreWebView2_2_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2_2_Impl> ICoreWebView2_2_ImplVtbl<T> {
        const VTABLE: ICoreWebView2_2_Vtbl = ICoreWebView2_2_Vtbl::new::<T>();
    }
    impl ICoreWebView2_2 {
        pub fn new<'a, T: ICoreWebView2_2_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2_2_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2_20, ICoreWebView2_20_Vtbl);
    impl ICoreWebView2_20 {
        pub unsafe fn FrameId(&self, value: u32) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).FrameId)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2_20_Vtbl {
        pub FrameId:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2_20_Impl {
        fn FrameId(&self, value: u32) -> windows_core::Result<()>;
    }
    impl ICoreWebView2_20_Vtbl {
        pub const fn new<Identity: ICoreWebView2_20_Impl>() -> Self {
            unsafe extern "system" fn FrameId<Identity: ICoreWebView2_20_Impl>(
                this: *mut core::ffi::c_void,
                value: u32,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_20_Impl::FrameId(this, core::mem::transmute_copy(&value)).into()
                }
            }
            Self {
                FrameId: FrameId::<Identity>,
            }
        }
    }
    struct ICoreWebView2_20_ImplVtbl<T: ICoreWebView2_20_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2_20_Impl> ICoreWebView2_20_ImplVtbl<T> {
        const VTABLE: ICoreWebView2_20_Vtbl = ICoreWebView2_20_Vtbl::new::<T>();
    }
    impl ICoreWebView2_20 {
        pub fn new<'a, T: ICoreWebView2_20_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2_20_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2_21, ICoreWebView2_21_Vtbl);
    impl ICoreWebView2_21 {
        pub unsafe fn ExecuteScriptWithResult<P0, P1>(
            &self,
            javascript: P0,
            handler: P1,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
            P1: windows_core::Param<ICoreWebView2ExecuteScriptWithResultCompletedHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ExecuteScriptWithResult)(
                    windows_core::Interface::as_raw(self),
                    javascript.param().abi(),
                    handler.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2_21_Vtbl {
        pub ExecuteScriptWithResult: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2_21_Impl {
        fn ExecuteScriptWithResult(
            &self,
            javascript: &windows_core::PCWSTR,
            handler: windows_core::Ref<'_, ICoreWebView2ExecuteScriptWithResultCompletedHandler>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2_21_Vtbl {
        pub const fn new<Identity: ICoreWebView2_21_Impl>() -> Self {
            unsafe extern "system" fn ExecuteScriptWithResult<Identity: ICoreWebView2_21_Impl>(
                this: *mut core::ffi::c_void,
                javascript: windows_core::PCWSTR,
                handler: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_21_Impl::ExecuteScriptWithResult(
                        this,
                        core::mem::transmute(&javascript),
                        core::mem::transmute_copy(&handler),
                    )
                    .into()
                }
            }
            Self {
                ExecuteScriptWithResult: ExecuteScriptWithResult::<Identity>,
            }
        }
    }
    struct ICoreWebView2_21_ImplVtbl<T: ICoreWebView2_21_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2_21_Impl> ICoreWebView2_21_ImplVtbl<T> {
        const VTABLE: ICoreWebView2_21_Vtbl = ICoreWebView2_21_Vtbl::new::<T>();
    }
    impl ICoreWebView2_21 {
        pub fn new<'a, T: ICoreWebView2_21_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2_21_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2_22, ICoreWebView2_22_Vtbl);
    impl ICoreWebView2_22 {
        pub unsafe fn AddWebResourceRequestedFilterWithRequestSourceKinds<P0>(
            &self,
            uri: P0,
            resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
            requestsourcekinds: COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self)
                    .AddWebResourceRequestedFilterWithRequestSourceKinds)(
                    windows_core::Interface::as_raw(self),
                    uri.param().abi(),
                    resourcecontext,
                    requestsourcekinds,
                )
                .ok()
            }
        }
        pub unsafe fn RemoveWebResourceRequestedFilterWithRequestSourceKinds<P0>(
            &self,
            uri: P0,
            resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
            requestsourcekinds: COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self)
                    .RemoveWebResourceRequestedFilterWithRequestSourceKinds)(
                    windows_core::Interface::as_raw(self),
                    uri.param().abi(),
                    resourcecontext,
                    requestsourcekinds,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2_22_Vtbl {
        pub AddWebResourceRequestedFilterWithRequestSourceKinds:
            unsafe extern "system" fn(
                *mut core::ffi::c_void,
                windows_core::PCWSTR,
                COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
                COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS,
            ) -> windows_core::HRESULT,
        pub RemoveWebResourceRequestedFilterWithRequestSourceKinds:
            unsafe extern "system" fn(
                *mut core::ffi::c_void,
                windows_core::PCWSTR,
                COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
                COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS,
            ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2_22_Impl {
        fn AddWebResourceRequestedFilterWithRequestSourceKinds(
            &self,
            uri: &windows_core::PCWSTR,
            resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
            requestsourcekinds: COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS,
        ) -> windows_core::Result<()>;
        fn RemoveWebResourceRequestedFilterWithRequestSourceKinds(
            &self,
            uri: &windows_core::PCWSTR,
            resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
            requestsourcekinds: COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2_22_Vtbl {
        pub const fn new<Identity: ICoreWebView2_22_Impl>() -> Self {
            unsafe extern "system" fn AddWebResourceRequestedFilterWithRequestSourceKinds<
                Identity: ICoreWebView2_22_Impl,
            >(
                this: *mut core::ffi::c_void,
                uri: windows_core::PCWSTR,
                resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
                requestsourcekinds: COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_22_Impl::AddWebResourceRequestedFilterWithRequestSourceKinds(
                        this,
                        core::mem::transmute(&uri),
                        core::mem::transmute_copy(&resourcecontext),
                        core::mem::transmute_copy(&requestsourcekinds),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn RemoveWebResourceRequestedFilterWithRequestSourceKinds<
                Identity: ICoreWebView2_22_Impl,
            >(
                this: *mut core::ffi::c_void,
                uri: windows_core::PCWSTR,
                resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
                requestsourcekinds: COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_22_Impl::RemoveWebResourceRequestedFilterWithRequestSourceKinds(
                        this,
                        core::mem::transmute(&uri),
                        core::mem::transmute_copy(&resourcecontext),
                        core::mem::transmute_copy(&requestsourcekinds),
                    )
                    .into()
                }
            }
            Self {
                AddWebResourceRequestedFilterWithRequestSourceKinds:
                    AddWebResourceRequestedFilterWithRequestSourceKinds::<Identity>,
                RemoveWebResourceRequestedFilterWithRequestSourceKinds:
                    RemoveWebResourceRequestedFilterWithRequestSourceKinds::<Identity>,
            }
        }
    }
    struct ICoreWebView2_22_ImplVtbl<T: ICoreWebView2_22_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2_22_Impl> ICoreWebView2_22_ImplVtbl<T> {
        const VTABLE: ICoreWebView2_22_Vtbl = ICoreWebView2_22_Vtbl::new::<T>();
    }
    impl ICoreWebView2_22 {
        pub fn new<'a, T: ICoreWebView2_22_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2_22_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2_23, ICoreWebView2_23_Vtbl);
    impl ICoreWebView2_23 {
        pub unsafe fn PostWebMessageAsJsonWithAdditionalObjects<P0, P1>(
            &self,
            webmessageasjson: P0,
            additionalobjects: P1,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
            P1: windows_core::Param<ICoreWebView2ObjectCollectionView>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).PostWebMessageAsJsonWithAdditionalObjects)(
                    windows_core::Interface::as_raw(self),
                    webmessageasjson.param().abi(),
                    additionalobjects.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2_23_Vtbl {
        pub PostWebMessageAsJsonWithAdditionalObjects:
            unsafe extern "system" fn(
                *mut core::ffi::c_void,
                windows_core::PCWSTR,
                *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2_23_Impl {
        fn PostWebMessageAsJsonWithAdditionalObjects(
            &self,
            webmessageasjson: &windows_core::PCWSTR,
            additionalobjects: windows_core::Ref<'_, ICoreWebView2ObjectCollectionView>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2_23_Vtbl {
        pub const fn new<Identity: ICoreWebView2_23_Impl>() -> Self {
            unsafe extern "system" fn PostWebMessageAsJsonWithAdditionalObjects<
                Identity: ICoreWebView2_23_Impl,
            >(
                this: *mut core::ffi::c_void,
                webmessageasjson: windows_core::PCWSTR,
                additionalobjects: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_23_Impl::PostWebMessageAsJsonWithAdditionalObjects(
                        this,
                        core::mem::transmute(&webmessageasjson),
                        core::mem::transmute_copy(&additionalobjects),
                    )
                    .into()
                }
            }
            Self {
                PostWebMessageAsJsonWithAdditionalObjects:
                    PostWebMessageAsJsonWithAdditionalObjects::<Identity>,
            }
        }
    }
    struct ICoreWebView2_23_ImplVtbl<T: ICoreWebView2_23_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2_23_Impl> ICoreWebView2_23_ImplVtbl<T> {
        const VTABLE: ICoreWebView2_23_Vtbl = ICoreWebView2_23_Vtbl::new::<T>();
    }
    impl ICoreWebView2_23 {
        pub fn new<'a, T: ICoreWebView2_23_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2_23_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2_24, ICoreWebView2_24_Vtbl);
    impl ICoreWebView2_24 {
        pub unsafe fn add_NotificationReceived<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2NotificationReceivedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_NotificationReceived)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_NotificationReceived(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_NotificationReceived)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2_24_Vtbl {
        pub add_NotificationReceived: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_NotificationReceived:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2_24_Impl {
        fn add_NotificationReceived(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2NotificationReceivedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_NotificationReceived(&self, token: i64) -> windows_core::Result<()>;
    }
    impl ICoreWebView2_24_Vtbl {
        pub const fn new<Identity: ICoreWebView2_24_Impl>() -> Self {
            unsafe extern "system" fn add_NotificationReceived<Identity: ICoreWebView2_24_Impl>(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_24_Impl::add_NotificationReceived(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_NotificationReceived<
                Identity: ICoreWebView2_24_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_24_Impl::remove_NotificationReceived(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            Self {
                add_NotificationReceived: add_NotificationReceived::<Identity>,
                remove_NotificationReceived: remove_NotificationReceived::<Identity>,
            }
        }
    }
    struct ICoreWebView2_24_ImplVtbl<T: ICoreWebView2_24_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2_24_Impl> ICoreWebView2_24_ImplVtbl<T> {
        const VTABLE: ICoreWebView2_24_Vtbl = ICoreWebView2_24_Vtbl::new::<T>();
    }
    impl ICoreWebView2_24 {
        pub fn new<'a, T: ICoreWebView2_24_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2_24_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2_25, ICoreWebView2_25_Vtbl);
    impl ICoreWebView2_25 {
        pub unsafe fn add_SaveAsUIShowing<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2SaveAsUIShowingEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_SaveAsUIShowing)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_SaveAsUIShowing(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_SaveAsUIShowing)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn ShowSaveAsUI<P0>(&self, handler: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2ShowSaveAsUICompletedHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ShowSaveAsUI)(
                    windows_core::Interface::as_raw(self),
                    handler.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2_25_Vtbl {
        pub add_SaveAsUIShowing: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_SaveAsUIShowing:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub ShowSaveAsUI: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2_25_Impl {
        fn add_SaveAsUIShowing(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2SaveAsUIShowingEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_SaveAsUIShowing(&self, token: i64) -> windows_core::Result<()>;
        fn ShowSaveAsUI(
            &self,
            handler: windows_core::Ref<'_, ICoreWebView2ShowSaveAsUICompletedHandler>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2_25_Vtbl {
        pub const fn new<Identity: ICoreWebView2_25_Impl>() -> Self {
            unsafe extern "system" fn add_SaveAsUIShowing<Identity: ICoreWebView2_25_Impl>(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_25_Impl::add_SaveAsUIShowing(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_SaveAsUIShowing<Identity: ICoreWebView2_25_Impl>(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_25_Impl::remove_SaveAsUIShowing(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ShowSaveAsUI<Identity: ICoreWebView2_25_Impl>(
                this: *mut core::ffi::c_void,
                handler: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_25_Impl::ShowSaveAsUI(this, core::mem::transmute_copy(&handler))
                        .into()
                }
            }
            Self {
                add_SaveAsUIShowing: add_SaveAsUIShowing::<Identity>,
                remove_SaveAsUIShowing: remove_SaveAsUIShowing::<Identity>,
                ShowSaveAsUI: ShowSaveAsUI::<Identity>,
            }
        }
    }
    struct ICoreWebView2_25_ImplVtbl<T: ICoreWebView2_25_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2_25_Impl> ICoreWebView2_25_ImplVtbl<T> {
        const VTABLE: ICoreWebView2_25_Vtbl = ICoreWebView2_25_Vtbl::new::<T>();
    }
    impl ICoreWebView2_25 {
        pub fn new<'a, T: ICoreWebView2_25_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2_25_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2_26, ICoreWebView2_26_Vtbl);
    impl ICoreWebView2_26 {
        pub unsafe fn add_SaveFileSecurityCheckStarting<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2SaveFileSecurityCheckStartingEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_SaveFileSecurityCheckStarting)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_SaveFileSecurityCheckStarting(
            &self,
            token: i64,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_SaveFileSecurityCheckStarting)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2_26_Vtbl {
        pub add_SaveFileSecurityCheckStarting: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        )
            -> windows_core::HRESULT,
        pub remove_SaveFileSecurityCheckStarting:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2_26_Impl {
        fn add_SaveFileSecurityCheckStarting(
            &self,
            eventhandler: windows_core::Ref<
                '_,
                ICoreWebView2SaveFileSecurityCheckStartingEventHandler,
            >,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_SaveFileSecurityCheckStarting(&self, token: i64) -> windows_core::Result<()>;
    }
    impl ICoreWebView2_26_Vtbl {
        pub const fn new<Identity: ICoreWebView2_26_Impl>() -> Self {
            unsafe extern "system" fn add_SaveFileSecurityCheckStarting<
                Identity: ICoreWebView2_26_Impl,
            >(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_26_Impl::add_SaveFileSecurityCheckStarting(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_SaveFileSecurityCheckStarting<
                Identity: ICoreWebView2_26_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_26_Impl::remove_SaveFileSecurityCheckStarting(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            Self {
                add_SaveFileSecurityCheckStarting: add_SaveFileSecurityCheckStarting::<Identity>,
                remove_SaveFileSecurityCheckStarting: remove_SaveFileSecurityCheckStarting::<
                    Identity,
                >,
            }
        }
    }
    struct ICoreWebView2_26_ImplVtbl<T: ICoreWebView2_26_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2_26_Impl> ICoreWebView2_26_ImplVtbl<T> {
        const VTABLE: ICoreWebView2_26_Vtbl = ICoreWebView2_26_Vtbl::new::<T>();
    }
    impl ICoreWebView2_26 {
        pub fn new<'a, T: ICoreWebView2_26_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2_26_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2_27, ICoreWebView2_27_Vtbl);
    impl ICoreWebView2_27 {
        pub unsafe fn add_ScreenCaptureStarting<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2ScreenCaptureStartingEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_ScreenCaptureStarting)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_ScreenCaptureStarting(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_ScreenCaptureStarting)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2_27_Vtbl {
        pub add_ScreenCaptureStarting: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_ScreenCaptureStarting:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2_27_Impl {
        fn add_ScreenCaptureStarting(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2ScreenCaptureStartingEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_ScreenCaptureStarting(&self, token: i64) -> windows_core::Result<()>;
    }
    impl ICoreWebView2_27_Vtbl {
        pub const fn new<Identity: ICoreWebView2_27_Impl>() -> Self {
            unsafe extern "system" fn add_ScreenCaptureStarting<Identity: ICoreWebView2_27_Impl>(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_27_Impl::add_ScreenCaptureStarting(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_ScreenCaptureStarting<
                Identity: ICoreWebView2_27_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_27_Impl::remove_ScreenCaptureStarting(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            Self {
                add_ScreenCaptureStarting: add_ScreenCaptureStarting::<Identity>,
                remove_ScreenCaptureStarting: remove_ScreenCaptureStarting::<Identity>,
            }
        }
    }
    struct ICoreWebView2_27_ImplVtbl<T: ICoreWebView2_27_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2_27_Impl> ICoreWebView2_27_ImplVtbl<T> {
        const VTABLE: ICoreWebView2_27_Vtbl = ICoreWebView2_27_Vtbl::new::<T>();
    }
    impl ICoreWebView2_27 {
        pub fn new<'a, T: ICoreWebView2_27_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2_27_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2_3, ICoreWebView2_3_Vtbl);
    impl ICoreWebView2_3 {
        pub unsafe fn TrySuspend<P0>(&self, handler: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2TrySuspendCompletedHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).TrySuspend)(
                    windows_core::Interface::as_raw(self),
                    handler.param().abi(),
                )
                .ok()
            }
        }
        pub unsafe fn Resume(&self) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).Resume)(windows_core::Interface::as_raw(
                    self,
                ))
                .ok()
            }
        }
        pub unsafe fn IsSuspended(&self, issuspended: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsSuspended)(
                    windows_core::Interface::as_raw(self),
                    issuspended.into(),
                )
                .ok()
            }
        }
        pub unsafe fn SetVirtualHostNameToFolderMapping<P0, P1>(
            &self,
            hostname: P0,
            folderpath: P1,
            accesskind: COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
            P1: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).SetVirtualHostNameToFolderMapping)(
                    windows_core::Interface::as_raw(self),
                    hostname.param().abi(),
                    folderpath.param().abi(),
                    accesskind,
                )
                .ok()
            }
        }
        pub unsafe fn ClearVirtualHostNameToFolderMapping<P0>(
            &self,
            hostname: P0,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).ClearVirtualHostNameToFolderMapping)(
                    windows_core::Interface::as_raw(self),
                    hostname.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2_3_Vtbl {
        pub TrySuspend: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Resume: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub IsSuspended: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub SetVirtualHostNameToFolderMapping: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            windows_core::PCWSTR,
            COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND,
        )
            -> windows_core::HRESULT,
        pub ClearVirtualHostNameToFolderMapping: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        )
            -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2_3_Impl {
        fn TrySuspend(
            &self,
            handler: windows_core::Ref<'_, ICoreWebView2TrySuspendCompletedHandler>,
        ) -> windows_core::Result<()>;
        fn Resume(&self) -> windows_core::Result<()>;
        fn IsSuspended(&self, issuspended: windows_core::BOOL) -> windows_core::Result<()>;
        fn SetVirtualHostNameToFolderMapping(
            &self,
            hostname: &windows_core::PCWSTR,
            folderpath: &windows_core::PCWSTR,
            accesskind: COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND,
        ) -> windows_core::Result<()>;
        fn ClearVirtualHostNameToFolderMapping(
            &self,
            hostname: &windows_core::PCWSTR,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2_3_Vtbl {
        pub const fn new<Identity: ICoreWebView2_3_Impl>() -> Self {
            unsafe extern "system" fn TrySuspend<Identity: ICoreWebView2_3_Impl>(
                this: *mut core::ffi::c_void,
                handler: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_3_Impl::TrySuspend(this, core::mem::transmute_copy(&handler))
                        .into()
                }
            }
            unsafe extern "system" fn Resume<Identity: ICoreWebView2_3_Impl>(
                this: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_3_Impl::Resume(this).into()
                }
            }
            unsafe extern "system" fn IsSuspended<Identity: ICoreWebView2_3_Impl>(
                this: *mut core::ffi::c_void,
                issuspended: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_3_Impl::IsSuspended(this, core::mem::transmute_copy(&issuspended))
                        .into()
                }
            }
            unsafe extern "system" fn SetVirtualHostNameToFolderMapping<
                Identity: ICoreWebView2_3_Impl,
            >(
                this: *mut core::ffi::c_void,
                hostname: windows_core::PCWSTR,
                folderpath: windows_core::PCWSTR,
                accesskind: COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_3_Impl::SetVirtualHostNameToFolderMapping(
                        this,
                        core::mem::transmute(&hostname),
                        core::mem::transmute(&folderpath),
                        core::mem::transmute_copy(&accesskind),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn ClearVirtualHostNameToFolderMapping<
                Identity: ICoreWebView2_3_Impl,
            >(
                this: *mut core::ffi::c_void,
                hostname: windows_core::PCWSTR,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_3_Impl::ClearVirtualHostNameToFolderMapping(
                        this,
                        core::mem::transmute(&hostname),
                    )
                    .into()
                }
            }
            Self {
                TrySuspend: TrySuspend::<Identity>,
                Resume: Resume::<Identity>,
                IsSuspended: IsSuspended::<Identity>,
                SetVirtualHostNameToFolderMapping: SetVirtualHostNameToFolderMapping::<Identity>,
                ClearVirtualHostNameToFolderMapping: ClearVirtualHostNameToFolderMapping::<Identity>,
            }
        }
    }
    struct ICoreWebView2_3_ImplVtbl<T: ICoreWebView2_3_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2_3_Impl> ICoreWebView2_3_ImplVtbl<T> {
        const VTABLE: ICoreWebView2_3_Vtbl = ICoreWebView2_3_Vtbl::new::<T>();
    }
    impl ICoreWebView2_3 {
        pub fn new<'a, T: ICoreWebView2_3_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2_3_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2_4, ICoreWebView2_4_Vtbl);
    impl ICoreWebView2_4 {
        pub unsafe fn add_FrameCreated<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2FrameCreatedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_FrameCreated)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_FrameCreated(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_FrameCreated)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn add_DownloadStarting<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2DownloadStartingEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_DownloadStarting)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_DownloadStarting(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_DownloadStarting)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2_4_Vtbl {
        pub add_FrameCreated: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_FrameCreated:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub add_DownloadStarting: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_DownloadStarting:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2_4_Impl {
        fn add_FrameCreated(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2FrameCreatedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_FrameCreated(&self, token: i64) -> windows_core::Result<()>;
        fn add_DownloadStarting(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2DownloadStartingEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_DownloadStarting(&self, token: i64) -> windows_core::Result<()>;
    }
    impl ICoreWebView2_4_Vtbl {
        pub const fn new<Identity: ICoreWebView2_4_Impl>() -> Self {
            unsafe extern "system" fn add_FrameCreated<Identity: ICoreWebView2_4_Impl>(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_4_Impl::add_FrameCreated(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_FrameCreated<Identity: ICoreWebView2_4_Impl>(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_4_Impl::remove_FrameCreated(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn add_DownloadStarting<Identity: ICoreWebView2_4_Impl>(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_4_Impl::add_DownloadStarting(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_DownloadStarting<Identity: ICoreWebView2_4_Impl>(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_4_Impl::remove_DownloadStarting(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            Self {
                add_FrameCreated: add_FrameCreated::<Identity>,
                remove_FrameCreated: remove_FrameCreated::<Identity>,
                add_DownloadStarting: add_DownloadStarting::<Identity>,
                remove_DownloadStarting: remove_DownloadStarting::<Identity>,
            }
        }
    }
    struct ICoreWebView2_4_ImplVtbl<T: ICoreWebView2_4_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2_4_Impl> ICoreWebView2_4_ImplVtbl<T> {
        const VTABLE: ICoreWebView2_4_Vtbl = ICoreWebView2_4_Vtbl::new::<T>();
    }
    impl ICoreWebView2_4 {
        pub fn new<'a, T: ICoreWebView2_4_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2_4_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2_5, ICoreWebView2_5_Vtbl);
    impl ICoreWebView2_5 {
        pub unsafe fn add_ClientCertificateRequested<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2ClientCertificateRequestedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_ClientCertificateRequested)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_ClientCertificateRequested(
            &self,
            token: i64,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_ClientCertificateRequested)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2_5_Vtbl {
        pub add_ClientCertificateRequested: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        )
            -> windows_core::HRESULT,
        pub remove_ClientCertificateRequested:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2_5_Impl {
        fn add_ClientCertificateRequested(
            &self,
            eventhandler: windows_core::Ref<
                '_,
                ICoreWebView2ClientCertificateRequestedEventHandler,
            >,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_ClientCertificateRequested(&self, token: i64) -> windows_core::Result<()>;
    }
    impl ICoreWebView2_5_Vtbl {
        pub const fn new<Identity: ICoreWebView2_5_Impl>() -> Self {
            unsafe extern "system" fn add_ClientCertificateRequested<
                Identity: ICoreWebView2_5_Impl,
            >(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_5_Impl::add_ClientCertificateRequested(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_ClientCertificateRequested<
                Identity: ICoreWebView2_5_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_5_Impl::remove_ClientCertificateRequested(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            Self {
                add_ClientCertificateRequested: add_ClientCertificateRequested::<Identity>,
                remove_ClientCertificateRequested: remove_ClientCertificateRequested::<Identity>,
            }
        }
    }
    struct ICoreWebView2_5_ImplVtbl<T: ICoreWebView2_5_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2_5_Impl> ICoreWebView2_5_ImplVtbl<T> {
        const VTABLE: ICoreWebView2_5_Vtbl = ICoreWebView2_5_Vtbl::new::<T>();
    }
    impl ICoreWebView2_5 {
        pub fn new<'a, T: ICoreWebView2_5_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2_5_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2_6, ICoreWebView2_6_Vtbl);
    impl ICoreWebView2_6 {
        pub unsafe fn OpenTaskManagerWindow(&self) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).OpenTaskManagerWindow)(
                    windows_core::Interface::as_raw(self),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2_6_Vtbl {
        pub OpenTaskManagerWindow:
            unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2_6_Impl {
        fn OpenTaskManagerWindow(&self) -> windows_core::Result<()>;
    }
    impl ICoreWebView2_6_Vtbl {
        pub const fn new<Identity: ICoreWebView2_6_Impl>() -> Self {
            unsafe extern "system" fn OpenTaskManagerWindow<Identity: ICoreWebView2_6_Impl>(
                this: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_6_Impl::OpenTaskManagerWindow(this).into()
                }
            }
            Self {
                OpenTaskManagerWindow: OpenTaskManagerWindow::<Identity>,
            }
        }
    }
    struct ICoreWebView2_6_ImplVtbl<T: ICoreWebView2_6_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2_6_Impl> ICoreWebView2_6_ImplVtbl<T> {
        const VTABLE: ICoreWebView2_6_Vtbl = ICoreWebView2_6_Vtbl::new::<T>();
    }
    impl ICoreWebView2_6 {
        pub fn new<'a, T: ICoreWebView2_6_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2_6_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2_7, ICoreWebView2_7_Vtbl);
    impl ICoreWebView2_7 {
        pub unsafe fn PrintToPdf<P0, P1, P2>(
            &self,
            resultfilepath: P0,
            printsettings: P1,
            handler: P2,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
            P1: windows_core::Param<ICoreWebView2PrintSettings>,
            P2: windows_core::Param<ICoreWebView2PrintToPdfCompletedHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).PrintToPdf)(
                    windows_core::Interface::as_raw(self),
                    resultfilepath.param().abi(),
                    printsettings.param().abi(),
                    handler.param().abi(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2_7_Vtbl {
        pub PrintToPdf: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2_7_Impl {
        fn PrintToPdf(
            &self,
            resultfilepath: &windows_core::PCWSTR,
            printsettings: windows_core::Ref<'_, ICoreWebView2PrintSettings>,
            handler: windows_core::Ref<'_, ICoreWebView2PrintToPdfCompletedHandler>,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2_7_Vtbl {
        pub const fn new<Identity: ICoreWebView2_7_Impl>() -> Self {
            unsafe extern "system" fn PrintToPdf<Identity: ICoreWebView2_7_Impl>(
                this: *mut core::ffi::c_void,
                resultfilepath: windows_core::PCWSTR,
                printsettings: *mut core::ffi::c_void,
                handler: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_7_Impl::PrintToPdf(
                        this,
                        core::mem::transmute(&resultfilepath),
                        core::mem::transmute_copy(&printsettings),
                        core::mem::transmute_copy(&handler),
                    )
                    .into()
                }
            }
            Self {
                PrintToPdf: PrintToPdf::<Identity>,
            }
        }
    }
    struct ICoreWebView2_7_ImplVtbl<T: ICoreWebView2_7_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2_7_Impl> ICoreWebView2_7_ImplVtbl<T> {
        const VTABLE: ICoreWebView2_7_Vtbl = ICoreWebView2_7_Vtbl::new::<T>();
    }
    impl ICoreWebView2_7 {
        pub fn new<'a, T: ICoreWebView2_7_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2_7_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2_8, ICoreWebView2_8_Vtbl);
    impl ICoreWebView2_8 {
        pub unsafe fn add_IsMutedChanged<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2IsMutedChangedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_IsMutedChanged)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_IsMutedChanged(&self, token: i64) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_IsMutedChanged)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn IsMuted(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsMuted)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn IsMuted2(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsMuted2)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn add_IsDocumentPlayingAudioChanged<P0>(
            &self,
            eventhandler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2IsDocumentPlayingAudioChangedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_IsDocumentPlayingAudioChanged)(
                    windows_core::Interface::as_raw(self),
                    eventhandler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_IsDocumentPlayingAudioChanged(
            &self,
            token: i64,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_IsDocumentPlayingAudioChanged)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn IsDocumentPlayingAudio(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsDocumentPlayingAudio)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2_8_Vtbl {
        pub add_IsMutedChanged: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        ) -> windows_core::HRESULT,
        pub remove_IsMutedChanged:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub IsMuted: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub IsMuted2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
        pub add_IsDocumentPlayingAudioChanged: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            i64,
        )
            -> windows_core::HRESULT,
        pub remove_IsDocumentPlayingAudioChanged:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub IsDocumentPlayingAudio: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        ) -> windows_core::HRESULT,
    }
    pub trait ICoreWebView2_8_Impl {
        fn add_IsMutedChanged(
            &self,
            eventhandler: windows_core::Ref<'_, ICoreWebView2IsMutedChangedEventHandler>,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_IsMutedChanged(&self, token: i64) -> windows_core::Result<()>;
        fn IsMuted(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn IsMuted2(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
        fn add_IsDocumentPlayingAudioChanged(
            &self,
            eventhandler: windows_core::Ref<
                '_,
                ICoreWebView2IsDocumentPlayingAudioChangedEventHandler,
            >,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_IsDocumentPlayingAudioChanged(&self, token: i64) -> windows_core::Result<()>;
        fn IsDocumentPlayingAudio(&self, value: windows_core::BOOL) -> windows_core::Result<()>;
    }
    impl ICoreWebView2_8_Vtbl {
        pub const fn new<Identity: ICoreWebView2_8_Impl>() -> Self {
            unsafe extern "system" fn add_IsMutedChanged<Identity: ICoreWebView2_8_Impl>(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_8_Impl::add_IsMutedChanged(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_IsMutedChanged<Identity: ICoreWebView2_8_Impl>(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_8_Impl::remove_IsMutedChanged(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsMuted<Identity: ICoreWebView2_8_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_8_Impl::IsMuted(this, core::mem::transmute_copy(&value)).into()
                }
            }
            unsafe extern "system" fn IsMuted2<Identity: ICoreWebView2_8_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_8_Impl::IsMuted2(this, core::mem::transmute_copy(&value)).into()
                }
            }
            unsafe extern "system" fn add_IsDocumentPlayingAudioChanged<
                Identity: ICoreWebView2_8_Impl,
            >(
                this: *mut core::ffi::c_void,
                eventhandler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_8_Impl::add_IsDocumentPlayingAudioChanged(
                        this,
                        core::mem::transmute_copy(&eventhandler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_IsDocumentPlayingAudioChanged<
                Identity: ICoreWebView2_8_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_8_Impl::remove_IsDocumentPlayingAudioChanged(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsDocumentPlayingAudio<Identity: ICoreWebView2_8_Impl>(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_8_Impl::IsDocumentPlayingAudio(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                add_IsMutedChanged: add_IsMutedChanged::<Identity>,
                remove_IsMutedChanged: remove_IsMutedChanged::<Identity>,
                IsMuted: IsMuted::<Identity>,
                IsMuted2: IsMuted2::<Identity>,
                add_IsDocumentPlayingAudioChanged: add_IsDocumentPlayingAudioChanged::<Identity>,
                remove_IsDocumentPlayingAudioChanged: remove_IsDocumentPlayingAudioChanged::<
                    Identity,
                >,
                IsDocumentPlayingAudio: IsDocumentPlayingAudio::<Identity>,
            }
        }
    }
    struct ICoreWebView2_8_ImplVtbl<T: ICoreWebView2_8_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2_8_Impl> ICoreWebView2_8_ImplVtbl<T> {
        const VTABLE: ICoreWebView2_8_Vtbl = ICoreWebView2_8_Vtbl::new::<T>();
    }
    impl ICoreWebView2_8 {
        pub fn new<'a, T: ICoreWebView2_8_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2_8_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
    windows_core::imp::define_interface!(ICoreWebView2_9, ICoreWebView2_9_Vtbl);
    impl ICoreWebView2_9 {
        pub unsafe fn add_IsDefaultDownloadDialogOpenChanged<P0>(
            &self,
            handler: P0,
            token: i64,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler>,
        {
            unsafe {
                (windows_core::Interface::vtable(self).add_IsDefaultDownloadDialogOpenChanged)(
                    windows_core::Interface::as_raw(self),
                    handler.param().abi(),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn remove_IsDefaultDownloadDialogOpenChanged(
            &self,
            token: i64,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).remove_IsDefaultDownloadDialogOpenChanged)(
                    windows_core::Interface::as_raw(self),
                    token,
                )
                .ok()
            }
        }
        pub unsafe fn IsDefaultDownloadDialogOpen(&self, value: bool) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).IsDefaultDownloadDialogOpen)(
                    windows_core::Interface::as_raw(self),
                    value.into(),
                )
                .ok()
            }
        }
        pub unsafe fn OpenDefaultDownloadDialog(&self) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).OpenDefaultDownloadDialog)(
                    windows_core::Interface::as_raw(self),
                )
                .ok()
            }
        }
        pub unsafe fn CloseDefaultDownloadDialog(&self) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).CloseDefaultDownloadDialog)(
                    windows_core::Interface::as_raw(self),
                )
                .ok()
            }
        }
        pub unsafe fn DefaultDownloadDialogCornerAlignment(
            &self,
            value: COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).DefaultDownloadDialogCornerAlignment)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
        pub unsafe fn DefaultDownloadDialogCornerAlignment2(
            &self,
            value: COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT,
        ) -> windows_core::Result<()> {
            unsafe {
                (windows_core::Interface::vtable(self).DefaultDownloadDialogCornerAlignment2)(
                    windows_core::Interface::as_raw(self),
                    value,
                )
                .ok()
            }
        }
    }
    #[repr(C)]
    #[doc(hidden)]
    pub struct ICoreWebView2_9_Vtbl {
        pub add_IsDefaultDownloadDialogOpenChanged:
            unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::ffi::c_void,
                i64,
            ) -> windows_core::HRESULT,
        pub remove_IsDefaultDownloadDialogOpenChanged:
            unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
        pub IsDefaultDownloadDialogOpen: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::BOOL,
        )
            -> windows_core::HRESULT,
        pub OpenDefaultDownloadDialog:
            unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub CloseDefaultDownloadDialog:
            unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub DefaultDownloadDialogCornerAlignment:
            unsafe extern "system" fn(
                *mut core::ffi::c_void,
                COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT,
            ) -> windows_core::HRESULT,
        pub DefaultDownloadDialogCornerAlignment2:
            unsafe extern "system" fn(
                *mut core::ffi::c_void,
                COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT,
            ) -> windows_core::HRESULT,
        DefaultDownloadDialogMargin: usize,
        DefaultDownloadDialogMargin2: usize,
    }
    pub trait ICoreWebView2_9_Impl {
        fn add_IsDefaultDownloadDialogOpenChanged(
            &self,
            handler: windows_core::Ref<
                '_,
                ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler,
            >,
            token: i64,
        ) -> windows_core::Result<()>;
        fn remove_IsDefaultDownloadDialogOpenChanged(&self, token: i64)
            -> windows_core::Result<()>;
        fn IsDefaultDownloadDialogOpen(
            &self,
            value: windows_core::BOOL,
        ) -> windows_core::Result<()>;
        fn OpenDefaultDownloadDialog(&self) -> windows_core::Result<()>;
        fn CloseDefaultDownloadDialog(&self) -> windows_core::Result<()>;
        fn DefaultDownloadDialogCornerAlignment(
            &self,
            value: COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT,
        ) -> windows_core::Result<()>;
        fn DefaultDownloadDialogCornerAlignment2(
            &self,
            value: COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT,
        ) -> windows_core::Result<()>;
    }
    impl ICoreWebView2_9_Vtbl {
        pub const fn new<Identity: ICoreWebView2_9_Impl>() -> Self {
            unsafe extern "system" fn add_IsDefaultDownloadDialogOpenChanged<
                Identity: ICoreWebView2_9_Impl,
            >(
                this: *mut core::ffi::c_void,
                handler: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_9_Impl::add_IsDefaultDownloadDialogOpenChanged(
                        this,
                        core::mem::transmute_copy(&handler),
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn remove_IsDefaultDownloadDialogOpenChanged<
                Identity: ICoreWebView2_9_Impl,
            >(
                this: *mut core::ffi::c_void,
                token: i64,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_9_Impl::remove_IsDefaultDownloadDialogOpenChanged(
                        this,
                        core::mem::transmute_copy(&token),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn IsDefaultDownloadDialogOpen<
                Identity: ICoreWebView2_9_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: windows_core::BOOL,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_9_Impl::IsDefaultDownloadDialogOpen(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn OpenDefaultDownloadDialog<Identity: ICoreWebView2_9_Impl>(
                this: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_9_Impl::OpenDefaultDownloadDialog(this).into()
                }
            }
            unsafe extern "system" fn CloseDefaultDownloadDialog<Identity: ICoreWebView2_9_Impl>(
                this: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_9_Impl::CloseDefaultDownloadDialog(this).into()
                }
            }
            unsafe extern "system" fn DefaultDownloadDialogCornerAlignment<
                Identity: ICoreWebView2_9_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_9_Impl::DefaultDownloadDialogCornerAlignment(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            unsafe extern "system" fn DefaultDownloadDialogCornerAlignment2<
                Identity: ICoreWebView2_9_Impl,
            >(
                this: *mut core::ffi::c_void,
                value: COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT,
            ) -> windows_core::HRESULT {
                unsafe {
                    let this =
                        (this as *mut *mut core::ffi::c_void) as *const windows_core::ScopedHeap;
                    let this = &*((*this).this as *const Identity);
                    ICoreWebView2_9_Impl::DefaultDownloadDialogCornerAlignment2(
                        this,
                        core::mem::transmute_copy(&value),
                    )
                    .into()
                }
            }
            Self {
                add_IsDefaultDownloadDialogOpenChanged: add_IsDefaultDownloadDialogOpenChanged::<
                    Identity,
                >,
                remove_IsDefaultDownloadDialogOpenChanged:
                    remove_IsDefaultDownloadDialogOpenChanged::<Identity>,
                IsDefaultDownloadDialogOpen: IsDefaultDownloadDialogOpen::<Identity>,
                OpenDefaultDownloadDialog: OpenDefaultDownloadDialog::<Identity>,
                CloseDefaultDownloadDialog: CloseDefaultDownloadDialog::<Identity>,
                DefaultDownloadDialogCornerAlignment: DefaultDownloadDialogCornerAlignment::<
                    Identity,
                >,
                DefaultDownloadDialogCornerAlignment2: DefaultDownloadDialogCornerAlignment2::<
                    Identity,
                >,
                DefaultDownloadDialogMargin: 0,
                DefaultDownloadDialogMargin2: 0,
            }
        }
    }
    struct ICoreWebView2_9_ImplVtbl<T: ICoreWebView2_9_Impl>(core::marker::PhantomData<T>);
    impl<T: ICoreWebView2_9_Impl> ICoreWebView2_9_ImplVtbl<T> {
        const VTABLE: ICoreWebView2_9_Vtbl = ICoreWebView2_9_Vtbl::new::<T>();
    }
    impl ICoreWebView2_9 {
        pub fn new<'a, T: ICoreWebView2_9_Impl>(
            this: &'a T,
        ) -> windows_core::ScopedInterface<'a, Self> {
            let this = windows_core::ScopedHeap {
                vtable: &ICoreWebView2_9_ImplVtbl::<T>::VTABLE as *const _ as *const _,
                this: this as *const _ as *const _,
            };
            let this = core::mem::ManuallyDrop::new(windows_core::imp::Box::new(this));
            unsafe { windows_core::ScopedInterface::new(core::mem::transmute(&this.vtable)) }
        }
    }
}
